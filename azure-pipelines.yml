trigger:
  branches:
    include:
    - dev
    - release-*
    - refs/tags/*
pr:
  branches:
    include:
    - '*'  # must quote since "*" is a YAML reserved character; we want a string

variables:
  - name: MANYLINUX_IMAGE
    value: quay.io/pypa/manylinux2010_x86_64:2021-11-07-28723f3

stages:
  - stage: CI
    condition: and(not(startsWith(variables['Build.SourceBranch'], 'refs/tags')), not(startsWith(variables['Build.SourceBranchName'], 'build-')))
    variables:
      BACKWARDS_COMPATIBILITY_ARRAYS: OFF
    jobs:
    - job:
      timeoutInMinutes: 90
      strategy:
        matrix:
          macOS_azure:
            imageName: 'macOS-10.15'
            TILEDB_AZURE: ON
            TILEDB_SERIALIZATION: ON
            CXX: clang++
            ARTIFACT_OS: macOS_azure
          linux_asan:
            imageName: 'ubuntu-20.04'
            TILEDB_CI_ASAN: ON
            TILEDB_SERIALIZATION: ON
            CXX: g++
            CC: gcc
      pool:
        vmImage: $(imageName)
      steps:
      - template: scripts/azure-linux_mac.yml

    - job: linux_manylinux
      pool: { vmImage: $(imageName) }
      container: ${{ variables.MANYLINUX_IMAGE }}
      variables:
        imageName: 'ubuntu-20.04'
        TILEDB_SERIALIZATION: ON
        CXX: g++
        CC: gcc
        CXXFLAGS: "-lrt"
        CFLAGS: "-lrt"
        USE_MANYLINUX: ON
      steps:
      - template: scripts/azure-linux_mac.yml

  - stage: Build_Release
    condition: or(or(or(startsWith(variables['Build.SourceBranch'], 'refs/tags'), eq(variables['Build.SourceBranchName'], 'dev')), startsWith(variables['Build.SourceBranchName'], 'release-')), startsWith(variables['Build.SourceBranchName'], 'build-'))
    variables:
      TILEDB_S3: ON
      TILEDB_AZURE: ON
      TILEDB_GCS: ON
      TILEDB_HDFS: ON
      TILEDB_STATIC: OFF
      TILEDB_SERIALIZATION: ON
      TILEDB_FORCE_BUILD_DEPS: ON
      MACOSX_DEPLOYMENT_TARGET: 10.14
      SUDO: 'sudo'
    jobs:
     - job:
       timeoutInMinutes: 90
       strategy:
         matrix:
           macOS:
             imageName: 'macOS-10.15'
             CXX: clang++
             ARTIFACT_OS: 'macos'
             ARTIFACT_ARCH: 'x86_64'
             CMAKE_OSX_ARCHITECTURES: "x86_64"
           macOS_arm64:
             imageName: 'macOS-10.15'
             CXX: clang++
             ARTIFACT_OS: 'macos'
             ARTIFACT_ARCH: 'arm64'
             TILEDB_GCS: OFF
             TILEDB_WERROR: OFF
             CMAKE_OSX_ARCHITECTURES: "arm64"
             MACOSX_DEPLOYMENT_TARGET: 11
       pool:
         vmImage: $(imageName)
       steps:
       - template: scripts/azure-linux_mac-release.yml
     - job: linux_manylinux
       pool: { vmImage: 'ubuntu-20.04' }
       container: ${{ variables.MANYLINUX_IMAGE }}
       strategy:
         matrix:
           standard:
             CXX: g++
             CFLAGS: "-lrt"
             CXXFLAGS: "-lrt"
             ARTIFACT_OS: 'linux'
             ARTIFACT_ARCH: "x86_64"
             TILEDB_AVX2: ON
             SUDO: ''
           noavx2:
             CXX: g++
             CFLAGS: "-lrt"
             CXXFLAGS: "-lrt"
             ARTIFACT_OS: 'linux'
             ARTIFACT_ARCH: "x86_64-noavx2"
             TILEDB_AVX2: OFF
             SUDO: ''
       steps:
       - template: scripts/azure-linux_mac-release.yml
     - job: Windows
       strategy:
         matrix:
           VS2019:
             imageName: 'windows-2019'
             # Only S3 variable is currently supported in boostrap powershell
             TILEDB_GCS: OFF
             TILEDB_HDFS: OFF
             ARTIFACT_OS: 'windows'
             ARTIFACT_ARCH: 'x86_64'
       pool:
         vmImage: $(imageName)
       steps:
       - template: scripts/azure-windows-release.yml

  # NOTE: this section cannot be conditional because `Build.Repository.Name` is an agent-scoped variable.
  - stage: Github_Release
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags')
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
     - job:
       steps:
        # First download artifacts
       - task: DownloadBuildArtifacts@0
         inputs:
          downloadType: 'specific'
       - script: |
           echo $sourceVersion
           commitHash=${sourceVersion:0:7}
           echo $commitHash
           echo "##vso[task.setvariable variable=commitHash]$commitHash" ## Set variable for using in other tasks.
         env: { sourceVersion: $(Build.SourceVersion) }
         displayName: Git Hash 7-digit
       - task: GithubRelease@0
         condition: succeeded() # only run this job if the build step succeeded
         displayName: 'Add artifacts to GitHub Release'
         inputs:
           gitHubConnection: TileDB-Inc-Release
           repositoryName: $(Build.Repository.Name)
           addChangeLog: false
           action: edit
           tag: $(Build.SourceBranchName)
           assets: |
             $(Build.ArtifactStagingDirectory)/built-libs/*
