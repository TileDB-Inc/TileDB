// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: tiledb-rest.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 8000
#error \
    "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(ce5904e6f9410cec);
CAPNP_DECLARE_SCHEMA(e3dadf2bf211bc97);
CAPNP_DECLARE_SCHEMA(b6c95b4b8111ad36);
CAPNP_DECLARE_SCHEMA(a45730f57e0460b4);
CAPNP_DECLARE_SCHEMA(facceeafd4472c68);
CAPNP_DECLARE_SCHEMA(d71de32f98e296fe);
CAPNP_DECLARE_SCHEMA(ceff8d62d10cd1de);
CAPNP_DECLARE_SCHEMA(a1b81d67548230d4);
CAPNP_DECLARE_SCHEMA(92ad78f56de3d76a);
CAPNP_DECLARE_SCHEMA(d00b2f19cc21b9b4);
CAPNP_DECLARE_SCHEMA(d20a578112fa92a2);
CAPNP_DECLARE_SCHEMA(95e26a84d32d8223);
CAPNP_DECLARE_SCHEMA(a2a652536db09fa0);
CAPNP_DECLARE_SCHEMA(de030f447664754c);
CAPNP_DECLARE_SCHEMA(fa787661cd3563a4);
CAPNP_DECLARE_SCHEMA(fda1cb9663a55b70);
CAPNP_DECLARE_SCHEMA(fd5825d8c6e74d78);
CAPNP_DECLARE_SCHEMA(e7175047415b3f97);
CAPNP_DECLARE_SCHEMA(9ceaf832b3ab897f);
CAPNP_DECLARE_SCHEMA(bc4583f733eac4f5);
CAPNP_DECLARE_SCHEMA(f179c194ae71718c);
CAPNP_DECLARE_SCHEMA(db5514c8aaf6faea);
CAPNP_DECLARE_SCHEMA(c6b5bb09d4611252);
CAPNP_DECLARE_SCHEMA(884e0a5f2521a5c6);
CAPNP_DECLARE_SCHEMA(a83707d3ba24dd32);
CAPNP_DECLARE_SCHEMA(a9caccb4333a2baf);
CAPNP_DECLARE_SCHEMA(d3c5983c670e0f42);
CAPNP_DECLARE_SCHEMA(82d7452da7cd249a);
CAPNP_DECLARE_SCHEMA(9354174d952207d2);
CAPNP_DECLARE_SCHEMA(bb80cdbc3f312934);
CAPNP_DECLARE_SCHEMA(c7e036a11506a1a4);
CAPNP_DECLARE_SCHEMA(8bf6c1d37e748294);
CAPNP_DECLARE_SCHEMA(8ba60147a0e6735e);
CAPNP_DECLARE_SCHEMA(86cfc12d74ed4aa0);
CAPNP_DECLARE_SCHEMA(f7aa276767b422e7);
CAPNP_DECLARE_SCHEMA(dba20dec138adac9);
CAPNP_DECLARE_SCHEMA(ff14003c70494585);
CAPNP_DECLARE_SCHEMA(f86b7bf97823250f);
CAPNP_DECLARE_SCHEMA(fdd9e47288724221);
CAPNP_DECLARE_SCHEMA(cbe1e7c13508aa2c);
CAPNP_DECLARE_SCHEMA(dac6a7f675c57409);
CAPNP_DECLARE_SCHEMA(afc739d5c01e6496);
CAPNP_DECLARE_SCHEMA(eaf57cb9871fc06f);
CAPNP_DECLARE_SCHEMA(e19754f813ccf79c);
CAPNP_DECLARE_SCHEMA(d74f5fed155d316c);
CAPNP_DECLARE_SCHEMA(def87cead82188e7);
CAPNP_DECLARE_SCHEMA(c1a2d010de779de5);
CAPNP_DECLARE_SCHEMA(c86c77b5f6a2bf0f);
CAPNP_DECLARE_SCHEMA(9b9a5fc7713a8692);
CAPNP_DECLARE_SCHEMA(96ba49d0f8b23ccc);
CAPNP_DECLARE_SCHEMA(9df6f2a42c4e5f0b);
CAPNP_DECLARE_SCHEMA(a18264549448ece3);
CAPNP_DECLARE_SCHEMA(9be1921b07e6cd2d);
CAPNP_DECLARE_SCHEMA(f01116579e9ea98e);
CAPNP_DECLARE_SCHEMA(9737dcafdfce31bb);
CAPNP_DECLARE_SCHEMA(926fe1c3b12ed651);
CAPNP_DECLARE_SCHEMA(9317f20ce509d918);
CAPNP_DECLARE_SCHEMA(d9d27c082dec9e26);
CAPNP_DECLARE_SCHEMA(9eb745af522d087c);
CAPNP_DECLARE_SCHEMA(8cd4e323f1feea3b);
CAPNP_DECLARE_SCHEMA(92c8467685565269);
CAPNP_DECLARE_SCHEMA(bda7916926591c22);
CAPNP_DECLARE_SCHEMA(c95970eb9310dc9c);
CAPNP_DECLARE_SCHEMA(d42e7b38b33e3d29);
CAPNP_DECLARE_SCHEMA(a000530ab1d17816);
CAPNP_DECLARE_SCHEMA(838188de0fd57580);
CAPNP_DECLARE_SCHEMA(c41bcc7e8cc58f18);
CAPNP_DECLARE_SCHEMA(dcdd20e1b79e915a);
CAPNP_DECLARE_SCHEMA(a2ea10c715b475c1);
CAPNP_DECLARE_SCHEMA(c4e54a63294eddb7);
CAPNP_DECLARE_SCHEMA(83b01e46759bde40);
CAPNP_DECLARE_SCHEMA(fb7f36ad4d8ffe84);
CAPNP_DECLARE_SCHEMA(d5fd459ad75e86a9);
CAPNP_DECLARE_SCHEMA(c0c730b5390f4427);
CAPNP_DECLARE_SCHEMA(d8bd3c0dec37b773);
CAPNP_DECLARE_SCHEMA(cde352fc27e7ca61);
CAPNP_DECLARE_SCHEMA(89aa8f4e88036b9e);
CAPNP_DECLARE_SCHEMA(d492b6734d5e3bf5);
CAPNP_DECLARE_SCHEMA(bde8ebd7b13d8625);
CAPNP_DECLARE_SCHEMA(a736c51d292ca752);
CAPNP_DECLARE_SCHEMA(cd8abc9dabc4b03f);

}  // namespace schemas
}  // namespace capnp

namespace tiledb {
namespace sm {
namespace serialization {
namespace capnp {

struct DomainArray {
  DomainArray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ce5904e6f9410cec, 0, 10)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct KV {
  KV() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e3dadf2bf211bc97, 0, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Config {
  Config() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b6c95b4b8111ad36, 0, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Array {
  Array() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a45730f57e0460b4, 3, 8)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct ArrayOpen {
  ArrayOpen() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(facceeafd4472c68, 0, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct ArraySchema {
  ArraySchema() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d71de32f98e296fe, 2, 15)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct DimensionLabel {
  DimensionLabel() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ceff8d62d10cd1de, 2, 6)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct ArraySchemaEvolution {
  ArraySchemaEvolution() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a1b81d67548230d4, 0, 5)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Attribute {
  Attribute() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(92ad78f56de3d76a, 1, 6)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Enumeration {
  Enumeration() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d00b2f19cc21b9b4, 1, 5)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct AttributeBufferHeader {
  AttributeBufferHeader() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d20a578112fa92a2, 6, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Dimension {
  Dimension() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct TileExtent;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(95e26a84d32d8223, 2, 4)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Dimension::TileExtent {
  TileExtent() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which : uint16_t {
    INT8,
    UINT8,
    INT16,
    UINT16,
    INT32,
    UINT32,
    INT64,
    UINT64,
    FLOAT32,
    FLOAT64,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a2a652536db09fa0, 2, 4)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Domain {
  Domain() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(de030f447664754c, 0, 4)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Error {
  Error() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fa787661cd3563a4, 1, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct FloatScaleConfig {
  FloatScaleConfig() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fda1cb9663a55b70, 3, 0)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct WebpConfig {
  WebpConfig() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fd5825d8c6e74d78, 2, 0)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Filter {
  Filter() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Data;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e7175047415b3f97, 2, 4)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Filter::Data {
  Data() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which : uint16_t {
    TEXT,
    BYTES,
    INT8,
    UINT8,
    INT16,
    UINT16,
    INT32,
    UINT32,
    INT64,
    UINT64,
    FLOAT32,
    FLOAT64,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9ceaf832b3ab897f, 2, 4)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct FilterPipeline {
  FilterPipeline() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bc4583f733eac4f5, 0, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

template <
    typename Key = ::capnp::AnyPointer,
    typename Value = ::capnp::AnyPointer>
struct Map {
  Map() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Entry;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f179c194ae71718c, 0, 1)
#if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema::Dependency brandDependencies[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return ::capnp::_::ChooseBrand<_capnpPrivate, Key, Value>::brand();
    }
#endif  // !CAPNP_LITE
  };
};

template <typename Key, typename Value>
struct Map<Key, Value>::Entry {
  Entry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(db5514c8aaf6faea, 0, 2)
#if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return ::capnp::_::ChooseBrand<_capnpPrivate, Key, Value>::brand();
    }
#endif  // !CAPNP_LITE
  };
};

struct MapUInt32 {
  MapUInt32() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Entry;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c6b5bb09d4611252, 0, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct MapUInt32::Entry {
  Entry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(884e0a5f2521a5c6, 1, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct MapInt64 {
  MapInt64() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Entry;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a83707d3ba24dd32, 0, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct MapInt64::Entry {
  Entry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a9caccb4333a2baf, 1, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct MapUInt64 {
  MapUInt64() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Entry;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d3c5983c670e0f42, 0, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct MapUInt64::Entry {
  Entry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(82d7452da7cd249a, 1, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct MapFloat64 {
  MapFloat64() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Entry;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9354174d952207d2, 0, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct MapFloat64::Entry {
  Entry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bb80cdbc3f312934, 1, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Stats {
  Stats() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c7e036a11506a1a4, 0, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct UnorderedWriterState {
  UnorderedWriterState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8bf6c1d37e748294, 1, 3)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Writer {
  Writer() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8ba60147a0e6735e, 1, 5)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct SubarrayRanges {
  SubarrayRanges() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(86cfc12d74ed4aa0, 1, 4)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct LabelSubarrayRanges {
  LabelSubarrayRanges() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f7aa276767b422e7, 1, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Subarray {
  Subarray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dba20dec138adac9, 1, 6)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct SubarrayPartitioner {
  SubarrayPartitioner() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct PartitionInfo;
  struct State;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ff14003c70494585, 3, 5)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct SubarrayPartitioner::PartitionInfo {
  PartitionInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f86b7bf97823250f, 3, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct SubarrayPartitioner::State {
  State() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fdd9e47288724221, 2, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct ReadState {
  ReadState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cbe1e7c13508aa2c, 1, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct ConditionClause {
  ConditionClause() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dac6a7f675c57409, 1, 3)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct ASTNode {
  ASTNode() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(afc739d5c01e6496, 1, 5)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Condition {
  Condition() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(eaf57cb9871fc06f, 0, 3)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct QueryReader {
  QueryReader() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e19754f813ccf79c, 0, 5)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Delete {
  Delete() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d74f5fed155d316c, 0, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct ResultCellSlab {
  ResultCellSlab() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(def87cead82188e7, 4, 0)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct FragmentIndex {
  FragmentIndex() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c1a2d010de779de5, 2, 0)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct ReadStateIndex {
  ReadStateIndex() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c86c77b5f6a2bf0f, 1, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct ReaderIndex {
  ReaderIndex() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9b9a5fc7713a8692, 0, 5)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Query {
  Query() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(96ba49d0f8b23ccc, 4, 15)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct NonEmptyDomain {
  NonEmptyDomain() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9df6f2a42c4e5f0b, 1, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct NonEmptyDomainList {
  NonEmptyDomainList() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a18264549448ece3, 0, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct AttributeBufferSize {
  AttributeBufferSize() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9be1921b07e6cd2d, 3, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct MaxBufferSizes {
  MaxBufferSizes() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f01116579e9ea98e, 0, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct ArrayMetadata {
  ArrayMetadata() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct MetadataEntry;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9737dcafdfce31bb, 0, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct ArrayMetadata::MetadataEntry {
  MetadataEntry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(926fe1c3b12ed651, 1, 3)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct ArrayDirectory {
  ArrayDirectory() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct TimestampedURI;
  struct DeleteAndUpdateTileLocation;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9317f20ce509d918, 2, 12)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct ArrayDirectory::TimestampedURI {
  TimestampedURI() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d9d27c082dec9e26, 2, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct ArrayDirectory::DeleteAndUpdateTileLocation {
  DeleteAndUpdateTileLocation() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9eb745af522d087c, 1, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct EstimatedResultSize {
  EstimatedResultSize() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct ResultSize;
  struct MemorySize;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8cd4e323f1feea3b, 0, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct EstimatedResultSize::ResultSize {
  ResultSize() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(92c8467685565269, 3, 0)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct EstimatedResultSize::MemorySize {
  MemorySize() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bda7916926591c22, 3, 0)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct FragmentInfoRequest {
  FragmentInfoRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c95970eb9310dc9c, 0, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct SingleFragmentInfo {
  SingleFragmentInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d42e7b38b33e3d29, 1, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct FragmentInfo {
  FragmentInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a000530ab1d17816, 0, 4)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct GroupMetadata {
  GroupMetadata() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(838188de0fd57580, 0, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct GroupMember {
  GroupMember() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c41bcc7e8cc58f18, 1, 3)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Group {
  Group() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct GroupDetails;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dcdd20e1b79e915a, 0, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Group::GroupDetails {
  GroupDetails() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a2ea10c715b475c1, 0, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct GroupUpdate {
  GroupUpdate() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct GroupUpdateDetails;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c4e54a63294eddb7, 0, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct GroupUpdate::GroupUpdateDetails {
  GroupUpdateDetails() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(83b01e46759bde40, 0, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct GroupCreate {
  GroupCreate() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct GroupCreateDetails;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fb7f36ad4d8ffe84, 0, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct GroupCreate::GroupCreateDetails {
  GroupCreateDetails() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d5fd459ad75e86a9, 0, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct GlobalWriteState {
  GlobalWriteState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c0c730b5390f4427, 1, 4)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct SingleCoord {
  SingleCoord() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d8bd3c0dec37b773, 0, 3)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct FragmentMetadata {
  FragmentMetadata() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct GenericTileOffsets;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cde352fc27e7ca61, 4, 22)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct FragmentMetadata::GenericTileOffsets {
  GenericTileOffsets() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(89aa8f4e88036b9e, 3, 8)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct MultiPartUploadState {
  MultiPartUploadState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d492b6734d5e3bf5, 1, 4)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct CompletedPart {
  CompletedPart() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bde8ebd7b13d8625, 1, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct WrittenFragmentInfo {
  WrittenFragmentInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a736c51d292ca752, 0, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct BufferedChunk {
  BufferedChunk() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cd8abc9dabc4b03f, 1, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class DomainArray::Reader {
 public:
  typedef DomainArray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasInt8() const;
  inline ::capnp::List<::int8_t, ::capnp::Kind::PRIMITIVE>::Reader getInt8()
      const;

  inline bool hasUint8() const;
  inline ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>::Reader getUint8()
      const;

  inline bool hasInt16() const;
  inline ::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>::Reader getInt16()
      const;

  inline bool hasUint16() const;
  inline ::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>::Reader getUint16()
      const;

  inline bool hasInt32() const;
  inline ::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>::Reader getInt32()
      const;

  inline bool hasUint32() const;
  inline ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>::Reader getUint32()
      const;

  inline bool hasInt64() const;
  inline ::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>::Reader getInt64()
      const;

  inline bool hasUint64() const;
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader getUint64()
      const;

  inline bool hasFloat32() const;
  inline ::capnp::List<float, ::capnp::Kind::PRIMITIVE>::Reader getFloat32()
      const;

  inline bool hasFloat64() const;
  inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Reader getFloat64()
      const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DomainArray::Builder {
 public:
  typedef DomainArray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasInt8();
  inline ::capnp::List<::int8_t, ::capnp::Kind::PRIMITIVE>::Builder getInt8();
  inline void setInt8(
      ::capnp::List<::int8_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setInt8(::kj::ArrayPtr<const ::int8_t> value);
  inline ::capnp::List<::int8_t, ::capnp::Kind::PRIMITIVE>::Builder initInt8(
      unsigned int size);
  inline void adoptInt8(
      ::capnp::Orphan<::capnp::List<::int8_t, ::capnp::Kind::PRIMITIVE>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::int8_t, ::capnp::Kind::PRIMITIVE>>
  disownInt8();

  inline bool hasUint8();
  inline ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>::Builder getUint8();
  inline void setUint8(
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setUint8(::kj::ArrayPtr<const ::uint8_t> value);
  inline ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>::Builder initUint8(
      unsigned int size);
  inline void adoptUint8(
      ::capnp::Orphan<::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>>
  disownUint8();

  inline bool hasInt16();
  inline ::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>::Builder getInt16();
  inline void setInt16(
      ::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setInt16(::kj::ArrayPtr<const ::int16_t> value);
  inline ::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>::Builder initInt16(
      unsigned int size);
  inline void adoptInt16(
      ::capnp::Orphan<::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>>
  disownInt16();

  inline bool hasUint16();
  inline ::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>::Builder
  getUint16();
  inline void setUint16(
      ::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setUint16(::kj::ArrayPtr<const ::uint16_t> value);
  inline ::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>::Builder
  initUint16(unsigned int size);
  inline void adoptUint16(
      ::capnp::Orphan<::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>>
  disownUint16();

  inline bool hasInt32();
  inline ::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>::Builder getInt32();
  inline void setInt32(
      ::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setInt32(::kj::ArrayPtr<const ::int32_t> value);
  inline ::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>::Builder initInt32(
      unsigned int size);
  inline void adoptInt32(
      ::capnp::Orphan<::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>>
  disownInt32();

  inline bool hasUint32();
  inline ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>::Builder
  getUint32();
  inline void setUint32(
      ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setUint32(::kj::ArrayPtr<const ::uint32_t> value);
  inline ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>::Builder
  initUint32(unsigned int size);
  inline void adoptUint32(
      ::capnp::Orphan<::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>
  disownUint32();

  inline bool hasInt64();
  inline ::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>::Builder getInt64();
  inline void setInt64(
      ::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setInt64(::kj::ArrayPtr<const ::int64_t> value);
  inline ::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>::Builder initInt64(
      unsigned int size);
  inline void adoptInt64(
      ::capnp::Orphan<::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>>
  disownInt64();

  inline bool hasUint64();
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  getUint64();
  inline void setUint64(
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setUint64(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  initUint64(unsigned int size);
  inline void adoptUint64(
      ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
  disownUint64();

  inline bool hasFloat32();
  inline ::capnp::List<float, ::capnp::Kind::PRIMITIVE>::Builder getFloat32();
  inline void setFloat32(
      ::capnp::List<float, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setFloat32(::kj::ArrayPtr<const float> value);
  inline ::capnp::List<float, ::capnp::Kind::PRIMITIVE>::Builder initFloat32(
      unsigned int size);
  inline void adoptFloat32(
      ::capnp::Orphan<::capnp::List<float, ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan<::capnp::List<float, ::capnp::Kind::PRIMITIVE>>
  disownFloat32();

  inline bool hasFloat64();
  inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Builder getFloat64();
  inline void setFloat64(
      ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setFloat64(::kj::ArrayPtr<const double> value);
  inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Builder initFloat64(
      unsigned int size);
  inline void adoptFloat64(
      ::capnp::Orphan<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>
  disownFloat64();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DomainArray::Pipeline {
 public:
  typedef DomainArray Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class KV::Reader {
 public:
  typedef KV Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasKey() const;
  inline ::capnp::Text::Reader getKey() const;

  inline bool hasValue() const;
  inline ::capnp::Text::Reader getValue() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class KV::Builder {
 public:
  typedef KV Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasKey();
  inline ::capnp::Text::Builder getKey();
  inline void setKey(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initKey(unsigned int size);
  inline void adoptKey(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownKey();

  inline bool hasValue();
  inline ::capnp::Text::Builder getValue();
  inline void setValue(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownValue();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class KV::Pipeline {
 public:
  typedef KV Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Config::Reader {
 public:
  typedef Config Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasEntries() const;
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::KV,
      ::capnp::Kind::STRUCT>::Reader
  getEntries() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Config::Builder {
 public:
  typedef Config Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasEntries();
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::KV,
      ::capnp::Kind::STRUCT>::Builder
  getEntries();
  inline void setEntries(::capnp::List<
                         ::tiledb::sm::serialization::capnp::KV,
                         ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::KV,
      ::capnp::Kind::STRUCT>::Builder
  initEntries(unsigned int size);
  inline void adoptEntries(::capnp::Orphan<::capnp::List<
                               ::tiledb::sm::serialization::capnp::KV,
                               ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::tiledb::sm::serialization::capnp::KV,
      ::capnp::Kind::STRUCT>>
  disownEntries();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Config::Pipeline {
 public:
  typedef Config Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Array::Reader {
 public:
  typedef Array Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline ::uint64_t getEndTimestamp() const;

  inline bool hasQueryType() const;
  inline ::capnp::Text::Reader getQueryType() const;

  inline bool hasUri() const;
  inline ::capnp::Text::Reader getUri() const;

  inline ::uint64_t getStartTimestamp() const;

  inline bool hasArraySchemaLatest() const;
  inline ::tiledb::sm::serialization::capnp::ArraySchema::Reader
  getArraySchemaLatest() const;

  inline bool hasArraySchemasAll() const;
  inline ::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::ArraySchema>::Reader
  getArraySchemasAll() const;

  inline bool hasNonEmptyDomain() const;
  inline ::tiledb::sm::serialization::capnp::NonEmptyDomainList::Reader
  getNonEmptyDomain() const;

  inline bool hasArrayMetadata() const;
  inline ::tiledb::sm::serialization::capnp::ArrayMetadata::Reader
  getArrayMetadata() const;

  inline bool hasArrayDirectory() const;
  inline ::tiledb::sm::serialization::capnp::ArrayDirectory::Reader
  getArrayDirectory() const;

  inline bool hasFragmentMetadataAll() const;
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::FragmentMetadata,
      ::capnp::Kind::STRUCT>::Reader
  getFragmentMetadataAll() const;

  inline ::uint64_t getOpenedAtEndTimestamp() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Array::Builder {
 public:
  typedef Array Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline ::uint64_t getEndTimestamp();
  inline void setEndTimestamp(::uint64_t value);

  inline bool hasQueryType();
  inline ::capnp::Text::Builder getQueryType();
  inline void setQueryType(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initQueryType(unsigned int size);
  inline void adoptQueryType(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownQueryType();

  inline bool hasUri();
  inline ::capnp::Text::Builder getUri();
  inline void setUri(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initUri(unsigned int size);
  inline void adoptUri(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownUri();

  inline ::uint64_t getStartTimestamp();
  inline void setStartTimestamp(::uint64_t value);

  inline bool hasArraySchemaLatest();
  inline ::tiledb::sm::serialization::capnp::ArraySchema::Builder
  getArraySchemaLatest();
  inline void setArraySchemaLatest(
      ::tiledb::sm::serialization::capnp::ArraySchema::Reader value);
  inline ::tiledb::sm::serialization::capnp::ArraySchema::Builder
  initArraySchemaLatest();
  inline void adoptArraySchemaLatest(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::ArraySchema>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::ArraySchema>
  disownArraySchemaLatest();

  inline bool hasArraySchemasAll();
  inline ::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::ArraySchema>::Builder
  getArraySchemasAll();
  inline void setArraySchemasAll(
      ::tiledb::sm::serialization::capnp::Map<
          ::capnp::Text,
          ::tiledb::sm::serialization::capnp::ArraySchema>::Reader value);
  inline ::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::ArraySchema>::Builder
  initArraySchemasAll();
  inline void adoptArraySchemasAll(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::Map<
          ::capnp::Text,
          ::tiledb::sm::serialization::capnp::ArraySchema>>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::ArraySchema>>
  disownArraySchemasAll();

  inline bool hasNonEmptyDomain();
  inline ::tiledb::sm::serialization::capnp::NonEmptyDomainList::Builder
  getNonEmptyDomain();
  inline void setNonEmptyDomain(
      ::tiledb::sm::serialization::capnp::NonEmptyDomainList::Reader value);
  inline ::tiledb::sm::serialization::capnp::NonEmptyDomainList::Builder
  initNonEmptyDomain();
  inline void adoptNonEmptyDomain(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::NonEmptyDomainList>&&
          value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::NonEmptyDomainList>
  disownNonEmptyDomain();

  inline bool hasArrayMetadata();
  inline ::tiledb::sm::serialization::capnp::ArrayMetadata::Builder
  getArrayMetadata();
  inline void setArrayMetadata(
      ::tiledb::sm::serialization::capnp::ArrayMetadata::Reader value);
  inline ::tiledb::sm::serialization::capnp::ArrayMetadata::Builder
  initArrayMetadata();
  inline void adoptArrayMetadata(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::ArrayMetadata>&&
          value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::ArrayMetadata>
  disownArrayMetadata();

  inline bool hasArrayDirectory();
  inline ::tiledb::sm::serialization::capnp::ArrayDirectory::Builder
  getArrayDirectory();
  inline void setArrayDirectory(
      ::tiledb::sm::serialization::capnp::ArrayDirectory::Reader value);
  inline ::tiledb::sm::serialization::capnp::ArrayDirectory::Builder
  initArrayDirectory();
  inline void adoptArrayDirectory(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::ArrayDirectory>&&
          value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::ArrayDirectory>
  disownArrayDirectory();

  inline bool hasFragmentMetadataAll();
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::FragmentMetadata,
      ::capnp::Kind::STRUCT>::Builder
  getFragmentMetadataAll();
  inline void setFragmentMetadataAll(
      ::capnp::List<
          ::tiledb::sm::serialization::capnp::FragmentMetadata,
          ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::FragmentMetadata,
      ::capnp::Kind::STRUCT>::Builder
  initFragmentMetadataAll(unsigned int size);
  inline void adoptFragmentMetadataAll(
      ::capnp::Orphan<::capnp::List<
          ::tiledb::sm::serialization::capnp::FragmentMetadata,
          ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::tiledb::sm::serialization::capnp::FragmentMetadata,
      ::capnp::Kind::STRUCT>>
  disownFragmentMetadataAll();

  inline ::uint64_t getOpenedAtEndTimestamp();
  inline void setOpenedAtEndTimestamp(::uint64_t value);

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Array::Pipeline {
 public:
  typedef Array Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::tiledb::sm::serialization::capnp::ArraySchema::Pipeline
  getArraySchemaLatest();
  inline ::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::ArraySchema>::Pipeline
  getArraySchemasAll();
  inline ::tiledb::sm::serialization::capnp::NonEmptyDomainList::Pipeline
  getNonEmptyDomain();
  inline ::tiledb::sm::serialization::capnp::ArrayMetadata::Pipeline
  getArrayMetadata();
  inline ::tiledb::sm::serialization::capnp::ArrayDirectory::Pipeline
  getArrayDirectory();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ArrayOpen::Reader {
 public:
  typedef ArrayOpen Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasConfig() const;
  inline ::tiledb::sm::serialization::capnp::Config::Reader getConfig() const;

  inline bool hasQueryType() const;
  inline ::capnp::Text::Reader getQueryType() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ArrayOpen::Builder {
 public:
  typedef ArrayOpen Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasConfig();
  inline ::tiledb::sm::serialization::capnp::Config::Builder getConfig();
  inline void setConfig(
      ::tiledb::sm::serialization::capnp::Config::Reader value);
  inline ::tiledb::sm::serialization::capnp::Config::Builder initConfig();
  inline void adoptConfig(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::Config>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Config>
  disownConfig();

  inline bool hasQueryType();
  inline ::capnp::Text::Builder getQueryType();
  inline void setQueryType(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initQueryType(unsigned int size);
  inline void adoptQueryType(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownQueryType();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ArrayOpen::Pipeline {
 public:
  typedef ArrayOpen Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::tiledb::sm::serialization::capnp::Config::Pipeline getConfig();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ArraySchema::Reader {
 public:
  typedef ArraySchema Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasArrayType() const;
  inline ::capnp::Text::Reader getArrayType() const;

  inline bool hasAttributes() const;
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::Attribute,
      ::capnp::Kind::STRUCT>::Reader
  getAttributes() const;

  inline ::uint64_t getCapacity() const;

  inline bool hasCellOrder() const;
  inline ::capnp::Text::Reader getCellOrder() const;

  inline bool hasCoordsFilterPipeline() const;
  inline ::tiledb::sm::serialization::capnp::FilterPipeline::Reader
  getCoordsFilterPipeline() const;

  inline bool hasDomain() const;
  inline ::tiledb::sm::serialization::capnp::Domain::Reader getDomain() const;

  inline bool hasOffsetFilterPipeline() const;
  inline ::tiledb::sm::serialization::capnp::FilterPipeline::Reader
  getOffsetFilterPipeline() const;

  inline bool hasTileOrder() const;
  inline ::capnp::Text::Reader getTileOrder() const;

  inline bool hasUri() const;
  inline ::capnp::Text::Reader getUri() const;

  inline bool hasVersion() const;
  inline ::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>::Reader getVersion()
      const;

  inline bool getAllowsDuplicates() const;

  inline bool hasValidityFilterPipeline() const;
  inline ::tiledb::sm::serialization::capnp::FilterPipeline::Reader
  getValidityFilterPipeline() const;

  inline bool hasName() const;
  inline ::capnp::Text::Reader getName() const;

  inline bool hasTimestampRange() const;
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
  getTimestampRange() const;

  inline bool hasDimensionLabels() const;
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::DimensionLabel,
      ::capnp::Kind::STRUCT>::Reader
  getDimensionLabels() const;

  inline bool hasEnumerations() const;
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::Enumeration,
      ::capnp::Kind::STRUCT>::Reader
  getEnumerations() const;

  inline bool hasEnumerationPathMap() const;
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::KV,
      ::capnp::Kind::STRUCT>::Reader
  getEnumerationPathMap() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ArraySchema::Builder {
 public:
  typedef ArraySchema Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasArrayType();
  inline ::capnp::Text::Builder getArrayType();
  inline void setArrayType(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initArrayType(unsigned int size);
  inline void adoptArrayType(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownArrayType();

  inline bool hasAttributes();
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::Attribute,
      ::capnp::Kind::STRUCT>::Builder
  getAttributes();
  inline void setAttributes(::capnp::List<
                            ::tiledb::sm::serialization::capnp::Attribute,
                            ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::Attribute,
      ::capnp::Kind::STRUCT>::Builder
  initAttributes(unsigned int size);
  inline void adoptAttributes(::capnp::Orphan<::capnp::List<
                                  ::tiledb::sm::serialization::capnp::Attribute,
                                  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::tiledb::sm::serialization::capnp::Attribute,
      ::capnp::Kind::STRUCT>>
  disownAttributes();

  inline ::uint64_t getCapacity();
  inline void setCapacity(::uint64_t value);

  inline bool hasCellOrder();
  inline ::capnp::Text::Builder getCellOrder();
  inline void setCellOrder(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initCellOrder(unsigned int size);
  inline void adoptCellOrder(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownCellOrder();

  inline bool hasCoordsFilterPipeline();
  inline ::tiledb::sm::serialization::capnp::FilterPipeline::Builder
  getCoordsFilterPipeline();
  inline void setCoordsFilterPipeline(
      ::tiledb::sm::serialization::capnp::FilterPipeline::Reader value);
  inline ::tiledb::sm::serialization::capnp::FilterPipeline::Builder
  initCoordsFilterPipeline();
  inline void adoptCoordsFilterPipeline(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::FilterPipeline>&&
          value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::FilterPipeline>
  disownCoordsFilterPipeline();

  inline bool hasDomain();
  inline ::tiledb::sm::serialization::capnp::Domain::Builder getDomain();
  inline void setDomain(
      ::tiledb::sm::serialization::capnp::Domain::Reader value);
  inline ::tiledb::sm::serialization::capnp::Domain::Builder initDomain();
  inline void adoptDomain(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::Domain>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Domain>
  disownDomain();

  inline bool hasOffsetFilterPipeline();
  inline ::tiledb::sm::serialization::capnp::FilterPipeline::Builder
  getOffsetFilterPipeline();
  inline void setOffsetFilterPipeline(
      ::tiledb::sm::serialization::capnp::FilterPipeline::Reader value);
  inline ::tiledb::sm::serialization::capnp::FilterPipeline::Builder
  initOffsetFilterPipeline();
  inline void adoptOffsetFilterPipeline(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::FilterPipeline>&&
          value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::FilterPipeline>
  disownOffsetFilterPipeline();

  inline bool hasTileOrder();
  inline ::capnp::Text::Builder getTileOrder();
  inline void setTileOrder(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initTileOrder(unsigned int size);
  inline void adoptTileOrder(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownTileOrder();

  inline bool hasUri();
  inline ::capnp::Text::Builder getUri();
  inline void setUri(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initUri(unsigned int size);
  inline void adoptUri(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownUri();

  inline bool hasVersion();
  inline ::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>::Builder
  getVersion();
  inline void setVersion(
      ::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setVersion(::kj::ArrayPtr<const ::int32_t> value);
  inline ::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>::Builder
  initVersion(unsigned int size);
  inline void adoptVersion(
      ::capnp::Orphan<::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>>
  disownVersion();

  inline bool getAllowsDuplicates();
  inline void setAllowsDuplicates(bool value);

  inline bool hasValidityFilterPipeline();
  inline ::tiledb::sm::serialization::capnp::FilterPipeline::Builder
  getValidityFilterPipeline();
  inline void setValidityFilterPipeline(
      ::tiledb::sm::serialization::capnp::FilterPipeline::Reader value);
  inline ::tiledb::sm::serialization::capnp::FilterPipeline::Builder
  initValidityFilterPipeline();
  inline void adoptValidityFilterPipeline(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::FilterPipeline>&&
          value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::FilterPipeline>
  disownValidityFilterPipeline();

  inline bool hasName();
  inline ::capnp::Text::Builder getName();
  inline void setName(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownName();

  inline bool hasTimestampRange();
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  getTimestampRange();
  inline void setTimestampRange(
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTimestampRange(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  initTimestampRange(unsigned int size);
  inline void adoptTimestampRange(
      ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
  disownTimestampRange();

  inline bool hasDimensionLabels();
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::DimensionLabel,
      ::capnp::Kind::STRUCT>::Builder
  getDimensionLabels();
  inline void setDimensionLabels(
      ::capnp::List<
          ::tiledb::sm::serialization::capnp::DimensionLabel,
          ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::DimensionLabel,
      ::capnp::Kind::STRUCT>::Builder
  initDimensionLabels(unsigned int size);
  inline void adoptDimensionLabels(
      ::capnp::Orphan<::capnp::List<
          ::tiledb::sm::serialization::capnp::DimensionLabel,
          ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::tiledb::sm::serialization::capnp::DimensionLabel,
      ::capnp::Kind::STRUCT>>
  disownDimensionLabels();

  inline bool hasEnumerations();
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::Enumeration,
      ::capnp::Kind::STRUCT>::Builder
  getEnumerations();
  inline void setEnumerations(::capnp::List<
                              ::tiledb::sm::serialization::capnp::Enumeration,
                              ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::Enumeration,
      ::capnp::Kind::STRUCT>::Builder
  initEnumerations(unsigned int size);
  inline void adoptEnumerations(
      ::capnp::Orphan<::capnp::List<
          ::tiledb::sm::serialization::capnp::Enumeration,
          ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::tiledb::sm::serialization::capnp::Enumeration,
      ::capnp::Kind::STRUCT>>
  disownEnumerations();

  inline bool hasEnumerationPathMap();
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::KV,
      ::capnp::Kind::STRUCT>::Builder
  getEnumerationPathMap();
  inline void setEnumerationPathMap(::capnp::List<
                                    ::tiledb::sm::serialization::capnp::KV,
                                    ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::KV,
      ::capnp::Kind::STRUCT>::Builder
  initEnumerationPathMap(unsigned int size);
  inline void adoptEnumerationPathMap(
      ::capnp::Orphan<::capnp::List<
          ::tiledb::sm::serialization::capnp::KV,
          ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::tiledb::sm::serialization::capnp::KV,
      ::capnp::Kind::STRUCT>>
  disownEnumerationPathMap();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ArraySchema::Pipeline {
 public:
  typedef ArraySchema Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::tiledb::sm::serialization::capnp::FilterPipeline::Pipeline
  getCoordsFilterPipeline();
  inline ::tiledb::sm::serialization::capnp::Domain::Pipeline getDomain();
  inline ::tiledb::sm::serialization::capnp::FilterPipeline::Pipeline
  getOffsetFilterPipeline();
  inline ::tiledb::sm::serialization::capnp::FilterPipeline::Pipeline
  getValidityFilterPipeline();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DimensionLabel::Reader {
 public:
  typedef DimensionLabel Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline ::uint32_t getDimensionId() const;

  inline bool hasName() const;
  inline ::capnp::Text::Reader getName() const;

  inline bool hasUri() const;
  inline ::capnp::Text::Reader getUri() const;

  inline bool hasAttributeName() const;
  inline ::capnp::Text::Reader getAttributeName() const;

  inline bool hasOrder() const;
  inline ::capnp::Text::Reader getOrder() const;

  inline bool hasType() const;
  inline ::capnp::Text::Reader getType() const;

  inline ::uint32_t getCellValNum() const;

  inline bool getExternal() const;

  inline bool getRelative() const;

  inline bool hasSchema() const;
  inline ::tiledb::sm::serialization::capnp::ArraySchema::Reader getSchema()
      const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DimensionLabel::Builder {
 public:
  typedef DimensionLabel Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline ::uint32_t getDimensionId();
  inline void setDimensionId(::uint32_t value);

  inline bool hasName();
  inline ::capnp::Text::Builder getName();
  inline void setName(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownName();

  inline bool hasUri();
  inline ::capnp::Text::Builder getUri();
  inline void setUri(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initUri(unsigned int size);
  inline void adoptUri(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownUri();

  inline bool hasAttributeName();
  inline ::capnp::Text::Builder getAttributeName();
  inline void setAttributeName(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initAttributeName(unsigned int size);
  inline void adoptAttributeName(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownAttributeName();

  inline bool hasOrder();
  inline ::capnp::Text::Builder getOrder();
  inline void setOrder(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initOrder(unsigned int size);
  inline void adoptOrder(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownOrder();

  inline bool hasType();
  inline ::capnp::Text::Builder getType();
  inline void setType(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initType(unsigned int size);
  inline void adoptType(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownType();

  inline ::uint32_t getCellValNum();
  inline void setCellValNum(::uint32_t value);

  inline bool getExternal();
  inline void setExternal(bool value);

  inline bool getRelative();
  inline void setRelative(bool value);

  inline bool hasSchema();
  inline ::tiledb::sm::serialization::capnp::ArraySchema::Builder getSchema();
  inline void setSchema(
      ::tiledb::sm::serialization::capnp::ArraySchema::Reader value);
  inline ::tiledb::sm::serialization::capnp::ArraySchema::Builder initSchema();
  inline void adoptSchema(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::ArraySchema>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::ArraySchema>
  disownSchema();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DimensionLabel::Pipeline {
 public:
  typedef DimensionLabel Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::tiledb::sm::serialization::capnp::ArraySchema::Pipeline getSchema();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ArraySchemaEvolution::Reader {
 public:
  typedef ArraySchemaEvolution Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasAttributesToDrop() const;
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader
  getAttributesToDrop() const;

  inline bool hasAttributesToAdd() const;
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::Attribute,
      ::capnp::Kind::STRUCT>::Reader
  getAttributesToAdd() const;

  inline bool hasTimestampRange() const;
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
  getTimestampRange() const;

  inline bool hasEnumerationsToAdd() const;
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::Enumeration,
      ::capnp::Kind::STRUCT>::Reader
  getEnumerationsToAdd() const;

  inline bool hasEnumerationsToDrop() const;
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader
  getEnumerationsToDrop() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ArraySchemaEvolution::Builder {
 public:
  typedef ArraySchemaEvolution Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasAttributesToDrop();
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
  getAttributesToDrop();
  inline void setAttributesToDrop(
      ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value);
  inline void setAttributesToDrop(
      ::kj::ArrayPtr<const ::capnp::Text::Reader> value);
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
  initAttributesToDrop(unsigned int size);
  inline void adoptAttributesToDrop(
      ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
  disownAttributesToDrop();

  inline bool hasAttributesToAdd();
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::Attribute,
      ::capnp::Kind::STRUCT>::Builder
  getAttributesToAdd();
  inline void setAttributesToAdd(::capnp::List<
                                 ::tiledb::sm::serialization::capnp::Attribute,
                                 ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::Attribute,
      ::capnp::Kind::STRUCT>::Builder
  initAttributesToAdd(unsigned int size);
  inline void adoptAttributesToAdd(
      ::capnp::Orphan<::capnp::List<
          ::tiledb::sm::serialization::capnp::Attribute,
          ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::tiledb::sm::serialization::capnp::Attribute,
      ::capnp::Kind::STRUCT>>
  disownAttributesToAdd();

  inline bool hasTimestampRange();
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  getTimestampRange();
  inline void setTimestampRange(
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTimestampRange(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  initTimestampRange(unsigned int size);
  inline void adoptTimestampRange(
      ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
  disownTimestampRange();

  inline bool hasEnumerationsToAdd();
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::Enumeration,
      ::capnp::Kind::STRUCT>::Builder
  getEnumerationsToAdd();
  inline void setEnumerationsToAdd(
      ::capnp::List<
          ::tiledb::sm::serialization::capnp::Enumeration,
          ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::Enumeration,
      ::capnp::Kind::STRUCT>::Builder
  initEnumerationsToAdd(unsigned int size);
  inline void adoptEnumerationsToAdd(
      ::capnp::Orphan<::capnp::List<
          ::tiledb::sm::serialization::capnp::Enumeration,
          ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::tiledb::sm::serialization::capnp::Enumeration,
      ::capnp::Kind::STRUCT>>
  disownEnumerationsToAdd();

  inline bool hasEnumerationsToDrop();
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
  getEnumerationsToDrop();
  inline void setEnumerationsToDrop(
      ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value);
  inline void setEnumerationsToDrop(
      ::kj::ArrayPtr<const ::capnp::Text::Reader> value);
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
  initEnumerationsToDrop(unsigned int size);
  inline void adoptEnumerationsToDrop(
      ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
  disownEnumerationsToDrop();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ArraySchemaEvolution::Pipeline {
 public:
  typedef ArraySchemaEvolution Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Attribute::Reader {
 public:
  typedef Attribute Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline ::uint32_t getCellValNum() const;

  inline bool hasName() const;
  inline ::capnp::Text::Reader getName() const;

  inline bool hasType() const;
  inline ::capnp::Text::Reader getType() const;

  inline bool hasFilterPipeline() const;
  inline ::tiledb::sm::serialization::capnp::FilterPipeline::Reader
  getFilterPipeline() const;

  inline bool hasFillValue() const;
  inline ::capnp::Data::Reader getFillValue() const;

  inline bool getNullable() const;

  inline bool getFillValueValidity() const;

  inline bool hasOrder() const;
  inline ::capnp::Text::Reader getOrder() const;

  inline bool hasEnumerationName() const;
  inline ::capnp::Text::Reader getEnumerationName() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Attribute::Builder {
 public:
  typedef Attribute Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline ::uint32_t getCellValNum();
  inline void setCellValNum(::uint32_t value);

  inline bool hasName();
  inline ::capnp::Text::Builder getName();
  inline void setName(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownName();

  inline bool hasType();
  inline ::capnp::Text::Builder getType();
  inline void setType(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initType(unsigned int size);
  inline void adoptType(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownType();

  inline bool hasFilterPipeline();
  inline ::tiledb::sm::serialization::capnp::FilterPipeline::Builder
  getFilterPipeline();
  inline void setFilterPipeline(
      ::tiledb::sm::serialization::capnp::FilterPipeline::Reader value);
  inline ::tiledb::sm::serialization::capnp::FilterPipeline::Builder
  initFilterPipeline();
  inline void adoptFilterPipeline(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::FilterPipeline>&&
          value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::FilterPipeline>
  disownFilterPipeline();

  inline bool hasFillValue();
  inline ::capnp::Data::Builder getFillValue();
  inline void setFillValue(::capnp::Data::Reader value);
  inline ::capnp::Data::Builder initFillValue(unsigned int size);
  inline void adoptFillValue(::capnp::Orphan<::capnp::Data>&& value);
  inline ::capnp::Orphan<::capnp::Data> disownFillValue();

  inline bool getNullable();
  inline void setNullable(bool value);

  inline bool getFillValueValidity();
  inline void setFillValueValidity(bool value);

  inline bool hasOrder();
  inline ::capnp::Text::Builder getOrder();
  inline void setOrder(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initOrder(unsigned int size);
  inline void adoptOrder(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownOrder();

  inline bool hasEnumerationName();
  inline ::capnp::Text::Builder getEnumerationName();
  inline void setEnumerationName(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initEnumerationName(unsigned int size);
  inline void adoptEnumerationName(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownEnumerationName();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Attribute::Pipeline {
 public:
  typedef Attribute Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::tiledb::sm::serialization::capnp::FilterPipeline::Pipeline
  getFilterPipeline();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Enumeration::Reader {
 public:
  typedef Enumeration Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline ::capnp::Text::Reader getName() const;

  inline bool hasPathName() const;
  inline ::capnp::Text::Reader getPathName() const;

  inline bool hasType() const;
  inline ::capnp::Text::Reader getType() const;

  inline ::uint32_t getCellValNum() const;

  inline bool getOrdered() const;

  inline bool hasData() const;
  inline ::capnp::Data::Reader getData() const;

  inline bool hasOffsets() const;
  inline ::capnp::Data::Reader getOffsets() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Enumeration::Builder {
 public:
  typedef Enumeration Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline ::capnp::Text::Builder getName();
  inline void setName(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownName();

  inline bool hasPathName();
  inline ::capnp::Text::Builder getPathName();
  inline void setPathName(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initPathName(unsigned int size);
  inline void adoptPathName(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownPathName();

  inline bool hasType();
  inline ::capnp::Text::Builder getType();
  inline void setType(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initType(unsigned int size);
  inline void adoptType(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownType();

  inline ::uint32_t getCellValNum();
  inline void setCellValNum(::uint32_t value);

  inline bool getOrdered();
  inline void setOrdered(bool value);

  inline bool hasData();
  inline ::capnp::Data::Builder getData();
  inline void setData(::capnp::Data::Reader value);
  inline ::capnp::Data::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan<::capnp::Data>&& value);
  inline ::capnp::Orphan<::capnp::Data> disownData();

  inline bool hasOffsets();
  inline ::capnp::Data::Builder getOffsets();
  inline void setOffsets(::capnp::Data::Reader value);
  inline ::capnp::Data::Builder initOffsets(unsigned int size);
  inline void adoptOffsets(::capnp::Orphan<::capnp::Data>&& value);
  inline ::capnp::Orphan<::capnp::Data> disownOffsets();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Enumeration::Pipeline {
 public:
  typedef Enumeration Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AttributeBufferHeader::Reader {
 public:
  typedef AttributeBufferHeader Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline ::capnp::Text::Reader getName() const;

  inline ::uint64_t getFixedLenBufferSizeInBytes() const;

  inline ::uint64_t getVarLenBufferSizeInBytes() const;

  inline ::uint64_t getValidityLenBufferSizeInBytes() const;

  inline ::uint64_t getOriginalFixedLenBufferSizeInBytes() const;

  inline ::uint64_t getOriginalVarLenBufferSizeInBytes() const;

  inline ::uint64_t getOriginalValidityLenBufferSizeInBytes() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AttributeBufferHeader::Builder {
 public:
  typedef AttributeBufferHeader Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline ::capnp::Text::Builder getName();
  inline void setName(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownName();

  inline ::uint64_t getFixedLenBufferSizeInBytes();
  inline void setFixedLenBufferSizeInBytes(::uint64_t value);

  inline ::uint64_t getVarLenBufferSizeInBytes();
  inline void setVarLenBufferSizeInBytes(::uint64_t value);

  inline ::uint64_t getValidityLenBufferSizeInBytes();
  inline void setValidityLenBufferSizeInBytes(::uint64_t value);

  inline ::uint64_t getOriginalFixedLenBufferSizeInBytes();
  inline void setOriginalFixedLenBufferSizeInBytes(::uint64_t value);

  inline ::uint64_t getOriginalVarLenBufferSizeInBytes();
  inline void setOriginalVarLenBufferSizeInBytes(::uint64_t value);

  inline ::uint64_t getOriginalValidityLenBufferSizeInBytes();
  inline void setOriginalValidityLenBufferSizeInBytes(::uint64_t value);

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AttributeBufferHeader::Pipeline {
 public:
  typedef AttributeBufferHeader Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Dimension::Reader {
 public:
  typedef Dimension Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline ::capnp::Text::Reader getName() const;

  inline bool getNullTileExtent() const;

  inline bool hasType() const;
  inline ::capnp::Text::Reader getType() const;

  inline typename TileExtent::Reader getTileExtent() const;

  inline bool hasDomain() const;
  inline ::tiledb::sm::serialization::capnp::DomainArray::Reader getDomain()
      const;

  inline bool hasFilterPipeline() const;
  inline ::tiledb::sm::serialization::capnp::FilterPipeline::Reader
  getFilterPipeline() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Dimension::Builder {
 public:
  typedef Dimension Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline ::capnp::Text::Builder getName();
  inline void setName(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownName();

  inline bool getNullTileExtent();
  inline void setNullTileExtent(bool value);

  inline bool hasType();
  inline ::capnp::Text::Builder getType();
  inline void setType(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initType(unsigned int size);
  inline void adoptType(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownType();

  inline typename TileExtent::Builder getTileExtent();
  inline typename TileExtent::Builder initTileExtent();

  inline bool hasDomain();
  inline ::tiledb::sm::serialization::capnp::DomainArray::Builder getDomain();
  inline void setDomain(
      ::tiledb::sm::serialization::capnp::DomainArray::Reader value);
  inline ::tiledb::sm::serialization::capnp::DomainArray::Builder initDomain();
  inline void adoptDomain(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::DomainArray>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::DomainArray>
  disownDomain();

  inline bool hasFilterPipeline();
  inline ::tiledb::sm::serialization::capnp::FilterPipeline::Builder
  getFilterPipeline();
  inline void setFilterPipeline(
      ::tiledb::sm::serialization::capnp::FilterPipeline::Reader value);
  inline ::tiledb::sm::serialization::capnp::FilterPipeline::Builder
  initFilterPipeline();
  inline void adoptFilterPipeline(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::FilterPipeline>&&
          value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::FilterPipeline>
  disownFilterPipeline();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Dimension::Pipeline {
 public:
  typedef Dimension Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline typename TileExtent::Pipeline getTileExtent();
  inline ::tiledb::sm::serialization::capnp::DomainArray::Pipeline getDomain();
  inline ::tiledb::sm::serialization::capnp::FilterPipeline::Pipeline
  getFilterPipeline();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Dimension::TileExtent::Reader {
 public:
  typedef TileExtent Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isInt8() const;
  inline ::int8_t getInt8() const;

  inline bool isUint8() const;
  inline ::uint8_t getUint8() const;

  inline bool isInt16() const;
  inline ::int16_t getInt16() const;

  inline bool isUint16() const;
  inline ::uint16_t getUint16() const;

  inline bool isInt32() const;
  inline ::int32_t getInt32() const;

  inline bool isUint32() const;
  inline ::uint32_t getUint32() const;

  inline bool isInt64() const;
  inline ::int64_t getInt64() const;

  inline bool isUint64() const;
  inline ::uint64_t getUint64() const;

  inline bool isFloat32() const;
  inline float getFloat32() const;

  inline bool isFloat64() const;
  inline double getFloat64() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Dimension::TileExtent::Builder {
 public:
  typedef TileExtent Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isInt8();
  inline ::int8_t getInt8();
  inline void setInt8(::int8_t value);

  inline bool isUint8();
  inline ::uint8_t getUint8();
  inline void setUint8(::uint8_t value);

  inline bool isInt16();
  inline ::int16_t getInt16();
  inline void setInt16(::int16_t value);

  inline bool isUint16();
  inline ::uint16_t getUint16();
  inline void setUint16(::uint16_t value);

  inline bool isInt32();
  inline ::int32_t getInt32();
  inline void setInt32(::int32_t value);

  inline bool isUint32();
  inline ::uint32_t getUint32();
  inline void setUint32(::uint32_t value);

  inline bool isInt64();
  inline ::int64_t getInt64();
  inline void setInt64(::int64_t value);

  inline bool isUint64();
  inline ::uint64_t getUint64();
  inline void setUint64(::uint64_t value);

  inline bool isFloat32();
  inline float getFloat32();
  inline void setFloat32(float value);

  inline bool isFloat64();
  inline double getFloat64();
  inline void setFloat64(double value);

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Dimension::TileExtent::Pipeline {
 public:
  typedef TileExtent Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Domain::Reader {
 public:
  typedef Domain Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasCellOrder() const;
  inline ::capnp::Text::Reader getCellOrder() const;

  inline bool hasDimensions() const;
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::Dimension,
      ::capnp::Kind::STRUCT>::Reader
  getDimensions() const;

  inline bool hasTileOrder() const;
  inline ::capnp::Text::Reader getTileOrder() const;

  inline bool hasType() const;
  inline ::capnp::Text::Reader getType() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Domain::Builder {
 public:
  typedef Domain Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasCellOrder();
  inline ::capnp::Text::Builder getCellOrder();
  inline void setCellOrder(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initCellOrder(unsigned int size);
  inline void adoptCellOrder(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownCellOrder();

  inline bool hasDimensions();
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::Dimension,
      ::capnp::Kind::STRUCT>::Builder
  getDimensions();
  inline void setDimensions(::capnp::List<
                            ::tiledb::sm::serialization::capnp::Dimension,
                            ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::Dimension,
      ::capnp::Kind::STRUCT>::Builder
  initDimensions(unsigned int size);
  inline void adoptDimensions(::capnp::Orphan<::capnp::List<
                                  ::tiledb::sm::serialization::capnp::Dimension,
                                  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::tiledb::sm::serialization::capnp::Dimension,
      ::capnp::Kind::STRUCT>>
  disownDimensions();

  inline bool hasTileOrder();
  inline ::capnp::Text::Builder getTileOrder();
  inline void setTileOrder(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initTileOrder(unsigned int size);
  inline void adoptTileOrder(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownTileOrder();

  inline bool hasType();
  inline ::capnp::Text::Builder getType();
  inline void setType(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initType(unsigned int size);
  inline void adoptType(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownType();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Domain::Pipeline {
 public:
  typedef Domain Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Error::Reader {
 public:
  typedef Error Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline ::int64_t getCode() const;

  inline bool hasMessage() const;
  inline ::capnp::Text::Reader getMessage() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Error::Builder {
 public:
  typedef Error Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline ::int64_t getCode();
  inline void setCode(::int64_t value);

  inline bool hasMessage();
  inline ::capnp::Text::Builder getMessage();
  inline void setMessage(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initMessage(unsigned int size);
  inline void adoptMessage(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownMessage();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Error::Pipeline {
 public:
  typedef Error Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FloatScaleConfig::Reader {
 public:
  typedef FloatScaleConfig Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getScale() const;

  inline double getOffset() const;

  inline ::uint64_t getByteWidth() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FloatScaleConfig::Builder {
 public:
  typedef FloatScaleConfig Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline double getScale();
  inline void setScale(double value);

  inline double getOffset();
  inline void setOffset(double value);

  inline ::uint64_t getByteWidth();
  inline void setByteWidth(::uint64_t value);

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FloatScaleConfig::Pipeline {
 public:
  typedef FloatScaleConfig Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WebpConfig::Reader {
 public:
  typedef WebpConfig Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getQuality() const;

  inline ::uint8_t getFormat() const;

  inline bool getLossless() const;

  inline ::uint16_t getExtentX() const;

  inline ::uint16_t getExtentY() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WebpConfig::Builder {
 public:
  typedef WebpConfig Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline float getQuality();
  inline void setQuality(float value);

  inline ::uint8_t getFormat();
  inline void setFormat(::uint8_t value);

  inline bool getLossless();
  inline void setLossless(bool value);

  inline ::uint16_t getExtentX();
  inline void setExtentX(::uint16_t value);

  inline ::uint16_t getExtentY();
  inline void setExtentY(::uint16_t value);

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WebpConfig::Pipeline {
 public:
  typedef WebpConfig Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Filter::Reader {
 public:
  typedef Filter Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasType() const;
  inline ::capnp::Text::Reader getType() const;

  inline typename Data::Reader getData() const;

  inline bool hasFloatScaleConfig() const;
  inline ::tiledb::sm::serialization::capnp::FloatScaleConfig::Reader
  getFloatScaleConfig() const;

  inline bool hasWebpConfig() const;
  inline ::tiledb::sm::serialization::capnp::WebpConfig::Reader getWebpConfig()
      const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Filter::Builder {
 public:
  typedef Filter Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasType();
  inline ::capnp::Text::Builder getType();
  inline void setType(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initType(unsigned int size);
  inline void adoptType(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownType();

  inline typename Data::Builder getData();
  inline typename Data::Builder initData();

  inline bool hasFloatScaleConfig();
  inline ::tiledb::sm::serialization::capnp::FloatScaleConfig::Builder
  getFloatScaleConfig();
  inline void setFloatScaleConfig(
      ::tiledb::sm::serialization::capnp::FloatScaleConfig::Reader value);
  inline ::tiledb::sm::serialization::capnp::FloatScaleConfig::Builder
  initFloatScaleConfig();
  inline void adoptFloatScaleConfig(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::FloatScaleConfig>&&
          value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::FloatScaleConfig>
  disownFloatScaleConfig();

  inline bool hasWebpConfig();
  inline ::tiledb::sm::serialization::capnp::WebpConfig::Builder
  getWebpConfig();
  inline void setWebpConfig(
      ::tiledb::sm::serialization::capnp::WebpConfig::Reader value);
  inline ::tiledb::sm::serialization::capnp::WebpConfig::Builder
  initWebpConfig();
  inline void adoptWebpConfig(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::WebpConfig>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::WebpConfig>
  disownWebpConfig();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Filter::Pipeline {
 public:
  typedef Filter Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline typename Data::Pipeline getData();
  inline ::tiledb::sm::serialization::capnp::FloatScaleConfig::Pipeline
  getFloatScaleConfig();
  inline ::tiledb::sm::serialization::capnp::WebpConfig::Pipeline
  getWebpConfig();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Filter::Data::Reader {
 public:
  typedef Data Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isText() const;
  inline bool hasText() const;
  inline ::capnp::Text::Reader getText() const;

  inline bool isBytes() const;
  inline bool hasBytes() const;
  inline ::capnp::Data::Reader getBytes() const;

  inline bool isInt8() const;
  inline ::int8_t getInt8() const;

  inline bool isUint8() const;
  inline ::uint8_t getUint8() const;

  inline bool isInt16() const;
  inline ::int16_t getInt16() const;

  inline bool isUint16() const;
  inline ::uint16_t getUint16() const;

  inline bool isInt32() const;
  inline ::int32_t getInt32() const;

  inline bool isUint32() const;
  inline ::uint32_t getUint32() const;

  inline bool isInt64() const;
  inline ::int64_t getInt64() const;

  inline bool isUint64() const;
  inline ::uint64_t getUint64() const;

  inline bool isFloat32() const;
  inline float getFloat32() const;

  inline bool isFloat64() const;
  inline double getFloat64() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Filter::Data::Builder {
 public:
  typedef Data Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isText();
  inline bool hasText();
  inline ::capnp::Text::Builder getText();
  inline void setText(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initText(unsigned int size);
  inline void adoptText(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownText();

  inline bool isBytes();
  inline bool hasBytes();
  inline ::capnp::Data::Builder getBytes();
  inline void setBytes(::capnp::Data::Reader value);
  inline ::capnp::Data::Builder initBytes(unsigned int size);
  inline void adoptBytes(::capnp::Orphan<::capnp::Data>&& value);
  inline ::capnp::Orphan<::capnp::Data> disownBytes();

  inline bool isInt8();
  inline ::int8_t getInt8();
  inline void setInt8(::int8_t value);

  inline bool isUint8();
  inline ::uint8_t getUint8();
  inline void setUint8(::uint8_t value);

  inline bool isInt16();
  inline ::int16_t getInt16();
  inline void setInt16(::int16_t value);

  inline bool isUint16();
  inline ::uint16_t getUint16();
  inline void setUint16(::uint16_t value);

  inline bool isInt32();
  inline ::int32_t getInt32();
  inline void setInt32(::int32_t value);

  inline bool isUint32();
  inline ::uint32_t getUint32();
  inline void setUint32(::uint32_t value);

  inline bool isInt64();
  inline ::int64_t getInt64();
  inline void setInt64(::int64_t value);

  inline bool isUint64();
  inline ::uint64_t getUint64();
  inline void setUint64(::uint64_t value);

  inline bool isFloat32();
  inline float getFloat32();
  inline void setFloat32(float value);

  inline bool isFloat64();
  inline double getFloat64();
  inline void setFloat64(double value);

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Filter::Data::Pipeline {
 public:
  typedef Data Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FilterPipeline::Reader {
 public:
  typedef FilterPipeline Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasFilters() const;
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::Filter,
      ::capnp::Kind::STRUCT>::Reader
  getFilters() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FilterPipeline::Builder {
 public:
  typedef FilterPipeline Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasFilters();
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::Filter,
      ::capnp::Kind::STRUCT>::Builder
  getFilters();
  inline void setFilters(::capnp::List<
                         ::tiledb::sm::serialization::capnp::Filter,
                         ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::Filter,
      ::capnp::Kind::STRUCT>::Builder
  initFilters(unsigned int size);
  inline void adoptFilters(::capnp::Orphan<::capnp::List<
                               ::tiledb::sm::serialization::capnp::Filter,
                               ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::tiledb::sm::serialization::capnp::Filter,
      ::capnp::Kind::STRUCT>>
  disownFilters();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FilterPipeline::Pipeline {
 public:
  typedef FilterPipeline Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename Key, typename Value>
class Map<Key, Value>::Reader {
 public:
  typedef Map Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  template <
      typename Key2 = ::capnp::AnyPointer,
      typename Value2 = ::capnp::AnyPointer>
  typename Map<Key2, Value2>::Reader asGeneric() {
    return typename Map<Key2, Value2>::Reader(_reader);
  }

  inline bool hasEntries() const;
  inline typename ::capnp::List<
      typename ::tiledb::sm::serialization::capnp::Map<Key, Value>::Entry,
      ::capnp::Kind::STRUCT>::Reader
  getEntries() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename Key, typename Value>
class Map<Key, Value>::Builder {
 public:
  typedef Map Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  template <
      typename Key2 = ::capnp::AnyPointer,
      typename Value2 = ::capnp::AnyPointer>
  typename Map<Key2, Value2>::Builder asGeneric() {
    return typename Map<Key2, Value2>::Builder(_builder);
  }

  inline bool hasEntries();
  inline typename ::capnp::List<
      typename ::tiledb::sm::serialization::capnp::Map<Key, Value>::Entry,
      ::capnp::Kind::STRUCT>::Builder
  getEntries();
  inline void setEntries(
      typename ::capnp::List<
          typename ::tiledb::sm::serialization::capnp::Map<Key, Value>::Entry,
          ::capnp::Kind::STRUCT>::Reader value);
  inline typename ::capnp::List<
      typename ::tiledb::sm::serialization::capnp::Map<Key, Value>::Entry,
      ::capnp::Kind::STRUCT>::Builder
  initEntries(unsigned int size);
  inline void adoptEntries(
      ::capnp::Orphan<::capnp::List<
          typename ::tiledb::sm::serialization::capnp::Map<Key, Value>::Entry,
          ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      typename ::tiledb::sm::serialization::capnp::Map<Key, Value>::Entry,
      ::capnp::Kind::STRUCT>>
  disownEntries();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename Key, typename Value>
class Map<Key, Value>::Pipeline {
 public:
  typedef Map Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename Key, typename Value>
class Map<Key, Value>::Entry::Reader {
 public:
  typedef Entry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  template <
      typename Key2 = ::capnp::AnyPointer,
      typename Value2 = ::capnp::AnyPointer>
  typename Map<Key2, Value2>::Entry::Reader asMapGeneric() {
    return typename Map<Key2, Value2>::Entry::Reader(_reader);
  }

  inline bool hasKey() const;
  inline ::capnp::ReaderFor<Key> getKey() const;

  inline bool hasValue() const;
  inline ::capnp::ReaderFor<Value> getValue() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename Key, typename Value>
class Map<Key, Value>::Entry::Builder {
 public:
  typedef Entry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  template <
      typename Key2 = ::capnp::AnyPointer,
      typename Value2 = ::capnp::AnyPointer>
  typename Map<Key2, Value2>::Entry::Builder asMapGeneric() {
    return typename Map<Key2, Value2>::Entry::Builder(_builder);
  }

  inline bool hasKey();
  inline ::capnp::BuilderFor<Key> getKey();
  inline void setKey(::capnp::ReaderFor<Key> value);
  inline ::capnp::BuilderFor<Key> initKey();
  inline ::capnp::BuilderFor<Key> initKey(unsigned int size);
  inline void adoptKey(::capnp::Orphan<Key>&& value);
  inline ::capnp::Orphan<Key> disownKey();

  inline bool hasValue();
  inline ::capnp::BuilderFor<Value> getValue();
  inline void setValue(::capnp::ReaderFor<Value> value);
  inline ::capnp::BuilderFor<Value> initValue();
  inline ::capnp::BuilderFor<Value> initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan<Value>&& value);
  inline ::capnp::Orphan<Value> disownValue();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename Key, typename Value>
class Map<Key, Value>::Entry::Pipeline {
 public:
  typedef Entry Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::capnp::PipelineFor<Key> getKey();
  inline ::capnp::PipelineFor<Value> getValue();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MapUInt32::Reader {
 public:
  typedef MapUInt32 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasEntries() const;
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::MapUInt32::Entry,
      ::capnp::Kind::STRUCT>::Reader
  getEntries() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MapUInt32::Builder {
 public:
  typedef MapUInt32 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasEntries();
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::MapUInt32::Entry,
      ::capnp::Kind::STRUCT>::Builder
  getEntries();
  inline void setEntries(::capnp::List<
                         ::tiledb::sm::serialization::capnp::MapUInt32::Entry,
                         ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::MapUInt32::Entry,
      ::capnp::Kind::STRUCT>::Builder
  initEntries(unsigned int size);
  inline void adoptEntries(
      ::capnp::Orphan<::capnp::List<
          ::tiledb::sm::serialization::capnp::MapUInt32::Entry,
          ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::tiledb::sm::serialization::capnp::MapUInt32::Entry,
      ::capnp::Kind::STRUCT>>
  disownEntries();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MapUInt32::Pipeline {
 public:
  typedef MapUInt32 Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MapUInt32::Entry::Reader {
 public:
  typedef Entry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasKey() const;
  inline ::capnp::Text::Reader getKey() const;

  inline ::uint32_t getValue() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MapUInt32::Entry::Builder {
 public:
  typedef Entry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasKey();
  inline ::capnp::Text::Builder getKey();
  inline void setKey(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initKey(unsigned int size);
  inline void adoptKey(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownKey();

  inline ::uint32_t getValue();
  inline void setValue(::uint32_t value);

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MapUInt32::Entry::Pipeline {
 public:
  typedef Entry Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MapInt64::Reader {
 public:
  typedef MapInt64 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasEntries() const;
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::MapInt64::Entry,
      ::capnp::Kind::STRUCT>::Reader
  getEntries() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MapInt64::Builder {
 public:
  typedef MapInt64 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasEntries();
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::MapInt64::Entry,
      ::capnp::Kind::STRUCT>::Builder
  getEntries();
  inline void setEntries(::capnp::List<
                         ::tiledb::sm::serialization::capnp::MapInt64::Entry,
                         ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::MapInt64::Entry,
      ::capnp::Kind::STRUCT>::Builder
  initEntries(unsigned int size);
  inline void adoptEntries(
      ::capnp::Orphan<::capnp::List<
          ::tiledb::sm::serialization::capnp::MapInt64::Entry,
          ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::tiledb::sm::serialization::capnp::MapInt64::Entry,
      ::capnp::Kind::STRUCT>>
  disownEntries();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MapInt64::Pipeline {
 public:
  typedef MapInt64 Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MapInt64::Entry::Reader {
 public:
  typedef Entry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasKey() const;
  inline ::capnp::Text::Reader getKey() const;

  inline ::int64_t getValue() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MapInt64::Entry::Builder {
 public:
  typedef Entry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasKey();
  inline ::capnp::Text::Builder getKey();
  inline void setKey(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initKey(unsigned int size);
  inline void adoptKey(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownKey();

  inline ::int64_t getValue();
  inline void setValue(::int64_t value);

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MapInt64::Entry::Pipeline {
 public:
  typedef Entry Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MapUInt64::Reader {
 public:
  typedef MapUInt64 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasEntries() const;
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::MapUInt64::Entry,
      ::capnp::Kind::STRUCT>::Reader
  getEntries() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MapUInt64::Builder {
 public:
  typedef MapUInt64 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasEntries();
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::MapUInt64::Entry,
      ::capnp::Kind::STRUCT>::Builder
  getEntries();
  inline void setEntries(::capnp::List<
                         ::tiledb::sm::serialization::capnp::MapUInt64::Entry,
                         ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::MapUInt64::Entry,
      ::capnp::Kind::STRUCT>::Builder
  initEntries(unsigned int size);
  inline void adoptEntries(
      ::capnp::Orphan<::capnp::List<
          ::tiledb::sm::serialization::capnp::MapUInt64::Entry,
          ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::tiledb::sm::serialization::capnp::MapUInt64::Entry,
      ::capnp::Kind::STRUCT>>
  disownEntries();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MapUInt64::Pipeline {
 public:
  typedef MapUInt64 Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MapUInt64::Entry::Reader {
 public:
  typedef Entry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasKey() const;
  inline ::capnp::Text::Reader getKey() const;

  inline ::uint64_t getValue() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MapUInt64::Entry::Builder {
 public:
  typedef Entry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasKey();
  inline ::capnp::Text::Builder getKey();
  inline void setKey(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initKey(unsigned int size);
  inline void adoptKey(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownKey();

  inline ::uint64_t getValue();
  inline void setValue(::uint64_t value);

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MapUInt64::Entry::Pipeline {
 public:
  typedef Entry Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MapFloat64::Reader {
 public:
  typedef MapFloat64 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasEntries() const;
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::MapFloat64::Entry,
      ::capnp::Kind::STRUCT>::Reader
  getEntries() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MapFloat64::Builder {
 public:
  typedef MapFloat64 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasEntries();
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::MapFloat64::Entry,
      ::capnp::Kind::STRUCT>::Builder
  getEntries();
  inline void setEntries(::capnp::List<
                         ::tiledb::sm::serialization::capnp::MapFloat64::Entry,
                         ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::MapFloat64::Entry,
      ::capnp::Kind::STRUCT>::Builder
  initEntries(unsigned int size);
  inline void adoptEntries(
      ::capnp::Orphan<::capnp::List<
          ::tiledb::sm::serialization::capnp::MapFloat64::Entry,
          ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::tiledb::sm::serialization::capnp::MapFloat64::Entry,
      ::capnp::Kind::STRUCT>>
  disownEntries();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MapFloat64::Pipeline {
 public:
  typedef MapFloat64 Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MapFloat64::Entry::Reader {
 public:
  typedef Entry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasKey() const;
  inline ::capnp::Text::Reader getKey() const;

  inline double getValue() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MapFloat64::Entry::Builder {
 public:
  typedef Entry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasKey();
  inline ::capnp::Text::Builder getKey();
  inline void setKey(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initKey(unsigned int size);
  inline void adoptKey(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownKey();

  inline double getValue();
  inline void setValue(double value);

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MapFloat64::Entry::Pipeline {
 public:
  typedef Entry Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Stats::Reader {
 public:
  typedef Stats Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTimers() const;
  inline ::tiledb::sm::serialization::capnp::MapFloat64::Reader getTimers()
      const;

  inline bool hasCounters() const;
  inline ::tiledb::sm::serialization::capnp::MapUInt64::Reader getCounters()
      const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Stats::Builder {
 public:
  typedef Stats Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasTimers();
  inline ::tiledb::sm::serialization::capnp::MapFloat64::Builder getTimers();
  inline void setTimers(
      ::tiledb::sm::serialization::capnp::MapFloat64::Reader value);
  inline ::tiledb::sm::serialization::capnp::MapFloat64::Builder initTimers();
  inline void adoptTimers(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::MapFloat64>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::MapFloat64>
  disownTimers();

  inline bool hasCounters();
  inline ::tiledb::sm::serialization::capnp::MapUInt64::Builder getCounters();
  inline void setCounters(
      ::tiledb::sm::serialization::capnp::MapUInt64::Reader value);
  inline ::tiledb::sm::serialization::capnp::MapUInt64::Builder initCounters();
  inline void adoptCounters(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::MapUInt64>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::MapUInt64>
  disownCounters();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Stats::Pipeline {
 public:
  typedef Stats Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::tiledb::sm::serialization::capnp::MapFloat64::Pipeline getTimers();
  inline ::tiledb::sm::serialization::capnp::MapUInt64::Pipeline getCounters();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UnorderedWriterState::Reader {
 public:
  typedef UnorderedWriterState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getIsCoordsPass() const;

  inline bool hasCellPos() const;
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
  getCellPos() const;

  inline bool hasCoordDups() const;
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
  getCoordDups() const;

  inline bool hasFragMeta() const;
  inline ::tiledb::sm::serialization::capnp::FragmentMetadata::Reader
  getFragMeta() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UnorderedWriterState::Builder {
 public:
  typedef UnorderedWriterState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool getIsCoordsPass();
  inline void setIsCoordsPass(bool value);

  inline bool hasCellPos();
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  getCellPos();
  inline void setCellPos(
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setCellPos(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  initCellPos(unsigned int size);
  inline void adoptCellPos(
      ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
  disownCellPos();

  inline bool hasCoordDups();
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  getCoordDups();
  inline void setCoordDups(
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setCoordDups(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  initCoordDups(unsigned int size);
  inline void adoptCoordDups(
      ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
  disownCoordDups();

  inline bool hasFragMeta();
  inline ::tiledb::sm::serialization::capnp::FragmentMetadata::Builder
  getFragMeta();
  inline void setFragMeta(
      ::tiledb::sm::serialization::capnp::FragmentMetadata::Reader value);
  inline ::tiledb::sm::serialization::capnp::FragmentMetadata::Builder
  initFragMeta();
  inline void adoptFragMeta(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::FragmentMetadata>&&
          value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::FragmentMetadata>
  disownFragMeta();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UnorderedWriterState::Pipeline {
 public:
  typedef UnorderedWriterState Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::tiledb::sm::serialization::capnp::FragmentMetadata::Pipeline
  getFragMeta();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Writer::Reader {
 public:
  typedef Writer Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getCheckCoordDups() const;

  inline bool getCheckCoordOOB() const;

  inline bool getDedupCoords() const;

  inline bool hasSubarray() const;
  inline ::tiledb::sm::serialization::capnp::DomainArray::Reader getSubarray()
      const;

  inline bool hasSubarrayRanges() const;
  inline ::tiledb::sm::serialization::capnp::Subarray::Reader
  getSubarrayRanges() const;

  inline bool hasStats() const;
  inline ::tiledb::sm::serialization::capnp::Stats::Reader getStats() const;

  inline bool hasGlobalWriteStateV1() const;
  inline ::tiledb::sm::serialization::capnp::GlobalWriteState::Reader
  getGlobalWriteStateV1() const;

  inline bool hasUnorderedWriterState() const;
  inline ::tiledb::sm::serialization::capnp::UnorderedWriterState::Reader
  getUnorderedWriterState() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Writer::Builder {
 public:
  typedef Writer Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool getCheckCoordDups();
  inline void setCheckCoordDups(bool value);

  inline bool getCheckCoordOOB();
  inline void setCheckCoordOOB(bool value);

  inline bool getDedupCoords();
  inline void setDedupCoords(bool value);

  inline bool hasSubarray();
  inline ::tiledb::sm::serialization::capnp::DomainArray::Builder getSubarray();
  inline void setSubarray(
      ::tiledb::sm::serialization::capnp::DomainArray::Reader value);
  inline ::tiledb::sm::serialization::capnp::DomainArray::Builder
  initSubarray();
  inline void adoptSubarray(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::DomainArray>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::DomainArray>
  disownSubarray();

  inline bool hasSubarrayRanges();
  inline ::tiledb::sm::serialization::capnp::Subarray::Builder
  getSubarrayRanges();
  inline void setSubarrayRanges(
      ::tiledb::sm::serialization::capnp::Subarray::Reader value);
  inline ::tiledb::sm::serialization::capnp::Subarray::Builder
  initSubarrayRanges();
  inline void adoptSubarrayRanges(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::Subarray>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Subarray>
  disownSubarrayRanges();

  inline bool hasStats();
  inline ::tiledb::sm::serialization::capnp::Stats::Builder getStats();
  inline void setStats(::tiledb::sm::serialization::capnp::Stats::Reader value);
  inline ::tiledb::sm::serialization::capnp::Stats::Builder initStats();
  inline void adoptStats(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::Stats>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Stats>
  disownStats();

  inline bool hasGlobalWriteStateV1();
  inline ::tiledb::sm::serialization::capnp::GlobalWriteState::Builder
  getGlobalWriteStateV1();
  inline void setGlobalWriteStateV1(
      ::tiledb::sm::serialization::capnp::GlobalWriteState::Reader value);
  inline ::tiledb::sm::serialization::capnp::GlobalWriteState::Builder
  initGlobalWriteStateV1();
  inline void adoptGlobalWriteStateV1(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::GlobalWriteState>&&
          value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::GlobalWriteState>
  disownGlobalWriteStateV1();

  inline bool hasUnorderedWriterState();
  inline ::tiledb::sm::serialization::capnp::UnorderedWriterState::Builder
  getUnorderedWriterState();
  inline void setUnorderedWriterState(
      ::tiledb::sm::serialization::capnp::UnorderedWriterState::Reader value);
  inline ::tiledb::sm::serialization::capnp::UnorderedWriterState::Builder
  initUnorderedWriterState();
  inline void adoptUnorderedWriterState(
      ::capnp::Orphan<
          ::tiledb::sm::serialization::capnp::UnorderedWriterState>&& value);
  inline ::capnp::Orphan<
      ::tiledb::sm::serialization::capnp::UnorderedWriterState>
  disownUnorderedWriterState();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Writer::Pipeline {
 public:
  typedef Writer Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::tiledb::sm::serialization::capnp::DomainArray::Pipeline
  getSubarray();
  inline ::tiledb::sm::serialization::capnp::Subarray::Pipeline
  getSubarrayRanges();
  inline ::tiledb::sm::serialization::capnp::Stats::Pipeline getStats();
  inline ::tiledb::sm::serialization::capnp::GlobalWriteState::Pipeline
  getGlobalWriteStateV1();
  inline ::tiledb::sm::serialization::capnp::UnorderedWriterState::Pipeline
  getUnorderedWriterState();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SubarrayRanges::Reader {
 public:
  typedef SubarrayRanges Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasType() const;
  inline ::capnp::Text::Reader getType() const;

  inline bool getHasDefaultRange() const;

  inline bool hasBuffer() const;
  inline ::capnp::Data::Reader getBuffer() const;

  inline bool hasBufferSizes() const;
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
  getBufferSizes() const;

  inline bool hasBufferStartSizes() const;
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
  getBufferStartSizes() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SubarrayRanges::Builder {
 public:
  typedef SubarrayRanges Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasType();
  inline ::capnp::Text::Builder getType();
  inline void setType(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initType(unsigned int size);
  inline void adoptType(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownType();

  inline bool getHasDefaultRange();
  inline void setHasDefaultRange(bool value);

  inline bool hasBuffer();
  inline ::capnp::Data::Builder getBuffer();
  inline void setBuffer(::capnp::Data::Reader value);
  inline ::capnp::Data::Builder initBuffer(unsigned int size);
  inline void adoptBuffer(::capnp::Orphan<::capnp::Data>&& value);
  inline ::capnp::Orphan<::capnp::Data> disownBuffer();

  inline bool hasBufferSizes();
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  getBufferSizes();
  inline void setBufferSizes(
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setBufferSizes(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  initBufferSizes(unsigned int size);
  inline void adoptBufferSizes(
      ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
  disownBufferSizes();

  inline bool hasBufferStartSizes();
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  getBufferStartSizes();
  inline void setBufferStartSizes(
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setBufferStartSizes(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  initBufferStartSizes(unsigned int size);
  inline void adoptBufferStartSizes(
      ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
  disownBufferStartSizes();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SubarrayRanges::Pipeline {
 public:
  typedef SubarrayRanges Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LabelSubarrayRanges::Reader {
 public:
  typedef LabelSubarrayRanges Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline ::uint32_t getDimensionId() const;

  inline bool hasName() const;
  inline ::capnp::Text::Reader getName() const;

  inline bool hasRanges() const;
  inline ::tiledb::sm::serialization::capnp::SubarrayRanges::Reader getRanges()
      const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LabelSubarrayRanges::Builder {
 public:
  typedef LabelSubarrayRanges Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline ::uint32_t getDimensionId();
  inline void setDimensionId(::uint32_t value);

  inline bool hasName();
  inline ::capnp::Text::Builder getName();
  inline void setName(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownName();

  inline bool hasRanges();
  inline ::tiledb::sm::serialization::capnp::SubarrayRanges::Builder
  getRanges();
  inline void setRanges(
      ::tiledb::sm::serialization::capnp::SubarrayRanges::Reader value);
  inline ::tiledb::sm::serialization::capnp::SubarrayRanges::Builder
  initRanges();
  inline void adoptRanges(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::SubarrayRanges>&&
          value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::SubarrayRanges>
  disownRanges();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LabelSubarrayRanges::Pipeline {
 public:
  typedef LabelSubarrayRanges Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::tiledb::sm::serialization::capnp::SubarrayRanges::Pipeline
  getRanges();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Subarray::Reader {
 public:
  typedef Subarray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasLayout() const;
  inline ::capnp::Text::Reader getLayout() const;

  inline bool hasRanges() const;
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::SubarrayRanges,
      ::capnp::Kind::STRUCT>::Reader
  getRanges() const;

  inline bool hasStats() const;
  inline ::tiledb::sm::serialization::capnp::Stats::Reader getStats() const;

  inline bool hasRelevantFragments() const;
  inline ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>::Reader
  getRelevantFragments() const;

  inline bool hasLabelRanges() const;
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::LabelSubarrayRanges,
      ::capnp::Kind::STRUCT>::Reader
  getLabelRanges() const;

  inline bool hasAttributeRanges() const;
  inline ::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::SubarrayRanges>::Reader
  getAttributeRanges() const;

  inline bool getCoalesceRanges() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Subarray::Builder {
 public:
  typedef Subarray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasLayout();
  inline ::capnp::Text::Builder getLayout();
  inline void setLayout(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initLayout(unsigned int size);
  inline void adoptLayout(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownLayout();

  inline bool hasRanges();
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::SubarrayRanges,
      ::capnp::Kind::STRUCT>::Builder
  getRanges();
  inline void setRanges(::capnp::List<
                        ::tiledb::sm::serialization::capnp::SubarrayRanges,
                        ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::SubarrayRanges,
      ::capnp::Kind::STRUCT>::Builder
  initRanges(unsigned int size);
  inline void adoptRanges(
      ::capnp::Orphan<::capnp::List<
          ::tiledb::sm::serialization::capnp::SubarrayRanges,
          ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::tiledb::sm::serialization::capnp::SubarrayRanges,
      ::capnp::Kind::STRUCT>>
  disownRanges();

  inline bool hasStats();
  inline ::tiledb::sm::serialization::capnp::Stats::Builder getStats();
  inline void setStats(::tiledb::sm::serialization::capnp::Stats::Reader value);
  inline ::tiledb::sm::serialization::capnp::Stats::Builder initStats();
  inline void adoptStats(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::Stats>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Stats>
  disownStats();

  inline bool hasRelevantFragments();
  inline ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>::Builder
  getRelevantFragments();
  inline void setRelevantFragments(
      ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRelevantFragments(::kj::ArrayPtr<const ::uint32_t> value);
  inline ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>::Builder
  initRelevantFragments(unsigned int size);
  inline void adoptRelevantFragments(
      ::capnp::Orphan<::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>
  disownRelevantFragments();

  inline bool hasLabelRanges();
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::LabelSubarrayRanges,
      ::capnp::Kind::STRUCT>::Builder
  getLabelRanges();
  inline void setLabelRanges(
      ::capnp::List<
          ::tiledb::sm::serialization::capnp::LabelSubarrayRanges,
          ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::LabelSubarrayRanges,
      ::capnp::Kind::STRUCT>::Builder
  initLabelRanges(unsigned int size);
  inline void adoptLabelRanges(
      ::capnp::Orphan<::capnp::List<
          ::tiledb::sm::serialization::capnp::LabelSubarrayRanges,
          ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::tiledb::sm::serialization::capnp::LabelSubarrayRanges,
      ::capnp::Kind::STRUCT>>
  disownLabelRanges();

  inline bool hasAttributeRanges();
  inline ::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::SubarrayRanges>::Builder
  getAttributeRanges();
  inline void setAttributeRanges(
      ::tiledb::sm::serialization::capnp::Map<
          ::capnp::Text,
          ::tiledb::sm::serialization::capnp::SubarrayRanges>::Reader value);
  inline ::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::SubarrayRanges>::Builder
  initAttributeRanges();
  inline void adoptAttributeRanges(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::Map<
          ::capnp::Text,
          ::tiledb::sm::serialization::capnp::SubarrayRanges>>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::SubarrayRanges>>
  disownAttributeRanges();

  inline bool getCoalesceRanges();
  inline void setCoalesceRanges(bool value);

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Subarray::Pipeline {
 public:
  typedef Subarray Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::tiledb::sm::serialization::capnp::Stats::Pipeline getStats();
  inline ::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::SubarrayRanges>::Pipeline
  getAttributeRanges();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SubarrayPartitioner::Reader {
 public:
  typedef SubarrayPartitioner Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasSubarray() const;
  inline ::tiledb::sm::serialization::capnp::Subarray::Reader getSubarray()
      const;

  inline bool hasBudget() const;
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::AttributeBufferSize,
      ::capnp::Kind::STRUCT>::Reader
  getBudget() const;

  inline bool hasCurrent() const;
  inline ::tiledb::sm::serialization::capnp::SubarrayPartitioner::
      PartitionInfo::Reader
      getCurrent() const;

  inline bool hasState() const;
  inline ::tiledb::sm::serialization::capnp::SubarrayPartitioner::State::Reader
  getState() const;

  inline ::uint64_t getMemoryBudget() const;

  inline ::uint64_t getMemoryBudgetVar() const;

  inline ::uint64_t getMemoryBudgetValidity() const;

  inline bool hasStats() const;
  inline ::tiledb::sm::serialization::capnp::Stats::Reader getStats() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SubarrayPartitioner::Builder {
 public:
  typedef SubarrayPartitioner Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasSubarray();
  inline ::tiledb::sm::serialization::capnp::Subarray::Builder getSubarray();
  inline void setSubarray(
      ::tiledb::sm::serialization::capnp::Subarray::Reader value);
  inline ::tiledb::sm::serialization::capnp::Subarray::Builder initSubarray();
  inline void adoptSubarray(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::Subarray>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Subarray>
  disownSubarray();

  inline bool hasBudget();
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::AttributeBufferSize,
      ::capnp::Kind::STRUCT>::Builder
  getBudget();
  inline void setBudget(::capnp::List<
                        ::tiledb::sm::serialization::capnp::AttributeBufferSize,
                        ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::AttributeBufferSize,
      ::capnp::Kind::STRUCT>::Builder
  initBudget(unsigned int size);
  inline void adoptBudget(
      ::capnp::Orphan<::capnp::List<
          ::tiledb::sm::serialization::capnp::AttributeBufferSize,
          ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::tiledb::sm::serialization::capnp::AttributeBufferSize,
      ::capnp::Kind::STRUCT>>
  disownBudget();

  inline bool hasCurrent();
  inline ::tiledb::sm::serialization::capnp::SubarrayPartitioner::
      PartitionInfo::Builder
      getCurrent();
  inline void setCurrent(::tiledb::sm::serialization::capnp::
                             SubarrayPartitioner::PartitionInfo::Reader value);
  inline ::tiledb::sm::serialization::capnp::SubarrayPartitioner::
      PartitionInfo::Builder
      initCurrent();
  inline void adoptCurrent(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::SubarrayPartitioner::
                          PartitionInfo>&& value);
  inline ::capnp::Orphan<
      ::tiledb::sm::serialization::capnp::SubarrayPartitioner::PartitionInfo>
  disownCurrent();

  inline bool hasState();
  inline ::tiledb::sm::serialization::capnp::SubarrayPartitioner::State::Builder
  getState();
  inline void setState(
      ::tiledb::sm::serialization::capnp::SubarrayPartitioner::State::Reader
          value);
  inline ::tiledb::sm::serialization::capnp::SubarrayPartitioner::State::Builder
  initState();
  inline void adoptState(
      ::capnp::Orphan<
          ::tiledb::sm::serialization::capnp::SubarrayPartitioner::State>&&
          value);
  inline ::capnp::Orphan<
      ::tiledb::sm::serialization::capnp::SubarrayPartitioner::State>
  disownState();

  inline ::uint64_t getMemoryBudget();
  inline void setMemoryBudget(::uint64_t value);

  inline ::uint64_t getMemoryBudgetVar();
  inline void setMemoryBudgetVar(::uint64_t value);

  inline ::uint64_t getMemoryBudgetValidity();
  inline void setMemoryBudgetValidity(::uint64_t value);

  inline bool hasStats();
  inline ::tiledb::sm::serialization::capnp::Stats::Builder getStats();
  inline void setStats(::tiledb::sm::serialization::capnp::Stats::Reader value);
  inline ::tiledb::sm::serialization::capnp::Stats::Builder initStats();
  inline void adoptStats(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::Stats>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Stats>
  disownStats();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SubarrayPartitioner::Pipeline {
 public:
  typedef SubarrayPartitioner Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::tiledb::sm::serialization::capnp::Subarray::Pipeline getSubarray();
  inline ::tiledb::sm::serialization::capnp::SubarrayPartitioner::
      PartitionInfo::Pipeline
      getCurrent();
  inline ::tiledb::sm::serialization::capnp::SubarrayPartitioner::State::
      Pipeline
      getState();
  inline ::tiledb::sm::serialization::capnp::Stats::Pipeline getStats();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SubarrayPartitioner::PartitionInfo::Reader {
 public:
  typedef PartitionInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasSubarray() const;
  inline ::tiledb::sm::serialization::capnp::Subarray::Reader getSubarray()
      const;

  inline ::uint64_t getStart() const;

  inline ::uint64_t getEnd() const;

  inline bool getSplitMultiRange() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SubarrayPartitioner::PartitionInfo::Builder {
 public:
  typedef PartitionInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasSubarray();
  inline ::tiledb::sm::serialization::capnp::Subarray::Builder getSubarray();
  inline void setSubarray(
      ::tiledb::sm::serialization::capnp::Subarray::Reader value);
  inline ::tiledb::sm::serialization::capnp::Subarray::Builder initSubarray();
  inline void adoptSubarray(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::Subarray>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Subarray>
  disownSubarray();

  inline ::uint64_t getStart();
  inline void setStart(::uint64_t value);

  inline ::uint64_t getEnd();
  inline void setEnd(::uint64_t value);

  inline bool getSplitMultiRange();
  inline void setSplitMultiRange(bool value);

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SubarrayPartitioner::PartitionInfo::Pipeline {
 public:
  typedef PartitionInfo Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::tiledb::sm::serialization::capnp::Subarray::Pipeline getSubarray();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SubarrayPartitioner::State::Reader {
 public:
  typedef State Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline ::uint64_t getStart() const;

  inline ::uint64_t getEnd() const;

  inline bool hasSingleRange() const;
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::Subarray,
      ::capnp::Kind::STRUCT>::Reader
  getSingleRange() const;

  inline bool hasMultiRange() const;
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::Subarray,
      ::capnp::Kind::STRUCT>::Reader
  getMultiRange() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SubarrayPartitioner::State::Builder {
 public:
  typedef State Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline ::uint64_t getStart();
  inline void setStart(::uint64_t value);

  inline ::uint64_t getEnd();
  inline void setEnd(::uint64_t value);

  inline bool hasSingleRange();
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::Subarray,
      ::capnp::Kind::STRUCT>::Builder
  getSingleRange();
  inline void setSingleRange(::capnp::List<
                             ::tiledb::sm::serialization::capnp::Subarray,
                             ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::Subarray,
      ::capnp::Kind::STRUCT>::Builder
  initSingleRange(unsigned int size);
  inline void adoptSingleRange(::capnp::Orphan<::capnp::List<
                                   ::tiledb::sm::serialization::capnp::Subarray,
                                   ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::tiledb::sm::serialization::capnp::Subarray,
      ::capnp::Kind::STRUCT>>
  disownSingleRange();

  inline bool hasMultiRange();
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::Subarray,
      ::capnp::Kind::STRUCT>::Builder
  getMultiRange();
  inline void setMultiRange(::capnp::List<
                            ::tiledb::sm::serialization::capnp::Subarray,
                            ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::Subarray,
      ::capnp::Kind::STRUCT>::Builder
  initMultiRange(unsigned int size);
  inline void adoptMultiRange(::capnp::Orphan<::capnp::List<
                                  ::tiledb::sm::serialization::capnp::Subarray,
                                  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::tiledb::sm::serialization::capnp::Subarray,
      ::capnp::Kind::STRUCT>>
  disownMultiRange();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SubarrayPartitioner::State::Pipeline {
 public:
  typedef State Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ReadState::Reader {
 public:
  typedef ReadState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getOverflowed() const;

  inline bool getUnsplittable() const;

  inline bool getInitialized() const;

  inline bool hasSubarrayPartitioner() const;
  inline ::tiledb::sm::serialization::capnp::SubarrayPartitioner::Reader
  getSubarrayPartitioner() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ReadState::Builder {
 public:
  typedef ReadState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool getOverflowed();
  inline void setOverflowed(bool value);

  inline bool getUnsplittable();
  inline void setUnsplittable(bool value);

  inline bool getInitialized();
  inline void setInitialized(bool value);

  inline bool hasSubarrayPartitioner();
  inline ::tiledb::sm::serialization::capnp::SubarrayPartitioner::Builder
  getSubarrayPartitioner();
  inline void setSubarrayPartitioner(
      ::tiledb::sm::serialization::capnp::SubarrayPartitioner::Reader value);
  inline ::tiledb::sm::serialization::capnp::SubarrayPartitioner::Builder
  initSubarrayPartitioner();
  inline void adoptSubarrayPartitioner(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::SubarrayPartitioner>&&
          value);
  inline ::capnp::Orphan<
      ::tiledb::sm::serialization::capnp::SubarrayPartitioner>
  disownSubarrayPartitioner();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ReadState::Pipeline {
 public:
  typedef ReadState Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::tiledb::sm::serialization::capnp::SubarrayPartitioner::Pipeline
  getSubarrayPartitioner();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ConditionClause::Reader {
 public:
  typedef ConditionClause Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasFieldName() const;
  inline ::capnp::Text::Reader getFieldName() const;

  inline bool hasValue() const;
  inline ::capnp::Data::Reader getValue() const;

  inline bool hasOp() const;
  inline ::capnp::Text::Reader getOp() const;

  inline bool getUseEnumeration() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ConditionClause::Builder {
 public:
  typedef ConditionClause Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasFieldName();
  inline ::capnp::Text::Builder getFieldName();
  inline void setFieldName(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initFieldName(unsigned int size);
  inline void adoptFieldName(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownFieldName();

  inline bool hasValue();
  inline ::capnp::Data::Builder getValue();
  inline void setValue(::capnp::Data::Reader value);
  inline ::capnp::Data::Builder initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan<::capnp::Data>&& value);
  inline ::capnp::Orphan<::capnp::Data> disownValue();

  inline bool hasOp();
  inline ::capnp::Text::Builder getOp();
  inline void setOp(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initOp(unsigned int size);
  inline void adoptOp(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownOp();

  inline bool getUseEnumeration();
  inline void setUseEnumeration(bool value);

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ConditionClause::Pipeline {
 public:
  typedef ConditionClause Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ASTNode::Reader {
 public:
  typedef ASTNode Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getIsExpression() const;

  inline bool hasFieldName() const;
  inline ::capnp::Text::Reader getFieldName() const;

  inline bool hasValue() const;
  inline ::capnp::Data::Reader getValue() const;

  inline bool hasOp() const;
  inline ::capnp::Text::Reader getOp() const;

  inline bool hasChildren() const;
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::ASTNode,
      ::capnp::Kind::STRUCT>::Reader
  getChildren() const;

  inline bool hasCombinationOp() const;
  inline ::capnp::Text::Reader getCombinationOp() const;

  inline bool getUseEnumeration() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ASTNode::Builder {
 public:
  typedef ASTNode Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool getIsExpression();
  inline void setIsExpression(bool value);

  inline bool hasFieldName();
  inline ::capnp::Text::Builder getFieldName();
  inline void setFieldName(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initFieldName(unsigned int size);
  inline void adoptFieldName(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownFieldName();

  inline bool hasValue();
  inline ::capnp::Data::Builder getValue();
  inline void setValue(::capnp::Data::Reader value);
  inline ::capnp::Data::Builder initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan<::capnp::Data>&& value);
  inline ::capnp::Orphan<::capnp::Data> disownValue();

  inline bool hasOp();
  inline ::capnp::Text::Builder getOp();
  inline void setOp(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initOp(unsigned int size);
  inline void adoptOp(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownOp();

  inline bool hasChildren();
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::ASTNode,
      ::capnp::Kind::STRUCT>::Builder
  getChildren();
  inline void setChildren(::capnp::List<
                          ::tiledb::sm::serialization::capnp::ASTNode,
                          ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::ASTNode,
      ::capnp::Kind::STRUCT>::Builder
  initChildren(unsigned int size);
  inline void adoptChildren(::capnp::Orphan<::capnp::List<
                                ::tiledb::sm::serialization::capnp::ASTNode,
                                ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::tiledb::sm::serialization::capnp::ASTNode,
      ::capnp::Kind::STRUCT>>
  disownChildren();

  inline bool hasCombinationOp();
  inline ::capnp::Text::Builder getCombinationOp();
  inline void setCombinationOp(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initCombinationOp(unsigned int size);
  inline void adoptCombinationOp(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownCombinationOp();

  inline bool getUseEnumeration();
  inline void setUseEnumeration(bool value);

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ASTNode::Pipeline {
 public:
  typedef ASTNode Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Condition::Reader {
 public:
  typedef Condition Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasClauses() const;
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::ConditionClause,
      ::capnp::Kind::STRUCT>::Reader
  getClauses() const;

  inline bool hasClauseCombinationOps() const;
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader
  getClauseCombinationOps() const;

  inline bool hasTree() const;
  inline ::tiledb::sm::serialization::capnp::ASTNode::Reader getTree() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Condition::Builder {
 public:
  typedef Condition Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasClauses();
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::ConditionClause,
      ::capnp::Kind::STRUCT>::Builder
  getClauses();
  inline void setClauses(::capnp::List<
                         ::tiledb::sm::serialization::capnp::ConditionClause,
                         ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::ConditionClause,
      ::capnp::Kind::STRUCT>::Builder
  initClauses(unsigned int size);
  inline void adoptClauses(
      ::capnp::Orphan<::capnp::List<
          ::tiledb::sm::serialization::capnp::ConditionClause,
          ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::tiledb::sm::serialization::capnp::ConditionClause,
      ::capnp::Kind::STRUCT>>
  disownClauses();

  inline bool hasClauseCombinationOps();
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
  getClauseCombinationOps();
  inline void setClauseCombinationOps(
      ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value);
  inline void setClauseCombinationOps(
      ::kj::ArrayPtr<const ::capnp::Text::Reader> value);
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
  initClauseCombinationOps(unsigned int size);
  inline void adoptClauseCombinationOps(
      ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
  disownClauseCombinationOps();

  inline bool hasTree();
  inline ::tiledb::sm::serialization::capnp::ASTNode::Builder getTree();
  inline void setTree(
      ::tiledb::sm::serialization::capnp::ASTNode::Reader value);
  inline ::tiledb::sm::serialization::capnp::ASTNode::Builder initTree();
  inline void adoptTree(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::ASTNode>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::ASTNode>
  disownTree();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Condition::Pipeline {
 public:
  typedef Condition Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::tiledb::sm::serialization::capnp::ASTNode::Pipeline getTree();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class QueryReader::Reader {
 public:
  typedef QueryReader Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasLayout() const;
  inline ::capnp::Text::Reader getLayout() const;

  inline bool hasSubarray() const;
  inline ::tiledb::sm::serialization::capnp::Subarray::Reader getSubarray()
      const;

  inline bool hasReadState() const;
  inline ::tiledb::sm::serialization::capnp::ReadState::Reader getReadState()
      const;

  inline bool hasCondition() const;
  inline ::tiledb::sm::serialization::capnp::Condition::Reader getCondition()
      const;

  inline bool hasStats() const;
  inline ::tiledb::sm::serialization::capnp::Stats::Reader getStats() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class QueryReader::Builder {
 public:
  typedef QueryReader Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasLayout();
  inline ::capnp::Text::Builder getLayout();
  inline void setLayout(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initLayout(unsigned int size);
  inline void adoptLayout(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownLayout();

  inline bool hasSubarray();
  inline ::tiledb::sm::serialization::capnp::Subarray::Builder getSubarray();
  inline void setSubarray(
      ::tiledb::sm::serialization::capnp::Subarray::Reader value);
  inline ::tiledb::sm::serialization::capnp::Subarray::Builder initSubarray();
  inline void adoptSubarray(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::Subarray>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Subarray>
  disownSubarray();

  inline bool hasReadState();
  inline ::tiledb::sm::serialization::capnp::ReadState::Builder getReadState();
  inline void setReadState(
      ::tiledb::sm::serialization::capnp::ReadState::Reader value);
  inline ::tiledb::sm::serialization::capnp::ReadState::Builder initReadState();
  inline void adoptReadState(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::ReadState>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::ReadState>
  disownReadState();

  inline bool hasCondition();
  inline ::tiledb::sm::serialization::capnp::Condition::Builder getCondition();
  inline void setCondition(
      ::tiledb::sm::serialization::capnp::Condition::Reader value);
  inline ::tiledb::sm::serialization::capnp::Condition::Builder initCondition();
  inline void adoptCondition(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::Condition>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Condition>
  disownCondition();

  inline bool hasStats();
  inline ::tiledb::sm::serialization::capnp::Stats::Builder getStats();
  inline void setStats(::tiledb::sm::serialization::capnp::Stats::Reader value);
  inline ::tiledb::sm::serialization::capnp::Stats::Builder initStats();
  inline void adoptStats(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::Stats>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Stats>
  disownStats();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class QueryReader::Pipeline {
 public:
  typedef QueryReader Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::tiledb::sm::serialization::capnp::Subarray::Pipeline getSubarray();
  inline ::tiledb::sm::serialization::capnp::ReadState::Pipeline getReadState();
  inline ::tiledb::sm::serialization::capnp::Condition::Pipeline getCondition();
  inline ::tiledb::sm::serialization::capnp::Stats::Pipeline getStats();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Delete::Reader {
 public:
  typedef Delete Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasCondition() const;
  inline ::tiledb::sm::serialization::capnp::Condition::Reader getCondition()
      const;

  inline bool hasStats() const;
  inline ::tiledb::sm::serialization::capnp::Stats::Reader getStats() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Delete::Builder {
 public:
  typedef Delete Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasCondition();
  inline ::tiledb::sm::serialization::capnp::Condition::Builder getCondition();
  inline void setCondition(
      ::tiledb::sm::serialization::capnp::Condition::Reader value);
  inline ::tiledb::sm::serialization::capnp::Condition::Builder initCondition();
  inline void adoptCondition(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::Condition>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Condition>
  disownCondition();

  inline bool hasStats();
  inline ::tiledb::sm::serialization::capnp::Stats::Builder getStats();
  inline void setStats(::tiledb::sm::serialization::capnp::Stats::Reader value);
  inline ::tiledb::sm::serialization::capnp::Stats::Builder initStats();
  inline void adoptStats(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::Stats>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Stats>
  disownStats();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Delete::Pipeline {
 public:
  typedef Delete Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::tiledb::sm::serialization::capnp::Condition::Pipeline getCondition();
  inline ::tiledb::sm::serialization::capnp::Stats::Pipeline getStats();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ResultCellSlab::Reader {
 public:
  typedef ResultCellSlab Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline ::uint32_t getFragIdx() const;

  inline ::uint64_t getTileIdx() const;

  inline ::uint64_t getStart() const;

  inline ::uint64_t getLength() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ResultCellSlab::Builder {
 public:
  typedef ResultCellSlab Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline ::uint32_t getFragIdx();
  inline void setFragIdx(::uint32_t value);

  inline ::uint64_t getTileIdx();
  inline void setTileIdx(::uint64_t value);

  inline ::uint64_t getStart();
  inline void setStart(::uint64_t value);

  inline ::uint64_t getLength();
  inline void setLength(::uint64_t value);

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ResultCellSlab::Pipeline {
 public:
  typedef ResultCellSlab Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FragmentIndex::Reader {
 public:
  typedef FragmentIndex Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline ::uint64_t getTileIdx() const;

  inline ::uint64_t getCellIdx() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FragmentIndex::Builder {
 public:
  typedef FragmentIndex Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline ::uint64_t getTileIdx();
  inline void setTileIdx(::uint64_t value);

  inline ::uint64_t getCellIdx();
  inline void setCellIdx(::uint64_t value);

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FragmentIndex::Pipeline {
 public:
  typedef FragmentIndex Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ReadStateIndex::Reader {
 public:
  typedef ReadStateIndex Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasResultCellSlab() const;
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::ResultCellSlab,
      ::capnp::Kind::STRUCT>::Reader
  getResultCellSlab() const;

  inline bool hasFragTileIdx() const;
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::FragmentIndex,
      ::capnp::Kind::STRUCT>::Reader
  getFragTileIdx() const;

  inline bool getDoneAddingResultTiles() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ReadStateIndex::Builder {
 public:
  typedef ReadStateIndex Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasResultCellSlab();
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::ResultCellSlab,
      ::capnp::Kind::STRUCT>::Builder
  getResultCellSlab();
  inline void setResultCellSlab(
      ::capnp::List<
          ::tiledb::sm::serialization::capnp::ResultCellSlab,
          ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::ResultCellSlab,
      ::capnp::Kind::STRUCT>::Builder
  initResultCellSlab(unsigned int size);
  inline void adoptResultCellSlab(
      ::capnp::Orphan<::capnp::List<
          ::tiledb::sm::serialization::capnp::ResultCellSlab,
          ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::tiledb::sm::serialization::capnp::ResultCellSlab,
      ::capnp::Kind::STRUCT>>
  disownResultCellSlab();

  inline bool hasFragTileIdx();
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::FragmentIndex,
      ::capnp::Kind::STRUCT>::Builder
  getFragTileIdx();
  inline void setFragTileIdx(::capnp::List<
                             ::tiledb::sm::serialization::capnp::FragmentIndex,
                             ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::FragmentIndex,
      ::capnp::Kind::STRUCT>::Builder
  initFragTileIdx(unsigned int size);
  inline void adoptFragTileIdx(
      ::capnp::Orphan<::capnp::List<
          ::tiledb::sm::serialization::capnp::FragmentIndex,
          ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::tiledb::sm::serialization::capnp::FragmentIndex,
      ::capnp::Kind::STRUCT>>
  disownFragTileIdx();

  inline bool getDoneAddingResultTiles();
  inline void setDoneAddingResultTiles(bool value);

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ReadStateIndex::Pipeline {
 public:
  typedef ReadStateIndex Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ReaderIndex::Reader {
 public:
  typedef ReaderIndex Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasLayout() const;
  inline ::capnp::Text::Reader getLayout() const;

  inline bool hasSubarray() const;
  inline ::tiledb::sm::serialization::capnp::Subarray::Reader getSubarray()
      const;

  inline bool hasReadState() const;
  inline ::tiledb::sm::serialization::capnp::ReadStateIndex::Reader
  getReadState() const;

  inline bool hasCondition() const;
  inline ::tiledb::sm::serialization::capnp::Condition::Reader getCondition()
      const;

  inline bool hasStats() const;
  inline ::tiledb::sm::serialization::capnp::Stats::Reader getStats() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ReaderIndex::Builder {
 public:
  typedef ReaderIndex Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasLayout();
  inline ::capnp::Text::Builder getLayout();
  inline void setLayout(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initLayout(unsigned int size);
  inline void adoptLayout(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownLayout();

  inline bool hasSubarray();
  inline ::tiledb::sm::serialization::capnp::Subarray::Builder getSubarray();
  inline void setSubarray(
      ::tiledb::sm::serialization::capnp::Subarray::Reader value);
  inline ::tiledb::sm::serialization::capnp::Subarray::Builder initSubarray();
  inline void adoptSubarray(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::Subarray>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Subarray>
  disownSubarray();

  inline bool hasReadState();
  inline ::tiledb::sm::serialization::capnp::ReadStateIndex::Builder
  getReadState();
  inline void setReadState(
      ::tiledb::sm::serialization::capnp::ReadStateIndex::Reader value);
  inline ::tiledb::sm::serialization::capnp::ReadStateIndex::Builder
  initReadState();
  inline void adoptReadState(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::ReadStateIndex>&&
          value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::ReadStateIndex>
  disownReadState();

  inline bool hasCondition();
  inline ::tiledb::sm::serialization::capnp::Condition::Builder getCondition();
  inline void setCondition(
      ::tiledb::sm::serialization::capnp::Condition::Reader value);
  inline ::tiledb::sm::serialization::capnp::Condition::Builder initCondition();
  inline void adoptCondition(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::Condition>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Condition>
  disownCondition();

  inline bool hasStats();
  inline ::tiledb::sm::serialization::capnp::Stats::Builder getStats();
  inline void setStats(::tiledb::sm::serialization::capnp::Stats::Reader value);
  inline ::tiledb::sm::serialization::capnp::Stats::Builder initStats();
  inline void adoptStats(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::Stats>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Stats>
  disownStats();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ReaderIndex::Pipeline {
 public:
  typedef ReaderIndex Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::tiledb::sm::serialization::capnp::Subarray::Pipeline getSubarray();
  inline ::tiledb::sm::serialization::capnp::ReadStateIndex::Pipeline
  getReadState();
  inline ::tiledb::sm::serialization::capnp::Condition::Pipeline getCondition();
  inline ::tiledb::sm::serialization::capnp::Stats::Pipeline getStats();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Query::Reader {
 public:
  typedef Query Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasAttributeBufferHeaders() const;
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::AttributeBufferHeader,
      ::capnp::Kind::STRUCT>::Reader
  getAttributeBufferHeaders() const;

  inline bool hasLayout() const;
  inline ::capnp::Text::Reader getLayout() const;

  inline bool hasStatus() const;
  inline ::capnp::Text::Reader getStatus() const;

  inline bool hasType() const;
  inline ::capnp::Text::Reader getType() const;

  inline bool hasWriter() const;
  inline ::tiledb::sm::serialization::capnp::Writer::Reader getWriter() const;

  inline bool hasReader() const;
  inline ::tiledb::sm::serialization::capnp::QueryReader::Reader getReader()
      const;

  inline bool hasArray() const;
  inline ::tiledb::sm::serialization::capnp::Array::Reader getArray() const;

  inline ::uint64_t getTotalFixedLengthBufferBytes() const;

  inline ::uint64_t getTotalVarLenBufferBytes() const;

  inline ::uint64_t getTotalValidityBufferBytes() const;

  inline bool hasVarOffsetsMode() const;
  inline ::capnp::Text::Reader getVarOffsetsMode() const;

  inline bool getVarOffsetsAddExtraElement() const;

  inline ::int32_t getVarOffsetsBitsize() const;

  inline bool hasConfig() const;
  inline ::tiledb::sm::serialization::capnp::Config::Reader getConfig() const;

  inline bool hasStats() const;
  inline ::tiledb::sm::serialization::capnp::Stats::Reader getStats() const;

  inline bool hasReaderIndex() const;
  inline ::tiledb::sm::serialization::capnp::ReaderIndex::Reader
  getReaderIndex() const;

  inline bool hasDenseReader() const;
  inline ::tiledb::sm::serialization::capnp::QueryReader::Reader
  getDenseReader() const;

  inline bool hasDelete() const;
  inline ::tiledb::sm::serialization::capnp::Delete::Reader getDelete() const;

  inline bool hasWrittenFragmentInfo() const;
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::WrittenFragmentInfo,
      ::capnp::Kind::STRUCT>::Reader
  getWrittenFragmentInfo() const;

  inline bool hasWrittenBuffers() const;
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader
  getWrittenBuffers() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Query::Builder {
 public:
  typedef Query Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasAttributeBufferHeaders();
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::AttributeBufferHeader,
      ::capnp::Kind::STRUCT>::Builder
  getAttributeBufferHeaders();
  inline void setAttributeBufferHeaders(
      ::capnp::List<
          ::tiledb::sm::serialization::capnp::AttributeBufferHeader,
          ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::AttributeBufferHeader,
      ::capnp::Kind::STRUCT>::Builder
  initAttributeBufferHeaders(unsigned int size);
  inline void adoptAttributeBufferHeaders(
      ::capnp::Orphan<::capnp::List<
          ::tiledb::sm::serialization::capnp::AttributeBufferHeader,
          ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::tiledb::sm::serialization::capnp::AttributeBufferHeader,
      ::capnp::Kind::STRUCT>>
  disownAttributeBufferHeaders();

  inline bool hasLayout();
  inline ::capnp::Text::Builder getLayout();
  inline void setLayout(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initLayout(unsigned int size);
  inline void adoptLayout(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownLayout();

  inline bool hasStatus();
  inline ::capnp::Text::Builder getStatus();
  inline void setStatus(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initStatus(unsigned int size);
  inline void adoptStatus(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownStatus();

  inline bool hasType();
  inline ::capnp::Text::Builder getType();
  inline void setType(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initType(unsigned int size);
  inline void adoptType(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownType();

  inline bool hasWriter();
  inline ::tiledb::sm::serialization::capnp::Writer::Builder getWriter();
  inline void setWriter(
      ::tiledb::sm::serialization::capnp::Writer::Reader value);
  inline ::tiledb::sm::serialization::capnp::Writer::Builder initWriter();
  inline void adoptWriter(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::Writer>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Writer>
  disownWriter();

  inline bool hasReader();
  inline ::tiledb::sm::serialization::capnp::QueryReader::Builder getReader();
  inline void setReader(
      ::tiledb::sm::serialization::capnp::QueryReader::Reader value);
  inline ::tiledb::sm::serialization::capnp::QueryReader::Builder initReader();
  inline void adoptReader(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::QueryReader>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::QueryReader>
  disownReader();

  inline bool hasArray();
  inline ::tiledb::sm::serialization::capnp::Array::Builder getArray();
  inline void setArray(::tiledb::sm::serialization::capnp::Array::Reader value);
  inline ::tiledb::sm::serialization::capnp::Array::Builder initArray();
  inline void adoptArray(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::Array>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Array>
  disownArray();

  inline ::uint64_t getTotalFixedLengthBufferBytes();
  inline void setTotalFixedLengthBufferBytes(::uint64_t value);

  inline ::uint64_t getTotalVarLenBufferBytes();
  inline void setTotalVarLenBufferBytes(::uint64_t value);

  inline ::uint64_t getTotalValidityBufferBytes();
  inline void setTotalValidityBufferBytes(::uint64_t value);

  inline bool hasVarOffsetsMode();
  inline ::capnp::Text::Builder getVarOffsetsMode();
  inline void setVarOffsetsMode(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initVarOffsetsMode(unsigned int size);
  inline void adoptVarOffsetsMode(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownVarOffsetsMode();

  inline bool getVarOffsetsAddExtraElement();
  inline void setVarOffsetsAddExtraElement(bool value);

  inline ::int32_t getVarOffsetsBitsize();
  inline void setVarOffsetsBitsize(::int32_t value);

  inline bool hasConfig();
  inline ::tiledb::sm::serialization::capnp::Config::Builder getConfig();
  inline void setConfig(
      ::tiledb::sm::serialization::capnp::Config::Reader value);
  inline ::tiledb::sm::serialization::capnp::Config::Builder initConfig();
  inline void adoptConfig(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::Config>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Config>
  disownConfig();

  inline bool hasStats();
  inline ::tiledb::sm::serialization::capnp::Stats::Builder getStats();
  inline void setStats(::tiledb::sm::serialization::capnp::Stats::Reader value);
  inline ::tiledb::sm::serialization::capnp::Stats::Builder initStats();
  inline void adoptStats(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::Stats>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Stats>
  disownStats();

  inline bool hasReaderIndex();
  inline ::tiledb::sm::serialization::capnp::ReaderIndex::Builder
  getReaderIndex();
  inline void setReaderIndex(
      ::tiledb::sm::serialization::capnp::ReaderIndex::Reader value);
  inline ::tiledb::sm::serialization::capnp::ReaderIndex::Builder
  initReaderIndex();
  inline void adoptReaderIndex(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::ReaderIndex>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::ReaderIndex>
  disownReaderIndex();

  inline bool hasDenseReader();
  inline ::tiledb::sm::serialization::capnp::QueryReader::Builder
  getDenseReader();
  inline void setDenseReader(
      ::tiledb::sm::serialization::capnp::QueryReader::Reader value);
  inline ::tiledb::sm::serialization::capnp::QueryReader::Builder
  initDenseReader();
  inline void adoptDenseReader(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::QueryReader>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::QueryReader>
  disownDenseReader();

  inline bool hasDelete();
  inline ::tiledb::sm::serialization::capnp::Delete::Builder getDelete();
  inline void setDelete(
      ::tiledb::sm::serialization::capnp::Delete::Reader value);
  inline ::tiledb::sm::serialization::capnp::Delete::Builder initDelete();
  inline void adoptDelete(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::Delete>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Delete>
  disownDelete();

  inline bool hasWrittenFragmentInfo();
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::WrittenFragmentInfo,
      ::capnp::Kind::STRUCT>::Builder
  getWrittenFragmentInfo();
  inline void setWrittenFragmentInfo(
      ::capnp::List<
          ::tiledb::sm::serialization::capnp::WrittenFragmentInfo,
          ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::WrittenFragmentInfo,
      ::capnp::Kind::STRUCT>::Builder
  initWrittenFragmentInfo(unsigned int size);
  inline void adoptWrittenFragmentInfo(
      ::capnp::Orphan<::capnp::List<
          ::tiledb::sm::serialization::capnp::WrittenFragmentInfo,
          ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::tiledb::sm::serialization::capnp::WrittenFragmentInfo,
      ::capnp::Kind::STRUCT>>
  disownWrittenFragmentInfo();

  inline bool hasWrittenBuffers();
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
  getWrittenBuffers();
  inline void setWrittenBuffers(
      ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value);
  inline void setWrittenBuffers(
      ::kj::ArrayPtr<const ::capnp::Text::Reader> value);
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
  initWrittenBuffers(unsigned int size);
  inline void adoptWrittenBuffers(
      ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
  disownWrittenBuffers();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Query::Pipeline {
 public:
  typedef Query Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::tiledb::sm::serialization::capnp::Writer::Pipeline getWriter();
  inline ::tiledb::sm::serialization::capnp::QueryReader::Pipeline getReader();
  inline ::tiledb::sm::serialization::capnp::Array::Pipeline getArray();
  inline ::tiledb::sm::serialization::capnp::Config::Pipeline getConfig();
  inline ::tiledb::sm::serialization::capnp::Stats::Pipeline getStats();
  inline ::tiledb::sm::serialization::capnp::ReaderIndex::Pipeline
  getReaderIndex();
  inline ::tiledb::sm::serialization::capnp::QueryReader::Pipeline
  getDenseReader();
  inline ::tiledb::sm::serialization::capnp::Delete::Pipeline getDelete();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NonEmptyDomain::Reader {
 public:
  typedef NonEmptyDomain Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasNonEmptyDomain() const;
  inline ::tiledb::sm::serialization::capnp::DomainArray::Reader
  getNonEmptyDomain() const;

  inline bool getIsEmpty() const;

  inline bool hasSizes() const;
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader getSizes()
      const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NonEmptyDomain::Builder {
 public:
  typedef NonEmptyDomain Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasNonEmptyDomain();
  inline ::tiledb::sm::serialization::capnp::DomainArray::Builder
  getNonEmptyDomain();
  inline void setNonEmptyDomain(
      ::tiledb::sm::serialization::capnp::DomainArray::Reader value);
  inline ::tiledb::sm::serialization::capnp::DomainArray::Builder
  initNonEmptyDomain();
  inline void adoptNonEmptyDomain(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::DomainArray>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::DomainArray>
  disownNonEmptyDomain();

  inline bool getIsEmpty();
  inline void setIsEmpty(bool value);

  inline bool hasSizes();
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  getSizes();
  inline void setSizes(
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setSizes(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder initSizes(
      unsigned int size);
  inline void adoptSizes(
      ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
  disownSizes();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NonEmptyDomain::Pipeline {
 public:
  typedef NonEmptyDomain Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::tiledb::sm::serialization::capnp::DomainArray::Pipeline
  getNonEmptyDomain();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NonEmptyDomainList::Reader {
 public:
  typedef NonEmptyDomainList Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasNonEmptyDomains() const;
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::NonEmptyDomain,
      ::capnp::Kind::STRUCT>::Reader
  getNonEmptyDomains() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NonEmptyDomainList::Builder {
 public:
  typedef NonEmptyDomainList Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasNonEmptyDomains();
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::NonEmptyDomain,
      ::capnp::Kind::STRUCT>::Builder
  getNonEmptyDomains();
  inline void setNonEmptyDomains(
      ::capnp::List<
          ::tiledb::sm::serialization::capnp::NonEmptyDomain,
          ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::NonEmptyDomain,
      ::capnp::Kind::STRUCT>::Builder
  initNonEmptyDomains(unsigned int size);
  inline void adoptNonEmptyDomains(
      ::capnp::Orphan<::capnp::List<
          ::tiledb::sm::serialization::capnp::NonEmptyDomain,
          ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::tiledb::sm::serialization::capnp::NonEmptyDomain,
      ::capnp::Kind::STRUCT>>
  disownNonEmptyDomains();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NonEmptyDomainList::Pipeline {
 public:
  typedef NonEmptyDomainList Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AttributeBufferSize::Reader {
 public:
  typedef AttributeBufferSize Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasAttribute() const;
  inline ::capnp::Text::Reader getAttribute() const;

  inline ::uint64_t getOffsetBytes() const;

  inline ::uint64_t getDataBytes() const;

  inline ::uint64_t getValidityBytes() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AttributeBufferSize::Builder {
 public:
  typedef AttributeBufferSize Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasAttribute();
  inline ::capnp::Text::Builder getAttribute();
  inline void setAttribute(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initAttribute(unsigned int size);
  inline void adoptAttribute(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownAttribute();

  inline ::uint64_t getOffsetBytes();
  inline void setOffsetBytes(::uint64_t value);

  inline ::uint64_t getDataBytes();
  inline void setDataBytes(::uint64_t value);

  inline ::uint64_t getValidityBytes();
  inline void setValidityBytes(::uint64_t value);

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AttributeBufferSize::Pipeline {
 public:
  typedef AttributeBufferSize Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MaxBufferSizes::Reader {
 public:
  typedef MaxBufferSizes Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasMaxBufferSizes() const;
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::AttributeBufferSize,
      ::capnp::Kind::STRUCT>::Reader
  getMaxBufferSizes() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MaxBufferSizes::Builder {
 public:
  typedef MaxBufferSizes Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasMaxBufferSizes();
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::AttributeBufferSize,
      ::capnp::Kind::STRUCT>::Builder
  getMaxBufferSizes();
  inline void setMaxBufferSizes(
      ::capnp::List<
          ::tiledb::sm::serialization::capnp::AttributeBufferSize,
          ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::AttributeBufferSize,
      ::capnp::Kind::STRUCT>::Builder
  initMaxBufferSizes(unsigned int size);
  inline void adoptMaxBufferSizes(
      ::capnp::Orphan<::capnp::List<
          ::tiledb::sm::serialization::capnp::AttributeBufferSize,
          ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::tiledb::sm::serialization::capnp::AttributeBufferSize,
      ::capnp::Kind::STRUCT>>
  disownMaxBufferSizes();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MaxBufferSizes::Pipeline {
 public:
  typedef MaxBufferSizes Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ArrayMetadata::Reader {
 public:
  typedef ArrayMetadata Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasEntries() const;
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::ArrayMetadata::MetadataEntry,
      ::capnp::Kind::STRUCT>::Reader
  getEntries() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ArrayMetadata::Builder {
 public:
  typedef ArrayMetadata Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasEntries();
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::ArrayMetadata::MetadataEntry,
      ::capnp::Kind::STRUCT>::Builder
  getEntries();
  inline void setEntries(
      ::capnp::List<
          ::tiledb::sm::serialization::capnp::ArrayMetadata::MetadataEntry,
          ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::ArrayMetadata::MetadataEntry,
      ::capnp::Kind::STRUCT>::Builder
  initEntries(unsigned int size);
  inline void adoptEntries(
      ::capnp::Orphan<::capnp::List<
          ::tiledb::sm::serialization::capnp::ArrayMetadata::MetadataEntry,
          ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::tiledb::sm::serialization::capnp::ArrayMetadata::MetadataEntry,
      ::capnp::Kind::STRUCT>>
  disownEntries();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ArrayMetadata::Pipeline {
 public:
  typedef ArrayMetadata Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ArrayMetadata::MetadataEntry::Reader {
 public:
  typedef MetadataEntry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasKey() const;
  inline ::capnp::Text::Reader getKey() const;

  inline bool hasType() const;
  inline ::capnp::Text::Reader getType() const;

  inline ::uint32_t getValueNum() const;

  inline bool hasValue() const;
  inline ::capnp::Data::Reader getValue() const;

  inline bool getDel() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ArrayMetadata::MetadataEntry::Builder {
 public:
  typedef MetadataEntry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasKey();
  inline ::capnp::Text::Builder getKey();
  inline void setKey(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initKey(unsigned int size);
  inline void adoptKey(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownKey();

  inline bool hasType();
  inline ::capnp::Text::Builder getType();
  inline void setType(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initType(unsigned int size);
  inline void adoptType(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownType();

  inline ::uint32_t getValueNum();
  inline void setValueNum(::uint32_t value);

  inline bool hasValue();
  inline ::capnp::Data::Builder getValue();
  inline void setValue(::capnp::Data::Reader value);
  inline ::capnp::Data::Builder initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan<::capnp::Data>&& value);
  inline ::capnp::Orphan<::capnp::Data> disownValue();

  inline bool getDel();
  inline void setDel(bool value);

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ArrayMetadata::MetadataEntry::Pipeline {
 public:
  typedef MetadataEntry Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ArrayDirectory::Reader {
 public:
  typedef ArrayDirectory Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasUnfilteredFragmentUris() const;
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader
  getUnfilteredFragmentUris() const;

  inline bool hasConsolidatedCommitUris() const;
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader
  getConsolidatedCommitUris() const;

  inline bool hasArraySchemaUris() const;
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader
  getArraySchemaUris() const;

  inline bool hasLatestArraySchemaUri() const;
  inline ::capnp::Text::Reader getLatestArraySchemaUri() const;

  inline bool hasArrayMetaUrisToVacuum() const;
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader
  getArrayMetaUrisToVacuum() const;

  inline bool hasArrayMetaVacUrisToVacuum() const;
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader
  getArrayMetaVacUrisToVacuum() const;

  inline bool hasCommitUrisToConsolidate() const;
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader
  getCommitUrisToConsolidate() const;

  inline bool hasCommitUrisToVacuum() const;
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader
  getCommitUrisToVacuum() const;

  inline bool hasConsolidatedCommitUrisToVacuum() const;
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader
  getConsolidatedCommitUrisToVacuum() const;

  inline bool hasArrayMetaUris() const;
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::ArrayDirectory::TimestampedURI,
      ::capnp::Kind::STRUCT>::Reader
  getArrayMetaUris() const;

  inline bool hasFragmentMetaUris() const;
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader
  getFragmentMetaUris() const;

  inline bool hasDeleteAndUpdateTileLocation() const;
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::ArrayDirectory::
          DeleteAndUpdateTileLocation,
      ::capnp::Kind::STRUCT>::Reader
  getDeleteAndUpdateTileLocation() const;

  inline ::uint64_t getTimestampStart() const;

  inline ::uint64_t getTimestampEnd() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ArrayDirectory::Builder {
 public:
  typedef ArrayDirectory Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasUnfilteredFragmentUris();
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
  getUnfilteredFragmentUris();
  inline void setUnfilteredFragmentUris(
      ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value);
  inline void setUnfilteredFragmentUris(
      ::kj::ArrayPtr<const ::capnp::Text::Reader> value);
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
  initUnfilteredFragmentUris(unsigned int size);
  inline void adoptUnfilteredFragmentUris(
      ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
  disownUnfilteredFragmentUris();

  inline bool hasConsolidatedCommitUris();
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
  getConsolidatedCommitUris();
  inline void setConsolidatedCommitUris(
      ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value);
  inline void setConsolidatedCommitUris(
      ::kj::ArrayPtr<const ::capnp::Text::Reader> value);
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
  initConsolidatedCommitUris(unsigned int size);
  inline void adoptConsolidatedCommitUris(
      ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
  disownConsolidatedCommitUris();

  inline bool hasArraySchemaUris();
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
  getArraySchemaUris();
  inline void setArraySchemaUris(
      ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value);
  inline void setArraySchemaUris(
      ::kj::ArrayPtr<const ::capnp::Text::Reader> value);
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
  initArraySchemaUris(unsigned int size);
  inline void adoptArraySchemaUris(
      ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
  disownArraySchemaUris();

  inline bool hasLatestArraySchemaUri();
  inline ::capnp::Text::Builder getLatestArraySchemaUri();
  inline void setLatestArraySchemaUri(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initLatestArraySchemaUri(unsigned int size);
  inline void adoptLatestArraySchemaUri(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownLatestArraySchemaUri();

  inline bool hasArrayMetaUrisToVacuum();
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
  getArrayMetaUrisToVacuum();
  inline void setArrayMetaUrisToVacuum(
      ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value);
  inline void setArrayMetaUrisToVacuum(
      ::kj::ArrayPtr<const ::capnp::Text::Reader> value);
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
  initArrayMetaUrisToVacuum(unsigned int size);
  inline void adoptArrayMetaUrisToVacuum(
      ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
  disownArrayMetaUrisToVacuum();

  inline bool hasArrayMetaVacUrisToVacuum();
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
  getArrayMetaVacUrisToVacuum();
  inline void setArrayMetaVacUrisToVacuum(
      ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value);
  inline void setArrayMetaVacUrisToVacuum(
      ::kj::ArrayPtr<const ::capnp::Text::Reader> value);
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
  initArrayMetaVacUrisToVacuum(unsigned int size);
  inline void adoptArrayMetaVacUrisToVacuum(
      ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
  disownArrayMetaVacUrisToVacuum();

  inline bool hasCommitUrisToConsolidate();
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
  getCommitUrisToConsolidate();
  inline void setCommitUrisToConsolidate(
      ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value);
  inline void setCommitUrisToConsolidate(
      ::kj::ArrayPtr<const ::capnp::Text::Reader> value);
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
  initCommitUrisToConsolidate(unsigned int size);
  inline void adoptCommitUrisToConsolidate(
      ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
  disownCommitUrisToConsolidate();

  inline bool hasCommitUrisToVacuum();
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
  getCommitUrisToVacuum();
  inline void setCommitUrisToVacuum(
      ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value);
  inline void setCommitUrisToVacuum(
      ::kj::ArrayPtr<const ::capnp::Text::Reader> value);
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
  initCommitUrisToVacuum(unsigned int size);
  inline void adoptCommitUrisToVacuum(
      ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
  disownCommitUrisToVacuum();

  inline bool hasConsolidatedCommitUrisToVacuum();
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
  getConsolidatedCommitUrisToVacuum();
  inline void setConsolidatedCommitUrisToVacuum(
      ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value);
  inline void setConsolidatedCommitUrisToVacuum(
      ::kj::ArrayPtr<const ::capnp::Text::Reader> value);
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
  initConsolidatedCommitUrisToVacuum(unsigned int size);
  inline void adoptConsolidatedCommitUrisToVacuum(
      ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
  disownConsolidatedCommitUrisToVacuum();

  inline bool hasArrayMetaUris();
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::ArrayDirectory::TimestampedURI,
      ::capnp::Kind::STRUCT>::Builder
  getArrayMetaUris();
  inline void setArrayMetaUris(
      ::capnp::List<
          ::tiledb::sm::serialization::capnp::ArrayDirectory::TimestampedURI,
          ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::ArrayDirectory::TimestampedURI,
      ::capnp::Kind::STRUCT>::Builder
  initArrayMetaUris(unsigned int size);
  inline void adoptArrayMetaUris(
      ::capnp::Orphan<::capnp::List<
          ::tiledb::sm::serialization::capnp::ArrayDirectory::TimestampedURI,
          ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::tiledb::sm::serialization::capnp::ArrayDirectory::TimestampedURI,
      ::capnp::Kind::STRUCT>>
  disownArrayMetaUris();

  inline bool hasFragmentMetaUris();
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
  getFragmentMetaUris();
  inline void setFragmentMetaUris(
      ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value);
  inline void setFragmentMetaUris(
      ::kj::ArrayPtr<const ::capnp::Text::Reader> value);
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
  initFragmentMetaUris(unsigned int size);
  inline void adoptFragmentMetaUris(
      ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
  disownFragmentMetaUris();

  inline bool hasDeleteAndUpdateTileLocation();
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::ArrayDirectory::
          DeleteAndUpdateTileLocation,
      ::capnp::Kind::STRUCT>::Builder
  getDeleteAndUpdateTileLocation();
  inline void setDeleteAndUpdateTileLocation(
      ::capnp::List<
          ::tiledb::sm::serialization::capnp::ArrayDirectory::
              DeleteAndUpdateTileLocation,
          ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::ArrayDirectory::
          DeleteAndUpdateTileLocation,
      ::capnp::Kind::STRUCT>::Builder
  initDeleteAndUpdateTileLocation(unsigned int size);
  inline void adoptDeleteAndUpdateTileLocation(
      ::capnp::Orphan<::capnp::List<
          ::tiledb::sm::serialization::capnp::ArrayDirectory::
              DeleteAndUpdateTileLocation,
          ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::tiledb::sm::serialization::capnp::ArrayDirectory::
          DeleteAndUpdateTileLocation,
      ::capnp::Kind::STRUCT>>
  disownDeleteAndUpdateTileLocation();

  inline ::uint64_t getTimestampStart();
  inline void setTimestampStart(::uint64_t value);

  inline ::uint64_t getTimestampEnd();
  inline void setTimestampEnd(::uint64_t value);

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ArrayDirectory::Pipeline {
 public:
  typedef ArrayDirectory Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ArrayDirectory::TimestampedURI::Reader {
 public:
  typedef TimestampedURI Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasUri() const;
  inline ::capnp::Text::Reader getUri() const;

  inline ::uint64_t getTimestampStart() const;

  inline ::uint64_t getTimestampEnd() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ArrayDirectory::TimestampedURI::Builder {
 public:
  typedef TimestampedURI Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasUri();
  inline ::capnp::Text::Builder getUri();
  inline void setUri(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initUri(unsigned int size);
  inline void adoptUri(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownUri();

  inline ::uint64_t getTimestampStart();
  inline void setTimestampStart(::uint64_t value);

  inline ::uint64_t getTimestampEnd();
  inline void setTimestampEnd(::uint64_t value);

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ArrayDirectory::TimestampedURI::Pipeline {
 public:
  typedef TimestampedURI Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ArrayDirectory::DeleteAndUpdateTileLocation::Reader {
 public:
  typedef DeleteAndUpdateTileLocation Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasUri() const;
  inline ::capnp::Text::Reader getUri() const;

  inline bool hasConditionMarker() const;
  inline ::capnp::Text::Reader getConditionMarker() const;

  inline ::uint64_t getOffset() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ArrayDirectory::DeleteAndUpdateTileLocation::Builder {
 public:
  typedef DeleteAndUpdateTileLocation Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasUri();
  inline ::capnp::Text::Builder getUri();
  inline void setUri(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initUri(unsigned int size);
  inline void adoptUri(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownUri();

  inline bool hasConditionMarker();
  inline ::capnp::Text::Builder getConditionMarker();
  inline void setConditionMarker(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initConditionMarker(unsigned int size);
  inline void adoptConditionMarker(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownConditionMarker();

  inline ::uint64_t getOffset();
  inline void setOffset(::uint64_t value);

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ArrayDirectory::DeleteAndUpdateTileLocation::Pipeline {
 public:
  typedef DeleteAndUpdateTileLocation Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EstimatedResultSize::Reader {
 public:
  typedef EstimatedResultSize Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasResultSizes() const;
  inline ::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::EstimatedResultSize::ResultSize>::
      Reader
      getResultSizes() const;

  inline bool hasMemorySizes() const;
  inline ::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::EstimatedResultSize::MemorySize>::
      Reader
      getMemorySizes() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EstimatedResultSize::Builder {
 public:
  typedef EstimatedResultSize Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasResultSizes();
  inline ::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::EstimatedResultSize::ResultSize>::
      Builder
      getResultSizes();
  inline void setResultSizes(
      ::tiledb::sm::serialization::capnp::Map<
          ::capnp::Text,
          ::tiledb::sm::serialization::capnp::EstimatedResultSize::ResultSize>::
          Reader value);
  inline ::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::EstimatedResultSize::ResultSize>::
      Builder
      initResultSizes();
  inline void adoptResultSizes(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::Map<
          ::capnp::Text,
          ::tiledb::sm::serialization::capnp::EstimatedResultSize::
              ResultSize>>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::EstimatedResultSize::ResultSize>>
  disownResultSizes();

  inline bool hasMemorySizes();
  inline ::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::EstimatedResultSize::MemorySize>::
      Builder
      getMemorySizes();
  inline void setMemorySizes(
      ::tiledb::sm::serialization::capnp::Map<
          ::capnp::Text,
          ::tiledb::sm::serialization::capnp::EstimatedResultSize::MemorySize>::
          Reader value);
  inline ::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::EstimatedResultSize::MemorySize>::
      Builder
      initMemorySizes();
  inline void adoptMemorySizes(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::Map<
          ::capnp::Text,
          ::tiledb::sm::serialization::capnp::EstimatedResultSize::
              MemorySize>>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::EstimatedResultSize::MemorySize>>
  disownMemorySizes();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EstimatedResultSize::Pipeline {
 public:
  typedef EstimatedResultSize Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::EstimatedResultSize::ResultSize>::
      Pipeline
      getResultSizes();
  inline ::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::EstimatedResultSize::MemorySize>::
      Pipeline
      getMemorySizes();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EstimatedResultSize::ResultSize::Reader {
 public:
  typedef ResultSize Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getSizeFixed() const;

  inline double getSizeVar() const;

  inline double getSizeValidity() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EstimatedResultSize::ResultSize::Builder {
 public:
  typedef ResultSize Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline double getSizeFixed();
  inline void setSizeFixed(double value);

  inline double getSizeVar();
  inline void setSizeVar(double value);

  inline double getSizeValidity();
  inline void setSizeValidity(double value);

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EstimatedResultSize::ResultSize::Pipeline {
 public:
  typedef ResultSize Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EstimatedResultSize::MemorySize::Reader {
 public:
  typedef MemorySize Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline ::uint64_t getSizeFixed() const;

  inline ::uint64_t getSizeVar() const;

  inline ::uint64_t getSizeValidity() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EstimatedResultSize::MemorySize::Builder {
 public:
  typedef MemorySize Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline ::uint64_t getSizeFixed();
  inline void setSizeFixed(::uint64_t value);

  inline ::uint64_t getSizeVar();
  inline void setSizeVar(::uint64_t value);

  inline ::uint64_t getSizeValidity();
  inline void setSizeValidity(::uint64_t value);

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EstimatedResultSize::MemorySize::Pipeline {
 public:
  typedef MemorySize Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FragmentInfoRequest::Reader {
 public:
  typedef FragmentInfoRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasConfig() const;
  inline ::tiledb::sm::serialization::capnp::Config::Reader getConfig() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FragmentInfoRequest::Builder {
 public:
  typedef FragmentInfoRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasConfig();
  inline ::tiledb::sm::serialization::capnp::Config::Builder getConfig();
  inline void setConfig(
      ::tiledb::sm::serialization::capnp::Config::Reader value);
  inline ::tiledb::sm::serialization::capnp::Config::Builder initConfig();
  inline void adoptConfig(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::Config>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Config>
  disownConfig();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FragmentInfoRequest::Pipeline {
 public:
  typedef FragmentInfoRequest Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::tiledb::sm::serialization::capnp::Config::Pipeline getConfig();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SingleFragmentInfo::Reader {
 public:
  typedef SingleFragmentInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasArraySchemaName() const;
  inline ::capnp::Text::Reader getArraySchemaName() const;

  inline bool hasMeta() const;
  inline ::tiledb::sm::serialization::capnp::FragmentMetadata::Reader getMeta()
      const;

  inline ::uint64_t getFragmentSize() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SingleFragmentInfo::Builder {
 public:
  typedef SingleFragmentInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasArraySchemaName();
  inline ::capnp::Text::Builder getArraySchemaName();
  inline void setArraySchemaName(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initArraySchemaName(unsigned int size);
  inline void adoptArraySchemaName(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownArraySchemaName();

  inline bool hasMeta();
  inline ::tiledb::sm::serialization::capnp::FragmentMetadata::Builder
  getMeta();
  inline void setMeta(
      ::tiledb::sm::serialization::capnp::FragmentMetadata::Reader value);
  inline ::tiledb::sm::serialization::capnp::FragmentMetadata::Builder
  initMeta();
  inline void adoptMeta(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::FragmentMetadata>&&
          value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::FragmentMetadata>
  disownMeta();

  inline ::uint64_t getFragmentSize();
  inline void setFragmentSize(::uint64_t value);

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SingleFragmentInfo::Pipeline {
 public:
  typedef SingleFragmentInfo Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::tiledb::sm::serialization::capnp::FragmentMetadata::Pipeline
  getMeta();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FragmentInfo::Reader {
 public:
  typedef FragmentInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasArraySchemaLatest() const;
  inline ::tiledb::sm::serialization::capnp::ArraySchema::Reader
  getArraySchemaLatest() const;

  inline bool hasArraySchemasAll() const;
  inline ::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::ArraySchema>::Reader
  getArraySchemasAll() const;

  inline bool hasFragmentInfo() const;
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::SingleFragmentInfo,
      ::capnp::Kind::STRUCT>::Reader
  getFragmentInfo() const;

  inline bool hasToVacuum() const;
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader getToVacuum()
      const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FragmentInfo::Builder {
 public:
  typedef FragmentInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasArraySchemaLatest();
  inline ::tiledb::sm::serialization::capnp::ArraySchema::Builder
  getArraySchemaLatest();
  inline void setArraySchemaLatest(
      ::tiledb::sm::serialization::capnp::ArraySchema::Reader value);
  inline ::tiledb::sm::serialization::capnp::ArraySchema::Builder
  initArraySchemaLatest();
  inline void adoptArraySchemaLatest(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::ArraySchema>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::ArraySchema>
  disownArraySchemaLatest();

  inline bool hasArraySchemasAll();
  inline ::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::ArraySchema>::Builder
  getArraySchemasAll();
  inline void setArraySchemasAll(
      ::tiledb::sm::serialization::capnp::Map<
          ::capnp::Text,
          ::tiledb::sm::serialization::capnp::ArraySchema>::Reader value);
  inline ::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::ArraySchema>::Builder
  initArraySchemasAll();
  inline void adoptArraySchemasAll(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::Map<
          ::capnp::Text,
          ::tiledb::sm::serialization::capnp::ArraySchema>>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::ArraySchema>>
  disownArraySchemasAll();

  inline bool hasFragmentInfo();
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::SingleFragmentInfo,
      ::capnp::Kind::STRUCT>::Builder
  getFragmentInfo();
  inline void setFragmentInfo(
      ::capnp::List<
          ::tiledb::sm::serialization::capnp::SingleFragmentInfo,
          ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::SingleFragmentInfo,
      ::capnp::Kind::STRUCT>::Builder
  initFragmentInfo(unsigned int size);
  inline void adoptFragmentInfo(
      ::capnp::Orphan<::capnp::List<
          ::tiledb::sm::serialization::capnp::SingleFragmentInfo,
          ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::tiledb::sm::serialization::capnp::SingleFragmentInfo,
      ::capnp::Kind::STRUCT>>
  disownFragmentInfo();

  inline bool hasToVacuum();
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
  getToVacuum();
  inline void setToVacuum(
      ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value);
  inline void setToVacuum(::kj::ArrayPtr<const ::capnp::Text::Reader> value);
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
  initToVacuum(unsigned int size);
  inline void adoptToVacuum(
      ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
  disownToVacuum();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FragmentInfo::Pipeline {
 public:
  typedef FragmentInfo Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::tiledb::sm::serialization::capnp::ArraySchema::Pipeline
  getArraySchemaLatest();
  inline ::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::ArraySchema>::Pipeline
  getArraySchemasAll();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GroupMetadata::Reader {
 public:
  typedef GroupMetadata Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasConfig() const;
  inline ::tiledb::sm::serialization::capnp::Config::Reader getConfig() const;

  inline bool hasMetadata() const;
  inline ::tiledb::sm::serialization::capnp::ArrayMetadata::Reader getMetadata()
      const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GroupMetadata::Builder {
 public:
  typedef GroupMetadata Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasConfig();
  inline ::tiledb::sm::serialization::capnp::Config::Builder getConfig();
  inline void setConfig(
      ::tiledb::sm::serialization::capnp::Config::Reader value);
  inline ::tiledb::sm::serialization::capnp::Config::Builder initConfig();
  inline void adoptConfig(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::Config>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Config>
  disownConfig();

  inline bool hasMetadata();
  inline ::tiledb::sm::serialization::capnp::ArrayMetadata::Builder
  getMetadata();
  inline void setMetadata(
      ::tiledb::sm::serialization::capnp::ArrayMetadata::Reader value);
  inline ::tiledb::sm::serialization::capnp::ArrayMetadata::Builder
  initMetadata();
  inline void adoptMetadata(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::ArrayMetadata>&&
          value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::ArrayMetadata>
  disownMetadata();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GroupMetadata::Pipeline {
 public:
  typedef GroupMetadata Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::tiledb::sm::serialization::capnp::Config::Pipeline getConfig();
  inline ::tiledb::sm::serialization::capnp::ArrayMetadata::Pipeline
  getMetadata();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GroupMember::Reader {
 public:
  typedef GroupMember Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasUri() const;
  inline ::capnp::Text::Reader getUri() const;

  inline bool hasType() const;
  inline ::capnp::Text::Reader getType() const;

  inline bool getRelative() const;

  inline bool hasName() const;
  inline ::capnp::Text::Reader getName() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GroupMember::Builder {
 public:
  typedef GroupMember Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasUri();
  inline ::capnp::Text::Builder getUri();
  inline void setUri(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initUri(unsigned int size);
  inline void adoptUri(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownUri();

  inline bool hasType();
  inline ::capnp::Text::Builder getType();
  inline void setType(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initType(unsigned int size);
  inline void adoptType(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownType();

  inline bool getRelative();
  inline void setRelative(bool value);

  inline bool hasName();
  inline ::capnp::Text::Builder getName();
  inline void setName(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownName();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GroupMember::Pipeline {
 public:
  typedef GroupMember Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Group::Reader {
 public:
  typedef Group Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasConfig() const;
  inline ::tiledb::sm::serialization::capnp::Config::Reader getConfig() const;

  inline bool hasGroup() const;
  inline ::tiledb::sm::serialization::capnp::Group::GroupDetails::Reader
  getGroup() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Group::Builder {
 public:
  typedef Group Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasConfig();
  inline ::tiledb::sm::serialization::capnp::Config::Builder getConfig();
  inline void setConfig(
      ::tiledb::sm::serialization::capnp::Config::Reader value);
  inline ::tiledb::sm::serialization::capnp::Config::Builder initConfig();
  inline void adoptConfig(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::Config>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Config>
  disownConfig();

  inline bool hasGroup();
  inline ::tiledb::sm::serialization::capnp::Group::GroupDetails::Builder
  getGroup();
  inline void setGroup(
      ::tiledb::sm::serialization::capnp::Group::GroupDetails::Reader value);
  inline ::tiledb::sm::serialization::capnp::Group::GroupDetails::Builder
  initGroup();
  inline void adoptGroup(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::Group::GroupDetails>&&
          value);
  inline ::capnp::Orphan<
      ::tiledb::sm::serialization::capnp::Group::GroupDetails>
  disownGroup();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Group::Pipeline {
 public:
  typedef Group Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::tiledb::sm::serialization::capnp::Config::Pipeline getConfig();
  inline ::tiledb::sm::serialization::capnp::Group::GroupDetails::Pipeline
  getGroup();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Group::GroupDetails::Reader {
 public:
  typedef GroupDetails Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasMembers() const;
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::GroupMember,
      ::capnp::Kind::STRUCT>::Reader
  getMembers() const;

  inline bool hasMetadata() const;
  inline ::tiledb::sm::serialization::capnp::ArrayMetadata::Reader getMetadata()
      const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Group::GroupDetails::Builder {
 public:
  typedef GroupDetails Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasMembers();
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::GroupMember,
      ::capnp::Kind::STRUCT>::Builder
  getMembers();
  inline void setMembers(::capnp::List<
                         ::tiledb::sm::serialization::capnp::GroupMember,
                         ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::GroupMember,
      ::capnp::Kind::STRUCT>::Builder
  initMembers(unsigned int size);
  inline void adoptMembers(::capnp::Orphan<::capnp::List<
                               ::tiledb::sm::serialization::capnp::GroupMember,
                               ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::tiledb::sm::serialization::capnp::GroupMember,
      ::capnp::Kind::STRUCT>>
  disownMembers();

  inline bool hasMetadata();
  inline ::tiledb::sm::serialization::capnp::ArrayMetadata::Builder
  getMetadata();
  inline void setMetadata(
      ::tiledb::sm::serialization::capnp::ArrayMetadata::Reader value);
  inline ::tiledb::sm::serialization::capnp::ArrayMetadata::Builder
  initMetadata();
  inline void adoptMetadata(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::ArrayMetadata>&&
          value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::ArrayMetadata>
  disownMetadata();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Group::GroupDetails::Pipeline {
 public:
  typedef GroupDetails Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::tiledb::sm::serialization::capnp::ArrayMetadata::Pipeline
  getMetadata();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GroupUpdate::Reader {
 public:
  typedef GroupUpdate Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasConfig() const;
  inline ::tiledb::sm::serialization::capnp::Config::Reader getConfig() const;

  inline bool hasGroupUpdate() const;
  inline ::tiledb::sm::serialization::capnp::GroupUpdate::GroupUpdateDetails::
      Reader
      getGroupUpdate() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GroupUpdate::Builder {
 public:
  typedef GroupUpdate Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasConfig();
  inline ::tiledb::sm::serialization::capnp::Config::Builder getConfig();
  inline void setConfig(
      ::tiledb::sm::serialization::capnp::Config::Reader value);
  inline ::tiledb::sm::serialization::capnp::Config::Builder initConfig();
  inline void adoptConfig(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::Config>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Config>
  disownConfig();

  inline bool hasGroupUpdate();
  inline ::tiledb::sm::serialization::capnp::GroupUpdate::GroupUpdateDetails::
      Builder
      getGroupUpdate();
  inline void setGroupUpdate(::tiledb::sm::serialization::capnp::GroupUpdate::
                                 GroupUpdateDetails::Reader value);
  inline ::tiledb::sm::serialization::capnp::GroupUpdate::GroupUpdateDetails::
      Builder
      initGroupUpdate();
  inline void adoptGroupUpdate(
      ::capnp::Orphan<
          ::tiledb::sm::serialization::capnp::GroupUpdate::GroupUpdateDetails>&&
          value);
  inline ::capnp::Orphan<
      ::tiledb::sm::serialization::capnp::GroupUpdate::GroupUpdateDetails>
  disownGroupUpdate();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GroupUpdate::Pipeline {
 public:
  typedef GroupUpdate Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::tiledb::sm::serialization::capnp::Config::Pipeline getConfig();
  inline ::tiledb::sm::serialization::capnp::GroupUpdate::GroupUpdateDetails::
      Pipeline
      getGroupUpdate();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GroupUpdate::GroupUpdateDetails::Reader {
 public:
  typedef GroupUpdateDetails Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasMembersToRemove() const;
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader
  getMembersToRemove() const;

  inline bool hasMembersToAdd() const;
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::GroupMember,
      ::capnp::Kind::STRUCT>::Reader
  getMembersToAdd() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GroupUpdate::GroupUpdateDetails::Builder {
 public:
  typedef GroupUpdateDetails Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasMembersToRemove();
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
  getMembersToRemove();
  inline void setMembersToRemove(
      ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value);
  inline void setMembersToRemove(
      ::kj::ArrayPtr<const ::capnp::Text::Reader> value);
  inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
  initMembersToRemove(unsigned int size);
  inline void adoptMembersToRemove(
      ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
  disownMembersToRemove();

  inline bool hasMembersToAdd();
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::GroupMember,
      ::capnp::Kind::STRUCT>::Builder
  getMembersToAdd();
  inline void setMembersToAdd(::capnp::List<
                              ::tiledb::sm::serialization::capnp::GroupMember,
                              ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::GroupMember,
      ::capnp::Kind::STRUCT>::Builder
  initMembersToAdd(unsigned int size);
  inline void adoptMembersToAdd(
      ::capnp::Orphan<::capnp::List<
          ::tiledb::sm::serialization::capnp::GroupMember,
          ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::tiledb::sm::serialization::capnp::GroupMember,
      ::capnp::Kind::STRUCT>>
  disownMembersToAdd();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GroupUpdate::GroupUpdateDetails::Pipeline {
 public:
  typedef GroupUpdateDetails Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GroupCreate::Reader {
 public:
  typedef GroupCreate Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasConfig() const;
  inline ::tiledb::sm::serialization::capnp::Config::Reader getConfig() const;

  inline bool hasGroupDetails() const;
  inline ::tiledb::sm::serialization::capnp::GroupCreate::GroupCreateDetails::
      Reader
      getGroupDetails() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GroupCreate::Builder {
 public:
  typedef GroupCreate Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasConfig();
  inline ::tiledb::sm::serialization::capnp::Config::Builder getConfig();
  inline void setConfig(
      ::tiledb::sm::serialization::capnp::Config::Reader value);
  inline ::tiledb::sm::serialization::capnp::Config::Builder initConfig();
  inline void adoptConfig(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::Config>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Config>
  disownConfig();

  inline bool hasGroupDetails();
  inline ::tiledb::sm::serialization::capnp::GroupCreate::GroupCreateDetails::
      Builder
      getGroupDetails();
  inline void setGroupDetails(::tiledb::sm::serialization::capnp::GroupCreate::
                                  GroupCreateDetails::Reader value);
  inline ::tiledb::sm::serialization::capnp::GroupCreate::GroupCreateDetails::
      Builder
      initGroupDetails();
  inline void adoptGroupDetails(
      ::capnp::Orphan<
          ::tiledb::sm::serialization::capnp::GroupCreate::GroupCreateDetails>&&
          value);
  inline ::capnp::Orphan<
      ::tiledb::sm::serialization::capnp::GroupCreate::GroupCreateDetails>
  disownGroupDetails();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GroupCreate::Pipeline {
 public:
  typedef GroupCreate Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::tiledb::sm::serialization::capnp::Config::Pipeline getConfig();
  inline ::tiledb::sm::serialization::capnp::GroupCreate::GroupCreateDetails::
      Pipeline
      getGroupDetails();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GroupCreate::GroupCreateDetails::Reader {
 public:
  typedef GroupCreateDetails Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasUri() const;
  inline ::capnp::Text::Reader getUri() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GroupCreate::GroupCreateDetails::Builder {
 public:
  typedef GroupCreateDetails Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasUri();
  inline ::capnp::Text::Builder getUri();
  inline void setUri(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initUri(unsigned int size);
  inline void adoptUri(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownUri();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GroupCreate::GroupCreateDetails::Pipeline {
 public:
  typedef GroupCreateDetails Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GlobalWriteState::Reader {
 public:
  typedef GlobalWriteState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasCellsWritten() const;
  inline ::tiledb::sm::serialization::capnp::MapUInt64::Reader getCellsWritten()
      const;

  inline bool hasFragMeta() const;
  inline ::tiledb::sm::serialization::capnp::FragmentMetadata::Reader
  getFragMeta() const;

  inline bool hasLastCellCoords() const;
  inline ::tiledb::sm::serialization::capnp::SingleCoord::Reader
  getLastCellCoords() const;

  inline ::uint64_t getLastHilbertValue() const;

  inline bool hasMultiPartUploadStates() const;
  inline ::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::MultiPartUploadState>::Reader
  getMultiPartUploadStates() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GlobalWriteState::Builder {
 public:
  typedef GlobalWriteState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasCellsWritten();
  inline ::tiledb::sm::serialization::capnp::MapUInt64::Builder
  getCellsWritten();
  inline void setCellsWritten(
      ::tiledb::sm::serialization::capnp::MapUInt64::Reader value);
  inline ::tiledb::sm::serialization::capnp::MapUInt64::Builder
  initCellsWritten();
  inline void adoptCellsWritten(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::MapUInt64>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::MapUInt64>
  disownCellsWritten();

  inline bool hasFragMeta();
  inline ::tiledb::sm::serialization::capnp::FragmentMetadata::Builder
  getFragMeta();
  inline void setFragMeta(
      ::tiledb::sm::serialization::capnp::FragmentMetadata::Reader value);
  inline ::tiledb::sm::serialization::capnp::FragmentMetadata::Builder
  initFragMeta();
  inline void adoptFragMeta(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::FragmentMetadata>&&
          value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::FragmentMetadata>
  disownFragMeta();

  inline bool hasLastCellCoords();
  inline ::tiledb::sm::serialization::capnp::SingleCoord::Builder
  getLastCellCoords();
  inline void setLastCellCoords(
      ::tiledb::sm::serialization::capnp::SingleCoord::Reader value);
  inline ::tiledb::sm::serialization::capnp::SingleCoord::Builder
  initLastCellCoords();
  inline void adoptLastCellCoords(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::SingleCoord>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::SingleCoord>
  disownLastCellCoords();

  inline ::uint64_t getLastHilbertValue();
  inline void setLastHilbertValue(::uint64_t value);

  inline bool hasMultiPartUploadStates();
  inline ::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::MultiPartUploadState>::Builder
  getMultiPartUploadStates();
  inline void setMultiPartUploadStates(
      ::tiledb::sm::serialization::capnp::Map<
          ::capnp::Text,
          ::tiledb::sm::serialization::capnp::MultiPartUploadState>::Reader
          value);
  inline ::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::MultiPartUploadState>::Builder
  initMultiPartUploadStates();
  inline void adoptMultiPartUploadStates(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::Map<
          ::capnp::Text,
          ::tiledb::sm::serialization::capnp::MultiPartUploadState>>&& value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::MultiPartUploadState>>
  disownMultiPartUploadStates();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GlobalWriteState::Pipeline {
 public:
  typedef GlobalWriteState Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::tiledb::sm::serialization::capnp::MapUInt64::Pipeline
  getCellsWritten();
  inline ::tiledb::sm::serialization::capnp::FragmentMetadata::Pipeline
  getFragMeta();
  inline ::tiledb::sm::serialization::capnp::SingleCoord::Pipeline
  getLastCellCoords();
  inline ::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::MultiPartUploadState>::Pipeline
  getMultiPartUploadStates();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SingleCoord::Reader {
 public:
  typedef SingleCoord Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasCoords() const;
  inline ::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Reader
  getCoords() const;

  inline bool hasSizes() const;
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader getSizes()
      const;

  inline bool hasSingleOffset() const;
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
  getSingleOffset() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SingleCoord::Builder {
 public:
  typedef SingleCoord Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasCoords();
  inline ::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Builder
  getCoords();
  inline void setCoords(::capnp::List<
                        ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
                        ::capnp::Kind::LIST>::Reader value);
  inline void setCoords(
      ::kj::ArrayPtr<
          const ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>::Reader>
          value);
  inline ::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Builder
  initCoords(unsigned int size);
  inline void adoptCoords(
      ::capnp::Orphan<::capnp::List<
          ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
          ::capnp::Kind::LIST>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>
  disownCoords();

  inline bool hasSizes();
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  getSizes();
  inline void setSizes(
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setSizes(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder initSizes(
      unsigned int size);
  inline void adoptSizes(
      ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
  disownSizes();

  inline bool hasSingleOffset();
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  getSingleOffset();
  inline void setSingleOffset(
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setSingleOffset(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  initSingleOffset(unsigned int size);
  inline void adoptSingleOffset(
      ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
  disownSingleOffset();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SingleCoord::Pipeline {
 public:
  typedef SingleCoord Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FragmentMetadata::Reader {
 public:
  typedef FragmentMetadata Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasFileSizes() const;
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
  getFileSizes() const;

  inline bool hasFileVarSizes() const;
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
  getFileVarSizes() const;

  inline bool hasFileValiditySizes() const;
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
  getFileValiditySizes() const;

  inline bool hasFragmentUri() const;
  inline ::capnp::Text::Reader getFragmentUri() const;

  inline bool getHasTimestamps() const;

  inline bool getHasDeleteMeta() const;

  inline ::uint64_t getSparseTileNum() const;

  inline ::uint64_t getTileIndexBase() const;

  inline bool hasTileOffsets() const;
  inline ::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Reader
  getTileOffsets() const;

  inline bool hasTileVarOffsets() const;
  inline ::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Reader
  getTileVarOffsets() const;

  inline bool hasTileVarSizes() const;
  inline ::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Reader
  getTileVarSizes() const;

  inline bool hasTileValidityOffsets() const;
  inline ::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Reader
  getTileValidityOffsets() const;

  inline bool hasTileMinBuffer() const;
  inline ::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Reader
  getTileMinBuffer() const;

  inline bool hasTileMinVarBuffer() const;
  inline ::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Reader
  getTileMinVarBuffer() const;

  inline bool hasTileMaxBuffer() const;
  inline ::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Reader
  getTileMaxBuffer() const;

  inline bool hasTileMaxVarBuffer() const;
  inline ::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Reader
  getTileMaxVarBuffer() const;

  inline bool hasTileSums() const;
  inline ::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Reader
  getTileSums() const;

  inline bool hasTileNullCounts() const;
  inline ::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Reader
  getTileNullCounts() const;

  inline bool hasFragmentMins() const;
  inline ::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Reader
  getFragmentMins() const;

  inline bool hasFragmentMaxs() const;
  inline ::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Reader
  getFragmentMaxs() const;

  inline bool hasFragmentSums() const;
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
  getFragmentSums() const;

  inline bool hasFragmentNullCounts() const;
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
  getFragmentNullCounts() const;

  inline ::uint32_t getVersion() const;

  inline bool hasTimestampRange() const;
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
  getTimestampRange() const;

  inline ::uint64_t getLastTileCellNum() const;

  inline bool hasNonEmptyDomain() const;
  inline ::tiledb::sm::serialization::capnp::NonEmptyDomainList::Reader
  getNonEmptyDomain() const;

  inline bool hasRtree() const;
  inline ::capnp::Data::Reader getRtree() const;

  inline bool getHasConsolidatedFooter() const;

  inline bool hasGtOffsets() const;
  inline ::tiledb::sm::serialization::capnp::FragmentMetadata::
      GenericTileOffsets::Reader
      getGtOffsets() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FragmentMetadata::Builder {
 public:
  typedef FragmentMetadata Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasFileSizes();
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  getFileSizes();
  inline void setFileSizes(
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setFileSizes(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  initFileSizes(unsigned int size);
  inline void adoptFileSizes(
      ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
  disownFileSizes();

  inline bool hasFileVarSizes();
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  getFileVarSizes();
  inline void setFileVarSizes(
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setFileVarSizes(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  initFileVarSizes(unsigned int size);
  inline void adoptFileVarSizes(
      ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
  disownFileVarSizes();

  inline bool hasFileValiditySizes();
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  getFileValiditySizes();
  inline void setFileValiditySizes(
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setFileValiditySizes(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  initFileValiditySizes(unsigned int size);
  inline void adoptFileValiditySizes(
      ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
  disownFileValiditySizes();

  inline bool hasFragmentUri();
  inline ::capnp::Text::Builder getFragmentUri();
  inline void setFragmentUri(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initFragmentUri(unsigned int size);
  inline void adoptFragmentUri(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownFragmentUri();

  inline bool getHasTimestamps();
  inline void setHasTimestamps(bool value);

  inline bool getHasDeleteMeta();
  inline void setHasDeleteMeta(bool value);

  inline ::uint64_t getSparseTileNum();
  inline void setSparseTileNum(::uint64_t value);

  inline ::uint64_t getTileIndexBase();
  inline void setTileIndexBase(::uint64_t value);

  inline bool hasTileOffsets();
  inline ::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Builder
  getTileOffsets();
  inline void setTileOffsets(
      ::capnp::List<
          ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
          ::capnp::Kind::LIST>::Reader value);
  inline void setTileOffsets(
      ::kj::ArrayPtr<
          const ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader>
          value);
  inline ::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Builder
  initTileOffsets(unsigned int size);
  inline void adoptTileOffsets(
      ::capnp::Orphan<::capnp::List<
          ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
          ::capnp::Kind::LIST>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>
  disownTileOffsets();

  inline bool hasTileVarOffsets();
  inline ::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Builder
  getTileVarOffsets();
  inline void setTileVarOffsets(
      ::capnp::List<
          ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
          ::capnp::Kind::LIST>::Reader value);
  inline void setTileVarOffsets(
      ::kj::ArrayPtr<
          const ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader>
          value);
  inline ::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Builder
  initTileVarOffsets(unsigned int size);
  inline void adoptTileVarOffsets(
      ::capnp::Orphan<::capnp::List<
          ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
          ::capnp::Kind::LIST>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>
  disownTileVarOffsets();

  inline bool hasTileVarSizes();
  inline ::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Builder
  getTileVarSizes();
  inline void setTileVarSizes(
      ::capnp::List<
          ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
          ::capnp::Kind::LIST>::Reader value);
  inline void setTileVarSizes(
      ::kj::ArrayPtr<
          const ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader>
          value);
  inline ::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Builder
  initTileVarSizes(unsigned int size);
  inline void adoptTileVarSizes(
      ::capnp::Orphan<::capnp::List<
          ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
          ::capnp::Kind::LIST>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>
  disownTileVarSizes();

  inline bool hasTileValidityOffsets();
  inline ::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Builder
  getTileValidityOffsets();
  inline void setTileValidityOffsets(
      ::capnp::List<
          ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
          ::capnp::Kind::LIST>::Reader value);
  inline void setTileValidityOffsets(
      ::kj::ArrayPtr<
          const ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader>
          value);
  inline ::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Builder
  initTileValidityOffsets(unsigned int size);
  inline void adoptTileValidityOffsets(
      ::capnp::Orphan<::capnp::List<
          ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
          ::capnp::Kind::LIST>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>
  disownTileValidityOffsets();

  inline bool hasTileMinBuffer();
  inline ::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Builder
  getTileMinBuffer();
  inline void setTileMinBuffer(
      ::capnp::List<
          ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
          ::capnp::Kind::LIST>::Reader value);
  inline void setTileMinBuffer(
      ::kj::ArrayPtr<
          const ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>::Reader>
          value);
  inline ::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Builder
  initTileMinBuffer(unsigned int size);
  inline void adoptTileMinBuffer(
      ::capnp::Orphan<::capnp::List<
          ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
          ::capnp::Kind::LIST>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>
  disownTileMinBuffer();

  inline bool hasTileMinVarBuffer();
  inline ::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Builder
  getTileMinVarBuffer();
  inline void setTileMinVarBuffer(
      ::capnp::List<
          ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
          ::capnp::Kind::LIST>::Reader value);
  inline void setTileMinVarBuffer(
      ::kj::ArrayPtr<
          const ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>::Reader>
          value);
  inline ::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Builder
  initTileMinVarBuffer(unsigned int size);
  inline void adoptTileMinVarBuffer(
      ::capnp::Orphan<::capnp::List<
          ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
          ::capnp::Kind::LIST>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>
  disownTileMinVarBuffer();

  inline bool hasTileMaxBuffer();
  inline ::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Builder
  getTileMaxBuffer();
  inline void setTileMaxBuffer(
      ::capnp::List<
          ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
          ::capnp::Kind::LIST>::Reader value);
  inline void setTileMaxBuffer(
      ::kj::ArrayPtr<
          const ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>::Reader>
          value);
  inline ::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Builder
  initTileMaxBuffer(unsigned int size);
  inline void adoptTileMaxBuffer(
      ::capnp::Orphan<::capnp::List<
          ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
          ::capnp::Kind::LIST>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>
  disownTileMaxBuffer();

  inline bool hasTileMaxVarBuffer();
  inline ::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Builder
  getTileMaxVarBuffer();
  inline void setTileMaxVarBuffer(
      ::capnp::List<
          ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
          ::capnp::Kind::LIST>::Reader value);
  inline void setTileMaxVarBuffer(
      ::kj::ArrayPtr<
          const ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>::Reader>
          value);
  inline ::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Builder
  initTileMaxVarBuffer(unsigned int size);
  inline void adoptTileMaxVarBuffer(
      ::capnp::Orphan<::capnp::List<
          ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
          ::capnp::Kind::LIST>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>
  disownTileMaxVarBuffer();

  inline bool hasTileSums();
  inline ::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Builder
  getTileSums();
  inline void setTileSums(::capnp::List<
                          ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
                          ::capnp::Kind::LIST>::Reader value);
  inline void setTileSums(
      ::kj::ArrayPtr<
          const ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>::Reader>
          value);
  inline ::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Builder
  initTileSums(unsigned int size);
  inline void adoptTileSums(
      ::capnp::Orphan<::capnp::List<
          ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
          ::capnp::Kind::LIST>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>
  disownTileSums();

  inline bool hasTileNullCounts();
  inline ::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Builder
  getTileNullCounts();
  inline void setTileNullCounts(
      ::capnp::List<
          ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
          ::capnp::Kind::LIST>::Reader value);
  inline void setTileNullCounts(
      ::kj::ArrayPtr<
          const ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader>
          value);
  inline ::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Builder
  initTileNullCounts(unsigned int size);
  inline void adoptTileNullCounts(
      ::capnp::Orphan<::capnp::List<
          ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
          ::capnp::Kind::LIST>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>
  disownTileNullCounts();

  inline bool hasFragmentMins();
  inline ::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Builder
  getFragmentMins();
  inline void setFragmentMins(
      ::capnp::List<
          ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
          ::capnp::Kind::LIST>::Reader value);
  inline void setFragmentMins(
      ::kj::ArrayPtr<
          const ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>::Reader>
          value);
  inline ::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Builder
  initFragmentMins(unsigned int size);
  inline void adoptFragmentMins(
      ::capnp::Orphan<::capnp::List<
          ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
          ::capnp::Kind::LIST>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>
  disownFragmentMins();

  inline bool hasFragmentMaxs();
  inline ::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Builder
  getFragmentMaxs();
  inline void setFragmentMaxs(
      ::capnp::List<
          ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
          ::capnp::Kind::LIST>::Reader value);
  inline void setFragmentMaxs(
      ::kj::ArrayPtr<
          const ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>::Reader>
          value);
  inline ::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>::Builder
  initFragmentMaxs(unsigned int size);
  inline void adoptFragmentMaxs(
      ::capnp::Orphan<::capnp::List<
          ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
          ::capnp::Kind::LIST>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>
  disownFragmentMaxs();

  inline bool hasFragmentSums();
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  getFragmentSums();
  inline void setFragmentSums(
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setFragmentSums(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  initFragmentSums(unsigned int size);
  inline void adoptFragmentSums(
      ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
  disownFragmentSums();

  inline bool hasFragmentNullCounts();
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  getFragmentNullCounts();
  inline void setFragmentNullCounts(
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setFragmentNullCounts(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  initFragmentNullCounts(unsigned int size);
  inline void adoptFragmentNullCounts(
      ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
  disownFragmentNullCounts();

  inline ::uint32_t getVersion();
  inline void setVersion(::uint32_t value);

  inline bool hasTimestampRange();
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  getTimestampRange();
  inline void setTimestampRange(
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTimestampRange(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  initTimestampRange(unsigned int size);
  inline void adoptTimestampRange(
      ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
  disownTimestampRange();

  inline ::uint64_t getLastTileCellNum();
  inline void setLastTileCellNum(::uint64_t value);

  inline bool hasNonEmptyDomain();
  inline ::tiledb::sm::serialization::capnp::NonEmptyDomainList::Builder
  getNonEmptyDomain();
  inline void setNonEmptyDomain(
      ::tiledb::sm::serialization::capnp::NonEmptyDomainList::Reader value);
  inline ::tiledb::sm::serialization::capnp::NonEmptyDomainList::Builder
  initNonEmptyDomain();
  inline void adoptNonEmptyDomain(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::NonEmptyDomainList>&&
          value);
  inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::NonEmptyDomainList>
  disownNonEmptyDomain();

  inline bool hasRtree();
  inline ::capnp::Data::Builder getRtree();
  inline void setRtree(::capnp::Data::Reader value);
  inline ::capnp::Data::Builder initRtree(unsigned int size);
  inline void adoptRtree(::capnp::Orphan<::capnp::Data>&& value);
  inline ::capnp::Orphan<::capnp::Data> disownRtree();

  inline bool getHasConsolidatedFooter();
  inline void setHasConsolidatedFooter(bool value);

  inline bool hasGtOffsets();
  inline ::tiledb::sm::serialization::capnp::FragmentMetadata::
      GenericTileOffsets::Builder
      getGtOffsets();
  inline void setGtOffsets(
      ::tiledb::sm::serialization::capnp::FragmentMetadata::GenericTileOffsets::
          Reader value);
  inline ::tiledb::sm::serialization::capnp::FragmentMetadata::
      GenericTileOffsets::Builder
      initGtOffsets();
  inline void adoptGtOffsets(
      ::capnp::Orphan<::tiledb::sm::serialization::capnp::FragmentMetadata::
                          GenericTileOffsets>&& value);
  inline ::capnp::Orphan<
      ::tiledb::sm::serialization::capnp::FragmentMetadata::GenericTileOffsets>
  disownGtOffsets();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FragmentMetadata::Pipeline {
 public:
  typedef FragmentMetadata Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::tiledb::sm::serialization::capnp::NonEmptyDomainList::Pipeline
  getNonEmptyDomain();
  inline ::tiledb::sm::serialization::capnp::FragmentMetadata::
      GenericTileOffsets::Pipeline
      getGtOffsets();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FragmentMetadata::GenericTileOffsets::Reader {
 public:
  typedef GenericTileOffsets Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline ::uint64_t getRtree() const;

  inline bool hasTileOffsets() const;
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
  getTileOffsets() const;

  inline bool hasTileVarOffsets() const;
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
  getTileVarOffsets() const;

  inline bool hasTileVarSizes() const;
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
  getTileVarSizes() const;

  inline bool hasTileValidityOffsets() const;
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
  getTileValidityOffsets() const;

  inline bool hasTileMinOffsets() const;
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
  getTileMinOffsets() const;

  inline bool hasTileMaxOffsets() const;
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
  getTileMaxOffsets() const;

  inline bool hasTileSumOffsets() const;
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
  getTileSumOffsets() const;

  inline bool hasTileNullCountOffsets() const;
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
  getTileNullCountOffsets() const;

  inline ::uint64_t getFragmentMinMaxSumNullCountOffset() const;

  inline ::uint64_t getProcessedConditionsOffsets() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FragmentMetadata::GenericTileOffsets::Builder {
 public:
  typedef GenericTileOffsets Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline ::uint64_t getRtree();
  inline void setRtree(::uint64_t value);

  inline bool hasTileOffsets();
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  getTileOffsets();
  inline void setTileOffsets(
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTileOffsets(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  initTileOffsets(unsigned int size);
  inline void adoptTileOffsets(
      ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
  disownTileOffsets();

  inline bool hasTileVarOffsets();
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  getTileVarOffsets();
  inline void setTileVarOffsets(
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTileVarOffsets(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  initTileVarOffsets(unsigned int size);
  inline void adoptTileVarOffsets(
      ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
  disownTileVarOffsets();

  inline bool hasTileVarSizes();
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  getTileVarSizes();
  inline void setTileVarSizes(
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTileVarSizes(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  initTileVarSizes(unsigned int size);
  inline void adoptTileVarSizes(
      ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
  disownTileVarSizes();

  inline bool hasTileValidityOffsets();
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  getTileValidityOffsets();
  inline void setTileValidityOffsets(
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTileValidityOffsets(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  initTileValidityOffsets(unsigned int size);
  inline void adoptTileValidityOffsets(
      ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
  disownTileValidityOffsets();

  inline bool hasTileMinOffsets();
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  getTileMinOffsets();
  inline void setTileMinOffsets(
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTileMinOffsets(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  initTileMinOffsets(unsigned int size);
  inline void adoptTileMinOffsets(
      ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
  disownTileMinOffsets();

  inline bool hasTileMaxOffsets();
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  getTileMaxOffsets();
  inline void setTileMaxOffsets(
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTileMaxOffsets(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  initTileMaxOffsets(unsigned int size);
  inline void adoptTileMaxOffsets(
      ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
  disownTileMaxOffsets();

  inline bool hasTileSumOffsets();
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  getTileSumOffsets();
  inline void setTileSumOffsets(
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTileSumOffsets(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  initTileSumOffsets(unsigned int size);
  inline void adoptTileSumOffsets(
      ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
  disownTileSumOffsets();

  inline bool hasTileNullCountOffsets();
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  getTileNullCountOffsets();
  inline void setTileNullCountOffsets(
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTileNullCountOffsets(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  initTileNullCountOffsets(unsigned int size);
  inline void adoptTileNullCountOffsets(
      ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
  disownTileNullCountOffsets();

  inline ::uint64_t getFragmentMinMaxSumNullCountOffset();
  inline void setFragmentMinMaxSumNullCountOffset(::uint64_t value);

  inline ::uint64_t getProcessedConditionsOffsets();
  inline void setProcessedConditionsOffsets(::uint64_t value);

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FragmentMetadata::GenericTileOffsets::Pipeline {
 public:
  typedef GenericTileOffsets Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MultiPartUploadState::Reader {
 public:
  typedef MultiPartUploadState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline ::uint64_t getPartNumber() const;

  inline bool hasUploadId() const;
  inline ::capnp::Text::Reader getUploadId() const;

  inline bool hasStatus() const;
  inline ::capnp::Text::Reader getStatus() const;

  inline bool hasCompletedParts() const;
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::CompletedPart,
      ::capnp::Kind::STRUCT>::Reader
  getCompletedParts() const;

  inline bool hasBufferedChunks() const;
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::BufferedChunk,
      ::capnp::Kind::STRUCT>::Reader
  getBufferedChunks() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MultiPartUploadState::Builder {
 public:
  typedef MultiPartUploadState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline ::uint64_t getPartNumber();
  inline void setPartNumber(::uint64_t value);

  inline bool hasUploadId();
  inline ::capnp::Text::Builder getUploadId();
  inline void setUploadId(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initUploadId(unsigned int size);
  inline void adoptUploadId(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownUploadId();

  inline bool hasStatus();
  inline ::capnp::Text::Builder getStatus();
  inline void setStatus(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initStatus(unsigned int size);
  inline void adoptStatus(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownStatus();

  inline bool hasCompletedParts();
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::CompletedPart,
      ::capnp::Kind::STRUCT>::Builder
  getCompletedParts();
  inline void setCompletedParts(
      ::capnp::List<
          ::tiledb::sm::serialization::capnp::CompletedPart,
          ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::CompletedPart,
      ::capnp::Kind::STRUCT>::Builder
  initCompletedParts(unsigned int size);
  inline void adoptCompletedParts(
      ::capnp::Orphan<::capnp::List<
          ::tiledb::sm::serialization::capnp::CompletedPart,
          ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::tiledb::sm::serialization::capnp::CompletedPart,
      ::capnp::Kind::STRUCT>>
  disownCompletedParts();

  inline bool hasBufferedChunks();
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::BufferedChunk,
      ::capnp::Kind::STRUCT>::Builder
  getBufferedChunks();
  inline void setBufferedChunks(
      ::capnp::List<
          ::tiledb::sm::serialization::capnp::BufferedChunk,
          ::capnp::Kind::STRUCT>::Reader value);
  inline ::capnp::List<
      ::tiledb::sm::serialization::capnp::BufferedChunk,
      ::capnp::Kind::STRUCT>::Builder
  initBufferedChunks(unsigned int size);
  inline void adoptBufferedChunks(
      ::capnp::Orphan<::capnp::List<
          ::tiledb::sm::serialization::capnp::BufferedChunk,
          ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan<::capnp::List<
      ::tiledb::sm::serialization::capnp::BufferedChunk,
      ::capnp::Kind::STRUCT>>
  disownBufferedChunks();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MultiPartUploadState::Pipeline {
 public:
  typedef MultiPartUploadState Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CompletedPart::Reader {
 public:
  typedef CompletedPart Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasETag() const;
  inline ::capnp::Text::Reader getETag() const;

  inline ::uint64_t getPartNumber() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CompletedPart::Builder {
 public:
  typedef CompletedPart Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasETag();
  inline ::capnp::Text::Builder getETag();
  inline void setETag(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initETag(unsigned int size);
  inline void adoptETag(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownETag();

  inline ::uint64_t getPartNumber();
  inline void setPartNumber(::uint64_t value);

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CompletedPart::Pipeline {
 public:
  typedef CompletedPart Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WrittenFragmentInfo::Reader {
 public:
  typedef WrittenFragmentInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasUri() const;
  inline ::capnp::Text::Reader getUri() const;

  inline bool hasTimestampRange() const;
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
  getTimestampRange() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WrittenFragmentInfo::Builder {
 public:
  typedef WrittenFragmentInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasUri();
  inline ::capnp::Text::Builder getUri();
  inline void setUri(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initUri(unsigned int size);
  inline void adoptUri(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownUri();

  inline bool hasTimestampRange();
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  getTimestampRange();
  inline void setTimestampRange(
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTimestampRange(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
  initTimestampRange(unsigned int size);
  inline void adoptTimestampRange(
      ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
  disownTimestampRange();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WrittenFragmentInfo::Pipeline {
 public:
  typedef WrittenFragmentInfo Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class BufferedChunk::Reader {
 public:
  typedef BufferedChunk Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasUri() const;
  inline ::capnp::Text::Reader getUri() const;

  inline ::uint64_t getSize() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BufferedChunk::Builder {
 public:
  typedef BufferedChunk Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasUri();
  inline ::capnp::Text::Builder getUri();
  inline void setUri(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initUri(unsigned int size);
  inline void adoptUri(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownUri();

  inline ::uint64_t getSize();
  inline void setSize(::uint64_t value);

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BufferedChunk::Pipeline {
 public:
  typedef BufferedChunk Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool DomainArray::Reader::hasInt8() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool DomainArray::Builder::hasInt8() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int8_t, ::capnp::Kind::PRIMITIVE>::Reader
DomainArray::Reader::getInt8() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::int8_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int8_t, ::capnp::Kind::PRIMITIVE>::Builder
DomainArray::Builder::getInt8() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::int8_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DomainArray::Builder::setInt8(
    ::capnp::List<::int8_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::int8_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline void DomainArray::Builder::setInt8(
    ::kj::ArrayPtr<const ::int8_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::int8_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::int8_t, ::capnp::Kind::PRIMITIVE>::Builder
DomainArray::Builder::initInt8(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::int8_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          size);
}
inline void DomainArray::Builder::adoptInt8(
    ::capnp::Orphan<::capnp::List<::int8_t, ::capnp::Kind::PRIMITIVE>>&&
        value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::int8_t, ::capnp::Kind::PRIMITIVE>>::adopt(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int8_t, ::capnp::Kind::PRIMITIVE>>
DomainArray::Builder::disownInt8() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::int8_t, ::capnp::Kind::PRIMITIVE>>::disown(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool DomainArray::Reader::hasUint8() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool DomainArray::Builder::hasUint8() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>::Reader
DomainArray::Reader::getUint8() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>::Builder
DomainArray::Builder::getUint8() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DomainArray::Builder::setUint8(
    ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline void DomainArray::Builder::setUint8(
    ::kj::ArrayPtr<const ::uint8_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>::Builder
DomainArray::Builder::initUint8(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          size);
}
inline void DomainArray::Builder::adoptUint8(
    ::capnp::Orphan<::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>>&&
        value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>>::adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>>
DomainArray::Builder::disownUint8() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DomainArray::Reader::hasInt16() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool DomainArray::Builder::hasInt16() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>::Reader
DomainArray::Reader::getInt16() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>::Builder
DomainArray::Builder::getInt16() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void DomainArray::Builder::setInt16(
    ::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          value);
}
inline void DomainArray::Builder::setInt16(
    ::kj::ArrayPtr<const ::int16_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>::Builder
DomainArray::Builder::initInt16(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          size);
}
inline void DomainArray::Builder::adoptInt16(
    ::capnp::Orphan<::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>>&&
        value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>>::adopt(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>>
DomainArray::Builder::disownInt16() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::int16_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool DomainArray::Reader::hasUint16() const {
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool DomainArray::Builder::hasUint16() {
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>::Reader
DomainArray::Reader::getUint16() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>::Builder
DomainArray::Builder::getUint16() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void DomainArray::Builder::setUint16(
    ::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          value);
}
inline void DomainArray::Builder::setUint16(
    ::kj::ArrayPtr<const ::uint16_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>::Builder
DomainArray::Builder::initUint16(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          size);
}
inline void DomainArray::Builder::adoptUint16(
    ::capnp::Orphan<::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>>
DomainArray::Builder::disownUint16() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::uint16_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool DomainArray::Reader::hasInt32() const {
  return !_reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline bool DomainArray::Builder::hasInt32() {
  return !_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>::Reader
DomainArray::Reader::getInt32() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>::Builder
DomainArray::Builder::getInt32() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void DomainArray::Builder::setInt32(
    ::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
          value);
}
inline void DomainArray::Builder::setInt32(
    ::kj::ArrayPtr<const ::int32_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>::Builder
DomainArray::Builder::initInt32(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
          size);
}
inline void DomainArray::Builder::adoptInt32(
    ::capnp::Orphan<::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>>&&
        value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>>::adopt(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>>
DomainArray::Builder::disownInt32() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool DomainArray::Reader::hasUint32() const {
  return !_reader.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS)
              .isNull();
}
inline bool DomainArray::Builder::hasUint32() {
  return !_builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>::Reader
DomainArray::Reader::getUint32() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>::Builder
DomainArray::Builder::getUint32() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void DomainArray::Builder::setUint32(
    ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
          value);
}
inline void DomainArray::Builder::setUint32(
    ::kj::ArrayPtr<const ::uint32_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>::Builder
DomainArray::Builder::initUint32(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
          size);
}
inline void DomainArray::Builder::adoptUint32(
    ::capnp::Orphan<::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>
DomainArray::Builder::disownUint32() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool DomainArray::Reader::hasInt64() const {
  return !_reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline bool DomainArray::Builder::hasInt64() {
  return !_builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>::Reader
DomainArray::Reader::getInt64() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>::Builder
DomainArray::Builder::getInt64() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void DomainArray::Builder::setInt64(
    ::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
          value);
}
inline void DomainArray::Builder::setInt64(
    ::kj::ArrayPtr<const ::int64_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>::Builder
DomainArray::Builder::initInt64(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
          size);
}
inline void DomainArray::Builder::adoptInt64(
    ::capnp::Orphan<::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>>&&
        value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>>::adopt(
          _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>>
DomainArray::Builder::disownInt64() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::int64_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool DomainArray::Reader::hasUint64() const {
  return !_reader.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS)
              .isNull();
}
inline bool DomainArray::Builder::hasUint64() {
  return !_builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
DomainArray::Reader::getUint64() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
DomainArray::Builder::getUint64() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void DomainArray::Builder::setUint64(
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
          value);
}
inline void DomainArray::Builder::setUint64(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
DomainArray::Builder::initUint64(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
          size);
}
inline void DomainArray::Builder::adoptUint64(
    ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
DomainArray::Builder::disownUint64() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool DomainArray::Reader::hasFloat32() const {
  return !_reader.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS)
              .isNull();
}
inline bool DomainArray::Builder::hasFloat32() {
  return !_builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<float, ::capnp::Kind::PRIMITIVE>::Reader
DomainArray::Reader::getFloat32() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<float, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline ::capnp::List<float, ::capnp::Kind::PRIMITIVE>::Builder
DomainArray::Builder::getFloat32() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<float, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void DomainArray::Builder::setFloat32(
    ::capnp::List<float, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<float, ::capnp::Kind::PRIMITIVE>>::
      set(_builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS),
          value);
}
inline void DomainArray::Builder::setFloat32(
    ::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers<::capnp::List<float, ::capnp::Kind::PRIMITIVE>>::
      set(_builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<float, ::capnp::Kind::PRIMITIVE>::Builder
DomainArray::Builder::initFloat32(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<float, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS),
          size);
}
inline void DomainArray::Builder::adoptFloat32(
    ::capnp::Orphan<::capnp::List<float, ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<float, ::capnp::Kind::PRIMITIVE>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<float, ::capnp::Kind::PRIMITIVE>>
DomainArray::Builder::disownFloat32() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<float, ::capnp::Kind::PRIMITIVE>>::disown(
          _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool DomainArray::Reader::hasFloat64() const {
  return !_reader.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS)
              .isNull();
}
inline bool DomainArray::Builder::hasFloat64() {
  return !_builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Reader
DomainArray::Reader::getFloat64() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Builder
DomainArray::Builder::getFloat64() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void DomainArray::Builder::setFloat64(
    ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::
      set(_builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS),
          value);
}
inline void DomainArray::Builder::setFloat64(
    ::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::
      set(_builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<double, ::capnp::Kind::PRIMITIVE>::Builder
DomainArray::Builder::initFloat64(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS),
          size);
}
inline void DomainArray::Builder::adoptFloat64(
    ::capnp::Orphan<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>
DomainArray::Builder::disownFloat64() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<double, ::capnp::Kind::PRIMITIVE>>::disown(
          _builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool KV::Reader::hasKey() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool KV::Builder::hasKey() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader KV::Reader::getKey() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder KV::Builder::getKey() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void KV::Builder::setKey(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder KV::Builder::initKey(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void KV::Builder::adoptKey(::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> KV::Builder::disownKey() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool KV::Reader::hasValue() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool KV::Builder::hasValue() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader KV::Reader::getValue() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder KV::Builder::getValue() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void KV::Builder::setValue(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder KV::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void KV::Builder::adoptValue(::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> KV::Builder::disownValue() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Config::Reader::hasEntries() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Config::Builder::hasEntries() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::
    List<::tiledb::sm::serialization::capnp::KV, ::capnp::Kind::STRUCT>::Reader
    Config::Reader::getEntries() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::KV,
      ::capnp::Kind::STRUCT>>::get(_reader
                                       .getPointerField(
                                           ::capnp::bounded<0>() *
                                           ::capnp::POINTERS));
}
inline ::capnp::
    List<::tiledb::sm::serialization::capnp::KV, ::capnp::Kind::STRUCT>::Builder
    Config::Builder::getEntries() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::KV,
      ::capnp::Kind::STRUCT>>::get(_builder
                                       .getPointerField(
                                           ::capnp::bounded<0>() *
                                           ::capnp::POINTERS));
}
inline void Config::Builder::setEntries(::capnp::List<
                                        ::tiledb::sm::serialization::capnp::KV,
                                        ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::KV,
      ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::
    List<::tiledb::sm::serialization::capnp::KV, ::capnp::Kind::STRUCT>::Builder
    Config::Builder::initEntries(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::KV,
      ::capnp::Kind::STRUCT>>::
      init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          size);
}
inline void Config::Builder::adoptEntries(
    ::capnp::Orphan<::capnp::List<
        ::tiledb::sm::serialization::capnp::KV,
        ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::KV,
      ::capnp::Kind::STRUCT>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::tiledb::sm::serialization::capnp::KV,
    ::capnp::Kind::STRUCT>>
Config::Builder::disownEntries() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::KV,
      ::capnp::Kind::STRUCT>>::disown(_builder
                                          .getPointerField(
                                              ::capnp::bounded<0>() *
                                              ::capnp::POINTERS));
}

inline ::uint64_t Array::Reader::getEndTimestamp() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::uint64_t Array::Builder::getEndTimestamp() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Array::Builder::setEndTimestamp(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Array::Reader::hasQueryType() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Array::Builder::hasQueryType() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Array::Reader::getQueryType() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Array::Builder::getQueryType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Array::Builder::setQueryType(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Array::Builder::initQueryType(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void Array::Builder::adoptQueryType(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Array::Builder::disownQueryType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Array::Reader::hasUri() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Array::Builder::hasUri() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Array::Reader::getUri() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Array::Builder::getUri() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Array::Builder::setUri(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Array::Builder::initUri(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void Array::Builder::adoptUri(::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Array::Builder::disownUri() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline ::uint64_t Array::Reader::getStartTimestamp() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::uint64_t Array::Builder::getStartTimestamp() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Array::Builder::setStartTimestamp(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Array::Reader::hasArraySchemaLatest() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Array::Builder::hasArraySchemaLatest() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::ArraySchema::Reader
Array::Reader::getArraySchemaLatest() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ArraySchema>::get(
          _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::ArraySchema::Builder
Array::Builder::getArraySchemaLatest() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ArraySchema>::get(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::ArraySchema::Pipeline
Array::Pipeline::getArraySchemaLatest() {
  return ::tiledb::sm::serialization::capnp::ArraySchema::Pipeline(
      _typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Array::Builder::setArraySchemaLatest(
    ::tiledb::sm::serialization::capnp::ArraySchema::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::ArraySchema>::
      set(_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::ArraySchema::Builder
Array::Builder::initArraySchemaLatest() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ArraySchema>::init(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Array::Builder::adoptArraySchemaLatest(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::ArraySchema>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::ArraySchema>::
      adopt(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::ArraySchema>
Array::Builder::disownArraySchemaLatest() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ArraySchema>::disown(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Array::Reader::hasArraySchemasAll() const {
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Array::Builder::hasArraySchemasAll() {
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::
    Map<::capnp::Text, ::tiledb::sm::serialization::capnp::ArraySchema>::Reader
    Array::Reader::getArraySchemasAll() const {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::ArraySchema>>::
      get(_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::
    Map<::capnp::Text, ::tiledb::sm::serialization::capnp::ArraySchema>::Builder
    Array::Builder::getArraySchemasAll() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::ArraySchema>>::
      get(_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::Map<
    ::capnp::Text,
    ::tiledb::sm::serialization::capnp::ArraySchema>::Pipeline
Array::Pipeline::getArraySchemasAll() {
  return ::tiledb::sm::serialization::capnp::
      Map<::capnp::Text, ::tiledb::sm::serialization::capnp::ArraySchema>::
          Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Array::Builder::setArraySchemasAll(
    ::tiledb::sm::serialization::capnp::Map<
        ::capnp::Text,
        ::tiledb::sm::serialization::capnp::ArraySchema>::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::ArraySchema>>::
      set(_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::
    Map<::capnp::Text, ::tiledb::sm::serialization::capnp::ArraySchema>::Builder
    Array::Builder::initArraySchemasAll() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::ArraySchema>>::
      init(_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Array::Builder::adoptArraySchemasAll(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::Map<
        ::capnp::Text,
        ::tiledb::sm::serialization::capnp::ArraySchema>>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::ArraySchema>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Map<
    ::capnp::Text,
    ::tiledb::sm::serialization::capnp::ArraySchema>>
Array::Builder::disownArraySchemasAll() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::ArraySchema>>::
      disown(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Array::Reader::hasNonEmptyDomain() const {
  return !_reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Array::Builder::hasNonEmptyDomain() {
  return !_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::NonEmptyDomainList::Reader
Array::Reader::getNonEmptyDomain() const {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::NonEmptyDomainList>::
      get(_reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::NonEmptyDomainList::Builder
Array::Builder::getNonEmptyDomain() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::NonEmptyDomainList>::
      get(_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::NonEmptyDomainList::Pipeline
Array::Pipeline::getNonEmptyDomain() {
  return ::tiledb::sm::serialization::capnp::NonEmptyDomainList::Pipeline(
      _typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Array::Builder::setNonEmptyDomain(
    ::tiledb::sm::serialization::capnp::NonEmptyDomainList::Reader value) {
  ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::NonEmptyDomainList>::
      set(_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::NonEmptyDomainList::Builder
Array::Builder::initNonEmptyDomain() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::NonEmptyDomainList>::
      init(_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Array::Builder::adoptNonEmptyDomain(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::NonEmptyDomainList>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::NonEmptyDomainList>::
      adopt(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::NonEmptyDomainList>
Array::Builder::disownNonEmptyDomain() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::NonEmptyDomainList>::
      disown(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Array::Reader::hasArrayMetadata() const {
  return !_reader.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Array::Builder::hasArrayMetadata() {
  return !_builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::ArrayMetadata::Reader
Array::Reader::getArrayMetadata() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ArrayMetadata>::get(
          _reader.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::ArrayMetadata::Builder
Array::Builder::getArrayMetadata() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ArrayMetadata>::get(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::ArrayMetadata::Pipeline
Array::Pipeline::getArrayMetadata() {
  return ::tiledb::sm::serialization::capnp::ArrayMetadata::Pipeline(
      _typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void Array::Builder::setArrayMetadata(
    ::tiledb::sm::serialization::capnp::ArrayMetadata::Reader value) {
  ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ArrayMetadata>::set(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::ArrayMetadata::Builder
Array::Builder::initArrayMetadata() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ArrayMetadata>::init(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Array::Builder::adoptArrayMetadata(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::ArrayMetadata>&&
        value) {
  ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ArrayMetadata>::adopt(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::ArrayMetadata>
Array::Builder::disownArrayMetadata() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ArrayMetadata>::disown(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Array::Reader::hasArrayDirectory() const {
  return !_reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Array::Builder::hasArrayDirectory() {
  return !_builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::ArrayDirectory::Reader
Array::Reader::getArrayDirectory() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ArrayDirectory>::get(
          _reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::ArrayDirectory::Builder
Array::Builder::getArrayDirectory() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ArrayDirectory>::get(
          _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::ArrayDirectory::Pipeline
Array::Pipeline::getArrayDirectory() {
  return ::tiledb::sm::serialization::capnp::ArrayDirectory::Pipeline(
      _typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void Array::Builder::setArrayDirectory(
    ::tiledb::sm::serialization::capnp::ArrayDirectory::Reader value) {
  ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ArrayDirectory>::set(
          _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::ArrayDirectory::Builder
Array::Builder::initArrayDirectory() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ArrayDirectory>::init(
          _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Array::Builder::adoptArrayDirectory(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::ArrayDirectory>&&
        value) {
  ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ArrayDirectory>::adopt(
          _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::ArrayDirectory>
Array::Builder::disownArrayDirectory() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::ArrayDirectory>::
      disown(
          _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Array::Reader::hasFragmentMetadataAll() const {
  return !_reader.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Array::Builder::hasFragmentMetadataAll() {
  return !_builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::FragmentMetadata,
    ::capnp::Kind::STRUCT>::Reader
Array::Reader::getFragmentMetadataAll() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::FragmentMetadata,
      ::capnp::Kind::STRUCT>>::get(_reader
                                       .getPointerField(
                                           ::capnp::bounded<7>() *
                                           ::capnp::POINTERS));
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::FragmentMetadata,
    ::capnp::Kind::STRUCT>::Builder
Array::Builder::getFragmentMetadataAll() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::FragmentMetadata,
      ::capnp::Kind::STRUCT>>::get(_builder
                                       .getPointerField(
                                           ::capnp::bounded<7>() *
                                           ::capnp::POINTERS));
}
inline void Array::Builder::setFragmentMetadataAll(
    ::capnp::List<
        ::tiledb::sm::serialization::capnp::FragmentMetadata,
        ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::FragmentMetadata,
      ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::FragmentMetadata,
    ::capnp::Kind::STRUCT>::Builder
Array::Builder::initFragmentMetadataAll(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::FragmentMetadata,
      ::capnp::Kind::STRUCT>>::
      init(
          _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
          size);
}
inline void Array::Builder::adoptFragmentMetadataAll(
    ::capnp::Orphan<::capnp::List<
        ::tiledb::sm::serialization::capnp::FragmentMetadata,
        ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::FragmentMetadata,
      ::capnp::Kind::STRUCT>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::tiledb::sm::serialization::capnp::FragmentMetadata,
    ::capnp::Kind::STRUCT>>
Array::Builder::disownFragmentMetadataAll() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::FragmentMetadata,
      ::capnp::Kind::STRUCT>>::disown(_builder
                                          .getPointerField(
                                              ::capnp::bounded<7>() *
                                              ::capnp::POINTERS));
}

inline ::uint64_t Array::Reader::getOpenedAtEndTimestamp() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline ::uint64_t Array::Builder::getOpenedAtEndTimestamp() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Array::Builder::setOpenedAtEndTimestamp(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool ArrayOpen::Reader::hasConfig() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArrayOpen::Builder::hasConfig() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::Config::Reader
ArrayOpen::Reader::getConfig() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Config>::get(
          _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::Config::Builder
ArrayOpen::Builder::getConfig() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Config>::get(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::Config::Pipeline
ArrayOpen::Pipeline::getConfig() {
  return ::tiledb::sm::serialization::capnp::Config::Pipeline(
      _typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ArrayOpen::Builder::setConfig(
    ::tiledb::sm::serialization::capnp::Config::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Config>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::tiledb::sm::serialization::capnp::Config::Builder
ArrayOpen::Builder::initConfig() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Config>::init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ArrayOpen::Builder::adoptConfig(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::Config>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Config>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Config>
ArrayOpen::Builder::disownConfig() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Config>::disown(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ArrayOpen::Reader::hasQueryType() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArrayOpen::Builder::hasQueryType() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader ArrayOpen::Reader::getQueryType() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder ArrayOpen::Builder::getQueryType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ArrayOpen::Builder::setQueryType(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder ArrayOpen::Builder::initQueryType(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void ArrayOpen::Builder::adoptQueryType(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> ArrayOpen::Builder::disownQueryType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ArraySchema::Reader::hasArrayType() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchema::Builder::hasArrayType() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader ArraySchema::Reader::getArrayType() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder ArraySchema::Builder::getArrayType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ArraySchema::Builder::setArrayType(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder ArraySchema::Builder::initArrayType(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void ArraySchema::Builder::adoptArrayType(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> ArraySchema::Builder::disownArrayType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ArraySchema::Reader::hasAttributes() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchema::Builder::hasAttributes() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::Attribute,
    ::capnp::Kind::STRUCT>::Reader
ArraySchema::Reader::getAttributes() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Attribute,
      ::capnp::Kind::STRUCT>>::get(_reader
                                       .getPointerField(
                                           ::capnp::bounded<1>() *
                                           ::capnp::POINTERS));
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::Attribute,
    ::capnp::Kind::STRUCT>::Builder
ArraySchema::Builder::getAttributes() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Attribute,
      ::capnp::Kind::STRUCT>>::get(_builder
                                       .getPointerField(
                                           ::capnp::bounded<1>() *
                                           ::capnp::POINTERS));
}
inline void ArraySchema::Builder::setAttributes(
    ::capnp::List<
        ::tiledb::sm::serialization::capnp::Attribute,
        ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Attribute,
      ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::Attribute,
    ::capnp::Kind::STRUCT>::Builder
ArraySchema::Builder::initAttributes(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Attribute,
      ::capnp::Kind::STRUCT>>::
      init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          size);
}
inline void ArraySchema::Builder::adoptAttributes(
    ::capnp::Orphan<::capnp::List<
        ::tiledb::sm::serialization::capnp::Attribute,
        ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Attribute,
      ::capnp::Kind::STRUCT>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::tiledb::sm::serialization::capnp::Attribute,
    ::capnp::Kind::STRUCT>>
ArraySchema::Builder::disownAttributes() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Attribute,
      ::capnp::Kind::STRUCT>>::disown(_builder
                                          .getPointerField(
                                              ::capnp::bounded<1>() *
                                              ::capnp::POINTERS));
}

inline ::uint64_t ArraySchema::Reader::getCapacity() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::uint64_t ArraySchema::Builder::getCapacity() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ArraySchema::Builder::setCapacity(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ArraySchema::Reader::hasCellOrder() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchema::Builder::hasCellOrder() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader ArraySchema::Reader::getCellOrder() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder ArraySchema::Builder::getCellOrder() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ArraySchema::Builder::setCellOrder(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder ArraySchema::Builder::initCellOrder(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void ArraySchema::Builder::adoptCellOrder(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> ArraySchema::Builder::disownCellOrder() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ArraySchema::Reader::hasCoordsFilterPipeline() const {
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchema::Builder::hasCoordsFilterPipeline() {
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::FilterPipeline::Reader
ArraySchema::Reader::getCoordsFilterPipeline() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::FilterPipeline>::get(
          _reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::FilterPipeline::Builder
ArraySchema::Builder::getCoordsFilterPipeline() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::FilterPipeline>::get(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::FilterPipeline::Pipeline
ArraySchema::Pipeline::getCoordsFilterPipeline() {
  return ::tiledb::sm::serialization::capnp::FilterPipeline::Pipeline(
      _typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void ArraySchema::Builder::setCoordsFilterPipeline(
    ::tiledb::sm::serialization::capnp::FilterPipeline::Reader value) {
  ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::FilterPipeline>::set(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::FilterPipeline::Builder
ArraySchema::Builder::initCoordsFilterPipeline() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::FilterPipeline>::init(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ArraySchema::Builder::adoptCoordsFilterPipeline(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::FilterPipeline>&&
        value) {
  ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::FilterPipeline>::adopt(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::FilterPipeline>
ArraySchema::Builder::disownCoordsFilterPipeline() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::FilterPipeline>::
      disown(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool ArraySchema::Reader::hasDomain() const {
  return !_reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchema::Builder::hasDomain() {
  return !_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::Domain::Reader
ArraySchema::Reader::getDomain() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Domain>::get(
          _reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::Domain::Builder
ArraySchema::Builder::getDomain() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Domain>::get(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::Domain::Pipeline
ArraySchema::Pipeline::getDomain() {
  return ::tiledb::sm::serialization::capnp::Domain::Pipeline(
      _typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void ArraySchema::Builder::setDomain(
    ::tiledb::sm::serialization::capnp::Domain::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Domain>::set(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      value);
}
inline ::tiledb::sm::serialization::capnp::Domain::Builder
ArraySchema::Builder::initDomain() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Domain>::init(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void ArraySchema::Builder::adoptDomain(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::Domain>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Domain>::adopt(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Domain>
ArraySchema::Builder::disownDomain() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Domain>::disown(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool ArraySchema::Reader::hasOffsetFilterPipeline() const {
  return !_reader.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchema::Builder::hasOffsetFilterPipeline() {
  return !_builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::FilterPipeline::Reader
ArraySchema::Reader::getOffsetFilterPipeline() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::FilterPipeline>::get(
          _reader.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::FilterPipeline::Builder
ArraySchema::Builder::getOffsetFilterPipeline() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::FilterPipeline>::get(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::FilterPipeline::Pipeline
ArraySchema::Pipeline::getOffsetFilterPipeline() {
  return ::tiledb::sm::serialization::capnp::FilterPipeline::Pipeline(
      _typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void ArraySchema::Builder::setOffsetFilterPipeline(
    ::tiledb::sm::serialization::capnp::FilterPipeline::Reader value) {
  ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::FilterPipeline>::set(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::FilterPipeline::Builder
ArraySchema::Builder::initOffsetFilterPipeline() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::FilterPipeline>::init(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ArraySchema::Builder::adoptOffsetFilterPipeline(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::FilterPipeline>&&
        value) {
  ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::FilterPipeline>::adopt(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::FilterPipeline>
ArraySchema::Builder::disownOffsetFilterPipeline() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::FilterPipeline>::
      disown(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool ArraySchema::Reader::hasTileOrder() const {
  return !_reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchema::Builder::hasTileOrder() {
  return !_builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader ArraySchema::Reader::getTileOrder() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder ArraySchema::Builder::getTileOrder() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void ArraySchema::Builder::setTileOrder(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder ArraySchema::Builder::initTileOrder(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      size);
}
inline void ArraySchema::Builder::adoptTileOrder(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> ArraySchema::Builder::disownTileOrder() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool ArraySchema::Reader::hasUri() const {
  return !_reader.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchema::Builder::hasUri() {
  return !_builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader ArraySchema::Reader::getUri() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder ArraySchema::Builder::getUri() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void ArraySchema::Builder::setUri(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder ArraySchema::Builder::initUri(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
      size);
}
inline void ArraySchema::Builder::adoptUri(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> ArraySchema::Builder::disownUri() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool ArraySchema::Reader::hasVersion() const {
  return !_reader.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchema::Builder::hasVersion() {
  return !_builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>::Reader
ArraySchema::Reader::getVersion() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>::Builder
ArraySchema::Builder::getVersion() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void ArraySchema::Builder::setVersion(
    ::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS),
          value);
}
inline void ArraySchema::Builder::setVersion(
    ::kj::ArrayPtr<const ::int32_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>::Builder
ArraySchema::Builder::initVersion(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS),
          size);
}
inline void ArraySchema::Builder::adoptVersion(
    ::capnp::Orphan<::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>>&&
        value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>>::adopt(
          _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>>
ArraySchema::Builder::disownVersion() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::int32_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool ArraySchema::Reader::getAllowsDuplicates() const {
  return _reader.getDataField<bool>(::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool ArraySchema::Builder::getAllowsDuplicates() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void ArraySchema::Builder::setAllowsDuplicates(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline bool ArraySchema::Reader::hasValidityFilterPipeline() const {
  return !_reader.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchema::Builder::hasValidityFilterPipeline() {
  return !_builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::FilterPipeline::Reader
ArraySchema::Reader::getValidityFilterPipeline() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::FilterPipeline>::get(
          _reader.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::FilterPipeline::Builder
ArraySchema::Builder::getValidityFilterPipeline() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::FilterPipeline>::get(
          _builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::FilterPipeline::Pipeline
ArraySchema::Pipeline::getValidityFilterPipeline() {
  return ::tiledb::sm::serialization::capnp::FilterPipeline::Pipeline(
      _typeless.getPointerField(9));
}
#endif  // !CAPNP_LITE
inline void ArraySchema::Builder::setValidityFilterPipeline(
    ::tiledb::sm::serialization::capnp::FilterPipeline::Reader value) {
  ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::FilterPipeline>::set(
          _builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::FilterPipeline::Builder
ArraySchema::Builder::initValidityFilterPipeline() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::FilterPipeline>::init(
          _builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void ArraySchema::Builder::adoptValidityFilterPipeline(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::FilterPipeline>&&
        value) {
  ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::FilterPipeline>::adopt(
          _builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::FilterPipeline>
ArraySchema::Builder::disownValidityFilterPipeline() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::FilterPipeline>::
      disown(
          _builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool ArraySchema::Reader::hasName() const {
  return !_reader.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchema::Builder::hasName() {
  return !_builder.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader ArraySchema::Reader::getName() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder ArraySchema::Builder::getName() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void ArraySchema::Builder::setName(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder ArraySchema::Builder::initName(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS),
      size);
}
inline void ArraySchema::Builder::adoptName(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> ArraySchema::Builder::disownName() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool ArraySchema::Reader::hasTimestampRange() const {
  return !_reader.getPointerField(::capnp::bounded<11>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchema::Builder::hasTimestampRange() {
  return !_builder.getPointerField(::capnp::bounded<11>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
ArraySchema::Reader::getTimestampRange() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
ArraySchema::Builder::getTimestampRange() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void ArraySchema::Builder::setTimestampRange(
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<11>() * ::capnp::POINTERS),
          value);
}
inline void ArraySchema::Builder::setTimestampRange(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<11>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
ArraySchema::Builder::initTimestampRange(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<11>() * ::capnp::POINTERS),
          size);
}
inline void ArraySchema::Builder::adoptTimestampRange(
    ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<11>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
ArraySchema::Builder::disownTimestampRange() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool ArraySchema::Reader::hasDimensionLabels() const {
  return !_reader.getPointerField(::capnp::bounded<12>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchema::Builder::hasDimensionLabels() {
  return !_builder.getPointerField(::capnp::bounded<12>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::DimensionLabel,
    ::capnp::Kind::STRUCT>::Reader
ArraySchema::Reader::getDimensionLabels() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::DimensionLabel,
      ::capnp::Kind::STRUCT>>::get(_reader
                                       .getPointerField(
                                           ::capnp::bounded<12>() *
                                           ::capnp::POINTERS));
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::DimensionLabel,
    ::capnp::Kind::STRUCT>::Builder
ArraySchema::Builder::getDimensionLabels() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::DimensionLabel,
      ::capnp::Kind::STRUCT>>::get(_builder
                                       .getPointerField(
                                           ::capnp::bounded<12>() *
                                           ::capnp::POINTERS));
}
inline void ArraySchema::Builder::setDimensionLabels(
    ::capnp::List<
        ::tiledb::sm::serialization::capnp::DimensionLabel,
        ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::DimensionLabel,
      ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<12>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::DimensionLabel,
    ::capnp::Kind::STRUCT>::Builder
ArraySchema::Builder::initDimensionLabels(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::DimensionLabel,
      ::capnp::Kind::STRUCT>>::
      init(
          _builder.getPointerField(::capnp::bounded<12>() * ::capnp::POINTERS),
          size);
}
inline void ArraySchema::Builder::adoptDimensionLabels(
    ::capnp::Orphan<::capnp::List<
        ::tiledb::sm::serialization::capnp::DimensionLabel,
        ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::DimensionLabel,
      ::capnp::Kind::STRUCT>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<12>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::tiledb::sm::serialization::capnp::DimensionLabel,
    ::capnp::Kind::STRUCT>>
ArraySchema::Builder::disownDimensionLabels() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::DimensionLabel,
      ::capnp::Kind::STRUCT>>::disown(_builder
                                          .getPointerField(
                                              ::capnp::bounded<12>() *
                                              ::capnp::POINTERS));
}

inline bool ArraySchema::Reader::hasEnumerations() const {
  return !_reader.getPointerField(::capnp::bounded<13>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchema::Builder::hasEnumerations() {
  return !_builder.getPointerField(::capnp::bounded<13>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::Enumeration,
    ::capnp::Kind::STRUCT>::Reader
ArraySchema::Reader::getEnumerations() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Enumeration,
      ::capnp::Kind::STRUCT>>::get(_reader
                                       .getPointerField(
                                           ::capnp::bounded<13>() *
                                           ::capnp::POINTERS));
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::Enumeration,
    ::capnp::Kind::STRUCT>::Builder
ArraySchema::Builder::getEnumerations() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Enumeration,
      ::capnp::Kind::STRUCT>>::get(_builder
                                       .getPointerField(
                                           ::capnp::bounded<13>() *
                                           ::capnp::POINTERS));
}
inline void ArraySchema::Builder::setEnumerations(
    ::capnp::List<
        ::tiledb::sm::serialization::capnp::Enumeration,
        ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Enumeration,
      ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<13>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::Enumeration,
    ::capnp::Kind::STRUCT>::Builder
ArraySchema::Builder::initEnumerations(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Enumeration,
      ::capnp::Kind::STRUCT>>::
      init(
          _builder.getPointerField(::capnp::bounded<13>() * ::capnp::POINTERS),
          size);
}
inline void ArraySchema::Builder::adoptEnumerations(
    ::capnp::Orphan<::capnp::List<
        ::tiledb::sm::serialization::capnp::Enumeration,
        ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Enumeration,
      ::capnp::Kind::STRUCT>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<13>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::tiledb::sm::serialization::capnp::Enumeration,
    ::capnp::Kind::STRUCT>>
ArraySchema::Builder::disownEnumerations() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Enumeration,
      ::capnp::Kind::STRUCT>>::disown(_builder
                                          .getPointerField(
                                              ::capnp::bounded<13>() *
                                              ::capnp::POINTERS));
}

inline bool ArraySchema::Reader::hasEnumerationPathMap() const {
  return !_reader.getPointerField(::capnp::bounded<14>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchema::Builder::hasEnumerationPathMap() {
  return !_builder.getPointerField(::capnp::bounded<14>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::
    List<::tiledb::sm::serialization::capnp::KV, ::capnp::Kind::STRUCT>::Reader
    ArraySchema::Reader::getEnumerationPathMap() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::KV,
      ::capnp::Kind::STRUCT>>::get(_reader
                                       .getPointerField(
                                           ::capnp::bounded<14>() *
                                           ::capnp::POINTERS));
}
inline ::capnp::
    List<::tiledb::sm::serialization::capnp::KV, ::capnp::Kind::STRUCT>::Builder
    ArraySchema::Builder::getEnumerationPathMap() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::KV,
      ::capnp::Kind::STRUCT>>::get(_builder
                                       .getPointerField(
                                           ::capnp::bounded<14>() *
                                           ::capnp::POINTERS));
}
inline void ArraySchema::Builder::setEnumerationPathMap(
    ::capnp::List<
        ::tiledb::sm::serialization::capnp::KV,
        ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::KV,
      ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<14>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::
    List<::tiledb::sm::serialization::capnp::KV, ::capnp::Kind::STRUCT>::Builder
    ArraySchema::Builder::initEnumerationPathMap(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::KV,
      ::capnp::Kind::STRUCT>>::
      init(
          _builder.getPointerField(::capnp::bounded<14>() * ::capnp::POINTERS),
          size);
}
inline void ArraySchema::Builder::adoptEnumerationPathMap(
    ::capnp::Orphan<::capnp::List<
        ::tiledb::sm::serialization::capnp::KV,
        ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::KV,
      ::capnp::Kind::STRUCT>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<14>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::tiledb::sm::serialization::capnp::KV,
    ::capnp::Kind::STRUCT>>
ArraySchema::Builder::disownEnumerationPathMap() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::KV,
      ::capnp::Kind::STRUCT>>::disown(_builder
                                          .getPointerField(
                                              ::capnp::bounded<14>() *
                                              ::capnp::POINTERS));
}

inline ::uint32_t DimensionLabel::Reader::getDimensionId() const {
  return _reader.getDataField<::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::uint32_t DimensionLabel::Builder::getDimensionId() {
  return _builder.getDataField<::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DimensionLabel::Builder::setDimensionId(::uint32_t value) {
  _builder.setDataField<::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool DimensionLabel::Reader::hasName() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool DimensionLabel::Builder::hasName() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader DimensionLabel::Reader::getName() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder DimensionLabel::Builder::getName() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DimensionLabel::Builder::setName(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder DimensionLabel::Builder::initName(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void DimensionLabel::Builder::adoptName(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> DimensionLabel::Builder::disownName() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool DimensionLabel::Reader::hasUri() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool DimensionLabel::Builder::hasUri() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader DimensionLabel::Reader::getUri() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder DimensionLabel::Builder::getUri() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DimensionLabel::Builder::setUri(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder DimensionLabel::Builder::initUri(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void DimensionLabel::Builder::adoptUri(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> DimensionLabel::Builder::disownUri() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DimensionLabel::Reader::hasAttributeName() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool DimensionLabel::Builder::hasAttributeName() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader DimensionLabel::Reader::getAttributeName() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder DimensionLabel::Builder::getAttributeName() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void DimensionLabel::Builder::setAttributeName(
    ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder DimensionLabel::Builder::initAttributeName(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void DimensionLabel::Builder::adoptAttributeName(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text>
DimensionLabel::Builder::disownAttributeName() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool DimensionLabel::Reader::hasOrder() const {
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool DimensionLabel::Builder::hasOrder() {
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader DimensionLabel::Reader::getOrder() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder DimensionLabel::Builder::getOrder() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void DimensionLabel::Builder::setOrder(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder DimensionLabel::Builder::initOrder(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      size);
}
inline void DimensionLabel::Builder::adoptOrder(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> DimensionLabel::Builder::disownOrder() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool DimensionLabel::Reader::hasType() const {
  return !_reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline bool DimensionLabel::Builder::hasType() {
  return !_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader DimensionLabel::Reader::getType() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder DimensionLabel::Builder::getType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void DimensionLabel::Builder::setType(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder DimensionLabel::Builder::initType(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      size);
}
inline void DimensionLabel::Builder::adoptType(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> DimensionLabel::Builder::disownType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline ::uint32_t DimensionLabel::Reader::getCellValNum() const {
  return _reader.getDataField<::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::uint32_t DimensionLabel::Builder::getCellValNum() {
  return _builder.getDataField<::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DimensionLabel::Builder::setCellValNum(::uint32_t value) {
  _builder.setDataField<::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool DimensionLabel::Reader::getExternal() const {
  return _reader.getDataField<bool>(::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool DimensionLabel::Builder::getExternal() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void DimensionLabel::Builder::setExternal(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline bool DimensionLabel::Reader::getRelative() const {
  return _reader.getDataField<bool>(::capnp::bounded<65>() * ::capnp::ELEMENTS);
}

inline bool DimensionLabel::Builder::getRelative() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}
inline void DimensionLabel::Builder::setRelative(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS, value);
}

inline bool DimensionLabel::Reader::hasSchema() const {
  return !_reader.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS)
              .isNull();
}
inline bool DimensionLabel::Builder::hasSchema() {
  return !_builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::ArraySchema::Reader
DimensionLabel::Reader::getSchema() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ArraySchema>::get(
          _reader.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::ArraySchema::Builder
DimensionLabel::Builder::getSchema() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ArraySchema>::get(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::ArraySchema::Pipeline
DimensionLabel::Pipeline::getSchema() {
  return ::tiledb::sm::serialization::capnp::ArraySchema::Pipeline(
      _typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void DimensionLabel::Builder::setSchema(
    ::tiledb::sm::serialization::capnp::ArraySchema::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::ArraySchema>::
      set(_builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::ArraySchema::Builder
DimensionLabel::Builder::initSchema() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ArraySchema>::init(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void DimensionLabel::Builder::adoptSchema(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::ArraySchema>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::ArraySchema>::
      adopt(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::ArraySchema>
DimensionLabel::Builder::disownSchema() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ArraySchema>::disown(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool ArraySchemaEvolution::Reader::hasAttributesToDrop() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchemaEvolution::Builder::hasAttributesToDrop() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader
ArraySchemaEvolution::Reader::getAttributesToDrop() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(
          _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
ArraySchemaEvolution::Builder::getAttributesToDrop() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ArraySchemaEvolution::Builder::setAttributesToDrop(
    ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline void ArraySchemaEvolution::Builder::setAttributesToDrop(
    ::kj::ArrayPtr<const ::capnp::Text::Reader> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
ArraySchemaEvolution::Builder::initAttributesToDrop(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          size);
}
inline void ArraySchemaEvolution::Builder::adoptAttributesToDrop(
    ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>&&
        value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::adopt(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
ArraySchemaEvolution::Builder::disownAttributesToDrop() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::disown(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ArraySchemaEvolution::Reader::hasAttributesToAdd() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchemaEvolution::Builder::hasAttributesToAdd() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::Attribute,
    ::capnp::Kind::STRUCT>::Reader
ArraySchemaEvolution::Reader::getAttributesToAdd() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Attribute,
      ::capnp::Kind::STRUCT>>::get(_reader
                                       .getPointerField(
                                           ::capnp::bounded<1>() *
                                           ::capnp::POINTERS));
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::Attribute,
    ::capnp::Kind::STRUCT>::Builder
ArraySchemaEvolution::Builder::getAttributesToAdd() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Attribute,
      ::capnp::Kind::STRUCT>>::get(_builder
                                       .getPointerField(
                                           ::capnp::bounded<1>() *
                                           ::capnp::POINTERS));
}
inline void ArraySchemaEvolution::Builder::setAttributesToAdd(
    ::capnp::List<
        ::tiledb::sm::serialization::capnp::Attribute,
        ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Attribute,
      ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::Attribute,
    ::capnp::Kind::STRUCT>::Builder
ArraySchemaEvolution::Builder::initAttributesToAdd(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Attribute,
      ::capnp::Kind::STRUCT>>::
      init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          size);
}
inline void ArraySchemaEvolution::Builder::adoptAttributesToAdd(
    ::capnp::Orphan<::capnp::List<
        ::tiledb::sm::serialization::capnp::Attribute,
        ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Attribute,
      ::capnp::Kind::STRUCT>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::tiledb::sm::serialization::capnp::Attribute,
    ::capnp::Kind::STRUCT>>
ArraySchemaEvolution::Builder::disownAttributesToAdd() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Attribute,
      ::capnp::Kind::STRUCT>>::disown(_builder
                                          .getPointerField(
                                              ::capnp::bounded<1>() *
                                              ::capnp::POINTERS));
}

inline bool ArraySchemaEvolution::Reader::hasTimestampRange() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchemaEvolution::Builder::hasTimestampRange() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
ArraySchemaEvolution::Reader::getTimestampRange() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
ArraySchemaEvolution::Builder::getTimestampRange() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ArraySchemaEvolution::Builder::setTimestampRange(
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          value);
}
inline void ArraySchemaEvolution::Builder::setTimestampRange(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
ArraySchemaEvolution::Builder::initTimestampRange(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          size);
}
inline void ArraySchemaEvolution::Builder::adoptTimestampRange(
    ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
ArraySchemaEvolution::Builder::disownTimestampRange() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ArraySchemaEvolution::Reader::hasEnumerationsToAdd() const {
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchemaEvolution::Builder::hasEnumerationsToAdd() {
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::Enumeration,
    ::capnp::Kind::STRUCT>::Reader
ArraySchemaEvolution::Reader::getEnumerationsToAdd() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Enumeration,
      ::capnp::Kind::STRUCT>>::get(_reader
                                       .getPointerField(
                                           ::capnp::bounded<3>() *
                                           ::capnp::POINTERS));
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::Enumeration,
    ::capnp::Kind::STRUCT>::Builder
ArraySchemaEvolution::Builder::getEnumerationsToAdd() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Enumeration,
      ::capnp::Kind::STRUCT>>::get(_builder
                                       .getPointerField(
                                           ::capnp::bounded<3>() *
                                           ::capnp::POINTERS));
}
inline void ArraySchemaEvolution::Builder::setEnumerationsToAdd(
    ::capnp::List<
        ::tiledb::sm::serialization::capnp::Enumeration,
        ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Enumeration,
      ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::Enumeration,
    ::capnp::Kind::STRUCT>::Builder
ArraySchemaEvolution::Builder::initEnumerationsToAdd(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Enumeration,
      ::capnp::Kind::STRUCT>>::
      init(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          size);
}
inline void ArraySchemaEvolution::Builder::adoptEnumerationsToAdd(
    ::capnp::Orphan<::capnp::List<
        ::tiledb::sm::serialization::capnp::Enumeration,
        ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Enumeration,
      ::capnp::Kind::STRUCT>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::tiledb::sm::serialization::capnp::Enumeration,
    ::capnp::Kind::STRUCT>>
ArraySchemaEvolution::Builder::disownEnumerationsToAdd() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Enumeration,
      ::capnp::Kind::STRUCT>>::disown(_builder
                                          .getPointerField(
                                              ::capnp::bounded<3>() *
                                              ::capnp::POINTERS));
}

inline bool ArraySchemaEvolution::Reader::hasEnumerationsToDrop() const {
  return !_reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchemaEvolution::Builder::hasEnumerationsToDrop() {
  return !_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader
ArraySchemaEvolution::Reader::getEnumerationsToDrop() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(
          _reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
ArraySchemaEvolution::Builder::getEnumerationsToDrop() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void ArraySchemaEvolution::Builder::setEnumerationsToDrop(
    ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
          value);
}
inline void ArraySchemaEvolution::Builder::setEnumerationsToDrop(
    ::kj::ArrayPtr<const ::capnp::Text::Reader> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
ArraySchemaEvolution::Builder::initEnumerationsToDrop(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::init(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
          size);
}
inline void ArraySchemaEvolution::Builder::adoptEnumerationsToDrop(
    ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>&&
        value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::adopt(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
ArraySchemaEvolution::Builder::disownEnumerationsToDrop() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::disown(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline ::uint32_t Attribute::Reader::getCellValNum() const {
  return _reader.getDataField<::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::uint32_t Attribute::Builder::getCellValNum() {
  return _builder.getDataField<::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Attribute::Builder::setCellValNum(::uint32_t value) {
  _builder.setDataField<::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Attribute::Reader::hasName() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Attribute::Builder::hasName() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Attribute::Reader::getName() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Attribute::Builder::getName() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Attribute::Builder::setName(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Attribute::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void Attribute::Builder::adoptName(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Attribute::Builder::disownName() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Attribute::Reader::hasType() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Attribute::Builder::hasType() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Attribute::Reader::getType() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Attribute::Builder::getType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Attribute::Builder::setType(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Attribute::Builder::initType(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void Attribute::Builder::adoptType(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Attribute::Builder::disownType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Attribute::Reader::hasFilterPipeline() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Attribute::Builder::hasFilterPipeline() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::FilterPipeline::Reader
Attribute::Reader::getFilterPipeline() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::FilterPipeline>::get(
          _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::FilterPipeline::Builder
Attribute::Builder::getFilterPipeline() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::FilterPipeline>::get(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::FilterPipeline::Pipeline
Attribute::Pipeline::getFilterPipeline() {
  return ::tiledb::sm::serialization::capnp::FilterPipeline::Pipeline(
      _typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Attribute::Builder::setFilterPipeline(
    ::tiledb::sm::serialization::capnp::FilterPipeline::Reader value) {
  ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::FilterPipeline>::set(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::FilterPipeline::Builder
Attribute::Builder::initFilterPipeline() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::FilterPipeline>::init(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Attribute::Builder::adoptFilterPipeline(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::FilterPipeline>&&
        value) {
  ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::FilterPipeline>::adopt(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::FilterPipeline>
Attribute::Builder::disownFilterPipeline() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::FilterPipeline>::
      disown(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Attribute::Reader::hasFillValue() const {
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Attribute::Builder::hasFillValue() {
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Data::Reader Attribute::Reader::getFillValue() const {
  return ::capnp::_::PointerHelpers<::capnp::Data>::get(
      _reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::capnp::Data::Builder Attribute::Builder::getFillValue() {
  return ::capnp::_::PointerHelpers<::capnp::Data>::get(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Attribute::Builder::setFillValue(::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Data>::set(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Data::Builder Attribute::Builder::initFillValue(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Data>::init(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      size);
}
inline void Attribute::Builder::adoptFillValue(
    ::capnp::Orphan<::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Data>::adopt(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Data> Attribute::Builder::disownFillValue() {
  return ::capnp::_::PointerHelpers<::capnp::Data>::disown(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Attribute::Reader::getNullable() const {
  return _reader.getDataField<bool>(::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline bool Attribute::Builder::getNullable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void Attribute::Builder::setNullable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

inline bool Attribute::Reader::getFillValueValidity() const {
  return _reader.getDataField<bool>(::capnp::bounded<33>() * ::capnp::ELEMENTS);
}

inline bool Attribute::Builder::getFillValueValidity() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}
inline void Attribute::Builder::setFillValueValidity(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS, value);
}

inline bool Attribute::Reader::hasOrder() const {
  return !_reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Attribute::Builder::hasOrder() {
  return !_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Attribute::Reader::getOrder() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Attribute::Builder::getOrder() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Attribute::Builder::setOrder(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Attribute::Builder::initOrder(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      size);
}
inline void Attribute::Builder::adoptOrder(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Attribute::Builder::disownOrder() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Attribute::Reader::hasEnumerationName() const {
  return !_reader.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Attribute::Builder::hasEnumerationName() {
  return !_builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Attribute::Reader::getEnumerationName() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Attribute::Builder::getEnumerationName() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Attribute::Builder::setEnumerationName(
    ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Attribute::Builder::initEnumerationName(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
      size);
}
inline void Attribute::Builder::adoptEnumerationName(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text>
Attribute::Builder::disownEnumerationName() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Enumeration::Reader::hasName() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Enumeration::Builder::hasName() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Enumeration::Reader::getName() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Enumeration::Builder::getName() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Enumeration::Builder::setName(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Enumeration::Builder::initName(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void Enumeration::Builder::adoptName(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Enumeration::Builder::disownName() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Enumeration::Reader::hasPathName() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Enumeration::Builder::hasPathName() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Enumeration::Reader::getPathName() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Enumeration::Builder::getPathName() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Enumeration::Builder::setPathName(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Enumeration::Builder::initPathName(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void Enumeration::Builder::adoptPathName(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Enumeration::Builder::disownPathName() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Enumeration::Reader::hasType() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Enumeration::Builder::hasType() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Enumeration::Reader::getType() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Enumeration::Builder::getType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Enumeration::Builder::setType(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Enumeration::Builder::initType(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void Enumeration::Builder::adoptType(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Enumeration::Builder::disownType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline ::uint32_t Enumeration::Reader::getCellValNum() const {
  return _reader.getDataField<::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::uint32_t Enumeration::Builder::getCellValNum() {
  return _builder.getDataField<::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Enumeration::Builder::setCellValNum(::uint32_t value) {
  _builder.setDataField<::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Enumeration::Reader::getOrdered() const {
  return _reader.getDataField<bool>(::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline bool Enumeration::Builder::getOrdered() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void Enumeration::Builder::setOrdered(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

inline bool Enumeration::Reader::hasData() const {
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Enumeration::Builder::hasData() {
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Data::Reader Enumeration::Reader::getData() const {
  return ::capnp::_::PointerHelpers<::capnp::Data>::get(
      _reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::capnp::Data::Builder Enumeration::Builder::getData() {
  return ::capnp::_::PointerHelpers<::capnp::Data>::get(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Enumeration::Builder::setData(::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Data>::set(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Data::Builder Enumeration::Builder::initData(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Data>::init(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      size);
}
inline void Enumeration::Builder::adoptData(
    ::capnp::Orphan<::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Data>::adopt(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Data> Enumeration::Builder::disownData() {
  return ::capnp::_::PointerHelpers<::capnp::Data>::disown(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Enumeration::Reader::hasOffsets() const {
  return !_reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Enumeration::Builder::hasOffsets() {
  return !_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Data::Reader Enumeration::Reader::getOffsets() const {
  return ::capnp::_::PointerHelpers<::capnp::Data>::get(
      _reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline ::capnp::Data::Builder Enumeration::Builder::getOffsets() {
  return ::capnp::_::PointerHelpers<::capnp::Data>::get(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Enumeration::Builder::setOffsets(::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Data>::set(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Data::Builder Enumeration::Builder::initOffsets(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Data>::init(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      size);
}
inline void Enumeration::Builder::adoptOffsets(
    ::capnp::Orphan<::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Data>::adopt(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Data> Enumeration::Builder::disownOffsets() {
  return ::capnp::_::PointerHelpers<::capnp::Data>::disown(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool AttributeBufferHeader::Reader::hasName() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool AttributeBufferHeader::Builder::hasName() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader AttributeBufferHeader::Reader::getName() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder AttributeBufferHeader::Builder::getName() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AttributeBufferHeader::Builder::setName(
    ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder AttributeBufferHeader::Builder::initName(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void AttributeBufferHeader::Builder::adoptName(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text>
AttributeBufferHeader::Builder::disownName() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline ::uint64_t AttributeBufferHeader::Reader::getFixedLenBufferSizeInBytes()
    const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::uint64_t
AttributeBufferHeader::Builder::getFixedLenBufferSizeInBytes() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AttributeBufferHeader::Builder::setFixedLenBufferSizeInBytes(
    ::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline ::uint64_t AttributeBufferHeader::Reader::getVarLenBufferSizeInBytes()
    const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::uint64_t AttributeBufferHeader::Builder::getVarLenBufferSizeInBytes() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AttributeBufferHeader::Builder::setVarLenBufferSizeInBytes(
    ::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline ::uint64_t
AttributeBufferHeader::Reader::getValidityLenBufferSizeInBytes() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline ::uint64_t
AttributeBufferHeader::Builder::getValidityLenBufferSizeInBytes() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AttributeBufferHeader::Builder::setValidityLenBufferSizeInBytes(
    ::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline ::uint64_t
AttributeBufferHeader::Reader::getOriginalFixedLenBufferSizeInBytes() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline ::uint64_t
AttributeBufferHeader::Builder::getOriginalFixedLenBufferSizeInBytes() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void
AttributeBufferHeader::Builder::setOriginalFixedLenBufferSizeInBytes(
    ::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline ::uint64_t
AttributeBufferHeader::Reader::getOriginalVarLenBufferSizeInBytes() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline ::uint64_t
AttributeBufferHeader::Builder::getOriginalVarLenBufferSizeInBytes() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void AttributeBufferHeader::Builder::setOriginalVarLenBufferSizeInBytes(
    ::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline ::uint64_t
AttributeBufferHeader::Reader::getOriginalValidityLenBufferSizeInBytes() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline ::uint64_t
AttributeBufferHeader::Builder::getOriginalValidityLenBufferSizeInBytes() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void
AttributeBufferHeader::Builder::setOriginalValidityLenBufferSizeInBytes(
    ::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool Dimension::Reader::hasName() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Dimension::Builder::hasName() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Dimension::Reader::getName() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Dimension::Builder::getName() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Dimension::Builder::setName(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Dimension::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void Dimension::Builder::adoptName(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Dimension::Builder::disownName() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Dimension::Reader::getNullTileExtent() const {
  return _reader.getDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Dimension::Builder::getNullTileExtent() {
  return _builder.getDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Dimension::Builder::setNullTileExtent(bool value) {
  _builder.setDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Dimension::Reader::hasType() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Dimension::Builder::hasType() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Dimension::Reader::getType() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Dimension::Builder::getType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Dimension::Builder::setType(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Dimension::Builder::initType(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void Dimension::Builder::adoptType(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Dimension::Builder::disownType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline typename Dimension::TileExtent::Reader Dimension::Reader::getTileExtent()
    const {
  return typename Dimension::TileExtent::Reader(_reader);
}
inline typename Dimension::TileExtent::Builder
Dimension::Builder::getTileExtent() {
  return typename Dimension::TileExtent::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Dimension::TileExtent::Pipeline
Dimension::Pipeline::getTileExtent() {
  return typename Dimension::TileExtent::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Dimension::TileExtent::Builder
Dimension::Builder::initTileExtent() {
  _builder.setDataField<::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField<::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField<::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  return typename Dimension::TileExtent::Builder(_builder);
}
inline bool Dimension::Reader::hasDomain() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Dimension::Builder::hasDomain() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::DomainArray::Reader
Dimension::Reader::getDomain() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::DomainArray>::get(
          _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::DomainArray::Builder
Dimension::Builder::getDomain() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::DomainArray>::get(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::DomainArray::Pipeline
Dimension::Pipeline::getDomain() {
  return ::tiledb::sm::serialization::capnp::DomainArray::Pipeline(
      _typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Dimension::Builder::setDomain(
    ::tiledb::sm::serialization::capnp::DomainArray::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::DomainArray>::
      set(_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::DomainArray::Builder
Dimension::Builder::initDomain() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::DomainArray>::init(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Dimension::Builder::adoptDomain(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::DomainArray>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::DomainArray>::
      adopt(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::DomainArray>
Dimension::Builder::disownDomain() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::DomainArray>::disown(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Dimension::Reader::hasFilterPipeline() const {
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Dimension::Builder::hasFilterPipeline() {
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::FilterPipeline::Reader
Dimension::Reader::getFilterPipeline() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::FilterPipeline>::get(
          _reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::FilterPipeline::Builder
Dimension::Builder::getFilterPipeline() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::FilterPipeline>::get(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::FilterPipeline::Pipeline
Dimension::Pipeline::getFilterPipeline() {
  return ::tiledb::sm::serialization::capnp::FilterPipeline::Pipeline(
      _typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Dimension::Builder::setFilterPipeline(
    ::tiledb::sm::serialization::capnp::FilterPipeline::Reader value) {
  ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::FilterPipeline>::set(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::FilterPipeline::Builder
Dimension::Builder::initFilterPipeline() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::FilterPipeline>::init(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Dimension::Builder::adoptFilterPipeline(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::FilterPipeline>&&
        value) {
  ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::FilterPipeline>::adopt(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::FilterPipeline>
Dimension::Builder::disownFilterPipeline() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::FilterPipeline>::
      disown(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline ::tiledb::sm::serialization::capnp::Dimension::TileExtent::Which
Dimension::TileExtent::Reader::which() const {
  return _reader.getDataField<Which>(::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline ::tiledb::sm::serialization::capnp::Dimension::TileExtent::Which
Dimension::TileExtent::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool Dimension::TileExtent::Reader::isInt8() const {
  return which() == Dimension::TileExtent::INT8;
}
inline bool Dimension::TileExtent::Builder::isInt8() {
  return which() == Dimension::TileExtent::INT8;
}
inline ::int8_t Dimension::TileExtent::Reader::getInt8() const {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::INT8),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::int8_t Dimension::TileExtent::Builder::getInt8() {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::INT8),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Dimension::TileExtent::Builder::setInt8(::int8_t value) {
  _builder.setDataField<Dimension::TileExtent::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Dimension::TileExtent::INT8);
  _builder.setDataField<::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Dimension::TileExtent::Reader::isUint8() const {
  return which() == Dimension::TileExtent::UINT8;
}
inline bool Dimension::TileExtent::Builder::isUint8() {
  return which() == Dimension::TileExtent::UINT8;
}
inline ::uint8_t Dimension::TileExtent::Reader::getUint8() const {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::UINT8),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::uint8_t Dimension::TileExtent::Builder::getUint8() {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::UINT8),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Dimension::TileExtent::Builder::setUint8(::uint8_t value) {
  _builder.setDataField<Dimension::TileExtent::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Dimension::TileExtent::UINT8);
  _builder.setDataField<::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Dimension::TileExtent::Reader::isInt16() const {
  return which() == Dimension::TileExtent::INT16;
}
inline bool Dimension::TileExtent::Builder::isInt16() {
  return which() == Dimension::TileExtent::INT16;
}
inline ::int16_t Dimension::TileExtent::Reader::getInt16() const {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::INT16),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline ::int16_t Dimension::TileExtent::Builder::getInt16() {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::INT16),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Dimension::TileExtent::Builder::setInt16(::int16_t value) {
  _builder.setDataField<Dimension::TileExtent::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Dimension::TileExtent::INT16);
  _builder.setDataField<::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Dimension::TileExtent::Reader::isUint16() const {
  return which() == Dimension::TileExtent::UINT16;
}
inline bool Dimension::TileExtent::Builder::isUint16() {
  return which() == Dimension::TileExtent::UINT16;
}
inline ::uint16_t Dimension::TileExtent::Reader::getUint16() const {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::UINT16),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline ::uint16_t Dimension::TileExtent::Builder::getUint16() {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::UINT16),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Dimension::TileExtent::Builder::setUint16(::uint16_t value) {
  _builder.setDataField<Dimension::TileExtent::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Dimension::TileExtent::UINT16);
  _builder.setDataField<::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Dimension::TileExtent::Reader::isInt32() const {
  return which() == Dimension::TileExtent::INT32;
}
inline bool Dimension::TileExtent::Builder::isInt32() {
  return which() == Dimension::TileExtent::INT32;
}
inline ::int32_t Dimension::TileExtent::Reader::getInt32() const {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::INT32),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::int32_t Dimension::TileExtent::Builder::getInt32() {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::INT32),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Dimension::TileExtent::Builder::setInt32(::int32_t value) {
  _builder.setDataField<Dimension::TileExtent::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Dimension::TileExtent::INT32);
  _builder.setDataField<::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Dimension::TileExtent::Reader::isUint32() const {
  return which() == Dimension::TileExtent::UINT32;
}
inline bool Dimension::TileExtent::Builder::isUint32() {
  return which() == Dimension::TileExtent::UINT32;
}
inline ::uint32_t Dimension::TileExtent::Reader::getUint32() const {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::UINT32),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::uint32_t Dimension::TileExtent::Builder::getUint32() {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::UINT32),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Dimension::TileExtent::Builder::setUint32(::uint32_t value) {
  _builder.setDataField<Dimension::TileExtent::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Dimension::TileExtent::UINT32);
  _builder.setDataField<::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Dimension::TileExtent::Reader::isInt64() const {
  return which() == Dimension::TileExtent::INT64;
}
inline bool Dimension::TileExtent::Builder::isInt64() {
  return which() == Dimension::TileExtent::INT64;
}
inline ::int64_t Dimension::TileExtent::Reader::getInt64() const {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::INT64),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::int64_t Dimension::TileExtent::Builder::getInt64() {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::INT64),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Dimension::TileExtent::Builder::setInt64(::int64_t value) {
  _builder.setDataField<Dimension::TileExtent::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Dimension::TileExtent::INT64);
  _builder.setDataField<::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Dimension::TileExtent::Reader::isUint64() const {
  return which() == Dimension::TileExtent::UINT64;
}
inline bool Dimension::TileExtent::Builder::isUint64() {
  return which() == Dimension::TileExtent::UINT64;
}
inline ::uint64_t Dimension::TileExtent::Reader::getUint64() const {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::UINT64),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::uint64_t Dimension::TileExtent::Builder::getUint64() {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::UINT64),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Dimension::TileExtent::Builder::setUint64(::uint64_t value) {
  _builder.setDataField<Dimension::TileExtent::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Dimension::TileExtent::UINT64);
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Dimension::TileExtent::Reader::isFloat32() const {
  return which() == Dimension::TileExtent::FLOAT32;
}
inline bool Dimension::TileExtent::Builder::isFloat32() {
  return which() == Dimension::TileExtent::FLOAT32;
}
inline float Dimension::TileExtent::Reader::getFloat32() const {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::FLOAT32),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<float>(::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float Dimension::TileExtent::Builder::getFloat32() {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::FLOAT32),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Dimension::TileExtent::Builder::setFloat32(float value) {
  _builder.setDataField<Dimension::TileExtent::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      Dimension::TileExtent::FLOAT32);
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Dimension::TileExtent::Reader::isFloat64() const {
  return which() == Dimension::TileExtent::FLOAT64;
}
inline bool Dimension::TileExtent::Builder::isFloat64() {
  return which() == Dimension::TileExtent::FLOAT64;
}
inline double Dimension::TileExtent::Reader::getFloat64() const {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::FLOAT64),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double Dimension::TileExtent::Builder::getFloat64() {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::FLOAT64),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Dimension::TileExtent::Builder::setFloat64(double value) {
  _builder.setDataField<Dimension::TileExtent::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      Dimension::TileExtent::FLOAT64);
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Domain::Reader::hasCellOrder() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Domain::Builder::hasCellOrder() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Domain::Reader::getCellOrder() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Domain::Builder::getCellOrder() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Domain::Builder::setCellOrder(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Domain::Builder::initCellOrder(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void Domain::Builder::adoptCellOrder(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Domain::Builder::disownCellOrder() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Domain::Reader::hasDimensions() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Domain::Builder::hasDimensions() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::Dimension,
    ::capnp::Kind::STRUCT>::Reader
Domain::Reader::getDimensions() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Dimension,
      ::capnp::Kind::STRUCT>>::get(_reader
                                       .getPointerField(
                                           ::capnp::bounded<1>() *
                                           ::capnp::POINTERS));
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::Dimension,
    ::capnp::Kind::STRUCT>::Builder
Domain::Builder::getDimensions() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Dimension,
      ::capnp::Kind::STRUCT>>::get(_builder
                                       .getPointerField(
                                           ::capnp::bounded<1>() *
                                           ::capnp::POINTERS));
}
inline void Domain::Builder::setDimensions(
    ::capnp::List<
        ::tiledb::sm::serialization::capnp::Dimension,
        ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Dimension,
      ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::Dimension,
    ::capnp::Kind::STRUCT>::Builder
Domain::Builder::initDimensions(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Dimension,
      ::capnp::Kind::STRUCT>>::
      init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          size);
}
inline void Domain::Builder::adoptDimensions(
    ::capnp::Orphan<::capnp::List<
        ::tiledb::sm::serialization::capnp::Dimension,
        ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Dimension,
      ::capnp::Kind::STRUCT>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::tiledb::sm::serialization::capnp::Dimension,
    ::capnp::Kind::STRUCT>>
Domain::Builder::disownDimensions() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Dimension,
      ::capnp::Kind::STRUCT>>::disown(_builder
                                          .getPointerField(
                                              ::capnp::bounded<1>() *
                                              ::capnp::POINTERS));
}

inline bool Domain::Reader::hasTileOrder() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Domain::Builder::hasTileOrder() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Domain::Reader::getTileOrder() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Domain::Builder::getTileOrder() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Domain::Builder::setTileOrder(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Domain::Builder::initTileOrder(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void Domain::Builder::adoptTileOrder(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Domain::Builder::disownTileOrder() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Domain::Reader::hasType() const {
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Domain::Builder::hasType() {
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Domain::Reader::getType() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Domain::Builder::getType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Domain::Builder::setType(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Domain::Builder::initType(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      size);
}
inline void Domain::Builder::adoptType(::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Domain::Builder::disownType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline ::int64_t Error::Reader::getCode() const {
  return _reader.getDataField<::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::int64_t Error::Builder::getCode() {
  return _builder.getDataField<::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Error::Builder::setCode(::int64_t value) {
  _builder.setDataField<::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Error::Reader::hasMessage() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Error::Builder::hasMessage() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Error::Reader::getMessage() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Error::Builder::getMessage() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Error::Builder::setMessage(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Error::Builder::initMessage(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void Error::Builder::adoptMessage(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Error::Builder::disownMessage() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline double FloatScaleConfig::Reader::getScale() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double FloatScaleConfig::Builder::getScale() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void FloatScaleConfig::Builder::setScale(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double FloatScaleConfig::Reader::getOffset() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double FloatScaleConfig::Builder::getOffset() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void FloatScaleConfig::Builder::setOffset(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline ::uint64_t FloatScaleConfig::Reader::getByteWidth() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline ::uint64_t FloatScaleConfig::Builder::getByteWidth() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void FloatScaleConfig::Builder::setByteWidth(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float WebpConfig::Reader::getQuality() const {
  return _reader.getDataField<float>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float WebpConfig::Builder::getQuality() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void WebpConfig::Builder::setQuality(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline ::uint8_t WebpConfig::Reader::getFormat() const {
  return _reader.getDataField<::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline ::uint8_t WebpConfig::Builder::getFormat() {
  return _builder.getDataField<::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void WebpConfig::Builder::setFormat(::uint8_t value) {
  _builder.setDataField<::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool WebpConfig::Reader::getLossless() const {
  return _reader.getDataField<bool>(::capnp::bounded<40>() * ::capnp::ELEMENTS);
}

inline bool WebpConfig::Builder::getLossless() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS);
}
inline void WebpConfig::Builder::setLossless(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS, value);
}

inline ::uint16_t WebpConfig::Reader::getExtentX() const {
  return _reader.getDataField<::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline ::uint16_t WebpConfig::Builder::getExtentX() {
  return _builder.getDataField<::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void WebpConfig::Builder::setExtentX(::uint16_t value) {
  _builder.setDataField<::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline ::uint16_t WebpConfig::Reader::getExtentY() const {
  return _reader.getDataField<::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline ::uint16_t WebpConfig::Builder::getExtentY() {
  return _builder.getDataField<::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void WebpConfig::Builder::setExtentY(::uint16_t value) {
  _builder.setDataField<::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Filter::Reader::hasType() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Filter::Builder::hasType() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Filter::Reader::getType() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Filter::Builder::getType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Filter::Builder::setType(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Filter::Builder::initType(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void Filter::Builder::adoptType(::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Filter::Builder::disownType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline typename Filter::Data::Reader Filter::Reader::getData() const {
  return typename Filter::Data::Reader(_reader);
}
inline typename Filter::Data::Builder Filter::Builder::getData() {
  return typename Filter::Data::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Filter::Data::Pipeline Filter::Pipeline::getData() {
  return typename Filter::Data::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Filter::Data::Builder Filter::Builder::initData() {
  _builder.setDataField<::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField<::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField<::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS).clear();
  return typename Filter::Data::Builder(_builder);
}
inline bool Filter::Reader::hasFloatScaleConfig() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Filter::Builder::hasFloatScaleConfig() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::FloatScaleConfig::Reader
Filter::Reader::getFloatScaleConfig() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::FloatScaleConfig>::get(
          _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::FloatScaleConfig::Builder
Filter::Builder::getFloatScaleConfig() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::FloatScaleConfig>::get(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::FloatScaleConfig::Pipeline
Filter::Pipeline::getFloatScaleConfig() {
  return ::tiledb::sm::serialization::capnp::FloatScaleConfig::Pipeline(
      _typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Filter::Builder::setFloatScaleConfig(
    ::tiledb::sm::serialization::capnp::FloatScaleConfig::Reader value) {
  ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::FloatScaleConfig>::set(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::FloatScaleConfig::Builder
Filter::Builder::initFloatScaleConfig() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::FloatScaleConfig>::
      init(_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Filter::Builder::adoptFloatScaleConfig(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::FloatScaleConfig>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::FloatScaleConfig>::
      adopt(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::FloatScaleConfig>
Filter::Builder::disownFloatScaleConfig() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::FloatScaleConfig>::
      disown(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Filter::Reader::hasWebpConfig() const {
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Filter::Builder::hasWebpConfig() {
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::WebpConfig::Reader
Filter::Reader::getWebpConfig() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::WebpConfig>::get(
          _reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::WebpConfig::Builder
Filter::Builder::getWebpConfig() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::WebpConfig>::get(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::WebpConfig::Pipeline
Filter::Pipeline::getWebpConfig() {
  return ::tiledb::sm::serialization::capnp::WebpConfig::Pipeline(
      _typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Filter::Builder::setWebpConfig(
    ::tiledb::sm::serialization::capnp::WebpConfig::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::WebpConfig>::
      set(_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::WebpConfig::Builder
Filter::Builder::initWebpConfig() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::WebpConfig>::init(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Filter::Builder::adoptWebpConfig(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::WebpConfig>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::WebpConfig>::
      adopt(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::WebpConfig>
Filter::Builder::disownWebpConfig() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::WebpConfig>::disown(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline ::tiledb::sm::serialization::capnp::Filter::Data::Which
Filter::Data::Reader::which() const {
  return _reader.getDataField<Which>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline ::tiledb::sm::serialization::capnp::Filter::Data::Which
Filter::Data::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Filter::Data::Reader::isText() const {
  return which() == Filter::Data::TEXT;
}
inline bool Filter::Data::Builder::isText() {
  return which() == Filter::Data::TEXT;
}
inline bool Filter::Data::Reader::hasText() const {
  if (which() != Filter::Data::TEXT)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Filter::Data::Builder::hasText() {
  if (which() != Filter::Data::TEXT)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Filter::Data::Reader::getText() const {
  KJ_IREQUIRE(
      (which() == Filter::Data::TEXT),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Filter::Data::Builder::getText() {
  KJ_IREQUIRE(
      (which() == Filter::Data::TEXT),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Filter::Data::Builder::setText(::capnp::Text::Reader value) {
  _builder.setDataField<Filter::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filter::Data::TEXT);
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Filter::Data::Builder::initText(
    unsigned int size) {
  _builder.setDataField<Filter::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filter::Data::TEXT);
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void Filter::Data::Builder::adoptText(
    ::capnp::Orphan<::capnp::Text>&& value) {
  _builder.setDataField<Filter::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filter::Data::TEXT);
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Filter::Data::Builder::disownText() {
  KJ_IREQUIRE(
      (which() == Filter::Data::TEXT),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Filter::Data::Reader::isBytes() const {
  return which() == Filter::Data::BYTES;
}
inline bool Filter::Data::Builder::isBytes() {
  return which() == Filter::Data::BYTES;
}
inline bool Filter::Data::Reader::hasBytes() const {
  if (which() != Filter::Data::BYTES)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Filter::Data::Builder::hasBytes() {
  if (which() != Filter::Data::BYTES)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Data::Reader Filter::Data::Reader::getBytes() const {
  KJ_IREQUIRE(
      (which() == Filter::Data::BYTES),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::Data>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::Data::Builder Filter::Data::Builder::getBytes() {
  KJ_IREQUIRE(
      (which() == Filter::Data::BYTES),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::Data>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Filter::Data::Builder::setBytes(::capnp::Data::Reader value) {
  _builder.setDataField<Filter::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filter::Data::BYTES);
  ::capnp::_::PointerHelpers<::capnp::Data>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Data::Builder Filter::Data::Builder::initBytes(
    unsigned int size) {
  _builder.setDataField<Filter::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filter::Data::BYTES);
  return ::capnp::_::PointerHelpers<::capnp::Data>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void Filter::Data::Builder::adoptBytes(
    ::capnp::Orphan<::capnp::Data>&& value) {
  _builder.setDataField<Filter::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filter::Data::BYTES);
  ::capnp::_::PointerHelpers<::capnp::Data>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Data> Filter::Data::Builder::disownBytes() {
  KJ_IREQUIRE(
      (which() == Filter::Data::BYTES),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::Data>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Filter::Data::Reader::isInt8() const {
  return which() == Filter::Data::INT8;
}
inline bool Filter::Data::Builder::isInt8() {
  return which() == Filter::Data::INT8;
}
inline ::int8_t Filter::Data::Reader::getInt8() const {
  KJ_IREQUIRE(
      (which() == Filter::Data::INT8),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::int8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline ::int8_t Filter::Data::Builder::getInt8() {
  KJ_IREQUIRE(
      (which() == Filter::Data::INT8),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::int8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Filter::Data::Builder::setInt8(::int8_t value) {
  _builder.setDataField<Filter::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filter::Data::INT8);
  _builder.setDataField<::int8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Filter::Data::Reader::isUint8() const {
  return which() == Filter::Data::UINT8;
}
inline bool Filter::Data::Builder::isUint8() {
  return which() == Filter::Data::UINT8;
}
inline ::uint8_t Filter::Data::Reader::getUint8() const {
  KJ_IREQUIRE(
      (which() == Filter::Data::UINT8),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline ::uint8_t Filter::Data::Builder::getUint8() {
  KJ_IREQUIRE(
      (which() == Filter::Data::UINT8),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Filter::Data::Builder::setUint8(::uint8_t value) {
  _builder.setDataField<Filter::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filter::Data::UINT8);
  _builder.setDataField<::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Filter::Data::Reader::isInt16() const {
  return which() == Filter::Data::INT16;
}
inline bool Filter::Data::Builder::isInt16() {
  return which() == Filter::Data::INT16;
}
inline ::int16_t Filter::Data::Reader::getInt16() const {
  KJ_IREQUIRE(
      (which() == Filter::Data::INT16),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::int16_t Filter::Data::Builder::getInt16() {
  KJ_IREQUIRE(
      (which() == Filter::Data::INT16),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Filter::Data::Builder::setInt16(::int16_t value) {
  _builder.setDataField<Filter::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filter::Data::INT16);
  _builder.setDataField<::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Filter::Data::Reader::isUint16() const {
  return which() == Filter::Data::UINT16;
}
inline bool Filter::Data::Builder::isUint16() {
  return which() == Filter::Data::UINT16;
}
inline ::uint16_t Filter::Data::Reader::getUint16() const {
  KJ_IREQUIRE(
      (which() == Filter::Data::UINT16),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::uint16_t Filter::Data::Builder::getUint16() {
  KJ_IREQUIRE(
      (which() == Filter::Data::UINT16),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Filter::Data::Builder::setUint16(::uint16_t value) {
  _builder.setDataField<Filter::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filter::Data::UINT16);
  _builder.setDataField<::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Filter::Data::Reader::isInt32() const {
  return which() == Filter::Data::INT32;
}
inline bool Filter::Data::Builder::isInt32() {
  return which() == Filter::Data::INT32;
}
inline ::int32_t Filter::Data::Reader::getInt32() const {
  KJ_IREQUIRE(
      (which() == Filter::Data::INT32),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::int32_t Filter::Data::Builder::getInt32() {
  KJ_IREQUIRE(
      (which() == Filter::Data::INT32),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Filter::Data::Builder::setInt32(::int32_t value) {
  _builder.setDataField<Filter::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filter::Data::INT32);
  _builder.setDataField<::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Filter::Data::Reader::isUint32() const {
  return which() == Filter::Data::UINT32;
}
inline bool Filter::Data::Builder::isUint32() {
  return which() == Filter::Data::UINT32;
}
inline ::uint32_t Filter::Data::Reader::getUint32() const {
  KJ_IREQUIRE(
      (which() == Filter::Data::UINT32),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::uint32_t Filter::Data::Builder::getUint32() {
  KJ_IREQUIRE(
      (which() == Filter::Data::UINT32),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Filter::Data::Builder::setUint32(::uint32_t value) {
  _builder.setDataField<Filter::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filter::Data::UINT32);
  _builder.setDataField<::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Filter::Data::Reader::isInt64() const {
  return which() == Filter::Data::INT64;
}
inline bool Filter::Data::Builder::isInt64() {
  return which() == Filter::Data::INT64;
}
inline ::int64_t Filter::Data::Reader::getInt64() const {
  KJ_IREQUIRE(
      (which() == Filter::Data::INT64),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::int64_t Filter::Data::Builder::getInt64() {
  KJ_IREQUIRE(
      (which() == Filter::Data::INT64),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Filter::Data::Builder::setInt64(::int64_t value) {
  _builder.setDataField<Filter::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filter::Data::INT64);
  _builder.setDataField<::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Filter::Data::Reader::isUint64() const {
  return which() == Filter::Data::UINT64;
}
inline bool Filter::Data::Builder::isUint64() {
  return which() == Filter::Data::UINT64;
}
inline ::uint64_t Filter::Data::Reader::getUint64() const {
  KJ_IREQUIRE(
      (which() == Filter::Data::UINT64),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::uint64_t Filter::Data::Builder::getUint64() {
  KJ_IREQUIRE(
      (which() == Filter::Data::UINT64),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Filter::Data::Builder::setUint64(::uint64_t value) {
  _builder.setDataField<Filter::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filter::Data::UINT64);
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Filter::Data::Reader::isFloat32() const {
  return which() == Filter::Data::FLOAT32;
}
inline bool Filter::Data::Builder::isFloat32() {
  return which() == Filter::Data::FLOAT32;
}
inline float Filter::Data::Reader::getFloat32() const {
  KJ_IREQUIRE(
      (which() == Filter::Data::FLOAT32),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<float>(::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float Filter::Data::Builder::getFloat32() {
  KJ_IREQUIRE(
      (which() == Filter::Data::FLOAT32),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Filter::Data::Builder::setFloat32(float value) {
  _builder.setDataField<Filter::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filter::Data::FLOAT32);
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Filter::Data::Reader::isFloat64() const {
  return which() == Filter::Data::FLOAT64;
}
inline bool Filter::Data::Builder::isFloat64() {
  return which() == Filter::Data::FLOAT64;
}
inline double Filter::Data::Reader::getFloat64() const {
  KJ_IREQUIRE(
      (which() == Filter::Data::FLOAT64),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double Filter::Data::Builder::getFloat64() {
  KJ_IREQUIRE(
      (which() == Filter::Data::FLOAT64),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Filter::Data::Builder::setFloat64(double value) {
  _builder.setDataField<Filter::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filter::Data::FLOAT64);
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool FilterPipeline::Reader::hasFilters() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FilterPipeline::Builder::hasFilters() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::Filter,
    ::capnp::Kind::STRUCT>::Reader
FilterPipeline::Reader::getFilters() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Filter,
      ::capnp::Kind::STRUCT>>::get(_reader
                                       .getPointerField(
                                           ::capnp::bounded<0>() *
                                           ::capnp::POINTERS));
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::Filter,
    ::capnp::Kind::STRUCT>::Builder
FilterPipeline::Builder::getFilters() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Filter,
      ::capnp::Kind::STRUCT>>::get(_builder
                                       .getPointerField(
                                           ::capnp::bounded<0>() *
                                           ::capnp::POINTERS));
}
inline void FilterPipeline::Builder::setFilters(
    ::capnp::List<
        ::tiledb::sm::serialization::capnp::Filter,
        ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Filter,
      ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::Filter,
    ::capnp::Kind::STRUCT>::Builder
FilterPipeline::Builder::initFilters(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Filter,
      ::capnp::Kind::STRUCT>>::
      init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          size);
}
inline void FilterPipeline::Builder::adoptFilters(
    ::capnp::Orphan<::capnp::List<
        ::tiledb::sm::serialization::capnp::Filter,
        ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Filter,
      ::capnp::Kind::STRUCT>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::tiledb::sm::serialization::capnp::Filter,
    ::capnp::Kind::STRUCT>>
FilterPipeline::Builder::disownFilters() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Filter,
      ::capnp::Kind::STRUCT>>::disown(_builder
                                          .getPointerField(
                                              ::capnp::bounded<0>() *
                                              ::capnp::POINTERS));
}

template <typename Key, typename Value>
inline bool Map<Key, Value>::Reader::hasEntries() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
template <typename Key, typename Value>
inline bool Map<Key, Value>::Builder::hasEntries() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
template <typename Key, typename Value>
inline typename ::capnp::List<
    typename ::tiledb::sm::serialization::capnp::Map<Key, Value>::Entry,
    ::capnp::Kind::STRUCT>::Reader
Map<Key, Value>::Reader::getEntries() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      typename ::tiledb::sm::serialization::capnp::Map<Key, Value>::Entry,
      ::capnp::Kind::STRUCT>>::get(_reader
                                       .getPointerField(
                                           ::capnp::bounded<0>() *
                                           ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline typename ::capnp::List<
    typename ::tiledb::sm::serialization::capnp::Map<Key, Value>::Entry,
    ::capnp::Kind::STRUCT>::Builder
Map<Key, Value>::Builder::getEntries() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      typename ::tiledb::sm::serialization::capnp::Map<Key, Value>::Entry,
      ::capnp::Kind::STRUCT>>::get(_builder
                                       .getPointerField(
                                           ::capnp::bounded<0>() *
                                           ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline void Map<Key, Value>::Builder::setEntries(
    typename ::capnp::List<
        typename ::tiledb::sm::serialization::capnp::Map<Key, Value>::Entry,
        ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      typename ::tiledb::sm::serialization::capnp::Map<Key, Value>::Entry,
      ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
template <typename Key, typename Value>
inline typename ::capnp::List<
    typename ::tiledb::sm::serialization::capnp::Map<Key, Value>::Entry,
    ::capnp::Kind::STRUCT>::Builder
Map<Key, Value>::Builder::initEntries(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      typename ::tiledb::sm::serialization::capnp::Map<Key, Value>::Entry,
      ::capnp::Kind::STRUCT>>::
      init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          size);
}
template <typename Key, typename Value>
inline void Map<Key, Value>::Builder::adoptEntries(
    ::capnp::Orphan<::capnp::List<
        typename ::tiledb::sm::serialization::capnp::Map<Key, Value>::Entry,
        ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      typename ::tiledb::sm::serialization::capnp::Map<Key, Value>::Entry,
      ::capnp::Kind::STRUCT>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          kj::mv(value));
}
template <typename Key, typename Value>
inline ::capnp::Orphan<::capnp::List<
    typename ::tiledb::sm::serialization::capnp::Map<Key, Value>::Entry,
    ::capnp::Kind::STRUCT>>
Map<Key, Value>::Builder::disownEntries() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      typename ::tiledb::sm::serialization::capnp::Map<Key, Value>::Entry,
      ::capnp::Kind::STRUCT>>::disown(_builder
                                          .getPointerField(
                                              ::capnp::bounded<0>() *
                                              ::capnp::POINTERS));
}

template <typename Key, typename Value>
inline bool Map<Key, Value>::Entry::Reader::hasKey() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
template <typename Key, typename Value>
inline bool Map<Key, Value>::Entry::Builder::hasKey() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
template <typename Key, typename Value>
inline ::capnp::ReaderFor<Key> Map<Key, Value>::Entry::Reader::getKey() const {
  return ::capnp::_::PointerHelpers<Key>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline ::capnp::BuilderFor<Key> Map<Key, Value>::Entry::Builder::getKey() {
  return ::capnp::_::PointerHelpers<Key>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename Key, typename Value>
inline ::capnp::PipelineFor<Key> Map<Key, Value>::Entry::Pipeline::getKey() {
  return ::capnp::PipelineFor<Key>(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
template <typename Key, typename Value>
inline void Map<Key, Value>::Entry::Builder::setKey(
    ::capnp::ReaderFor<Key> value) {
  ::capnp::_::PointerHelpers<Key>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
template <typename Key, typename Value>
inline ::capnp::BuilderFor<Key> Map<Key, Value>::Entry::Builder::initKey() {
  return ::capnp::_::PointerHelpers<Key>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline ::capnp::BuilderFor<Key> Map<Key, Value>::Entry::Builder::initKey(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<Key>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
template <typename Key, typename Value>
inline void Map<Key, Value>::Entry::Builder::adoptKey(
    ::capnp::Orphan<Key>&& value) {
  ::capnp::_::PointerHelpers<Key>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
template <typename Key, typename Value>
inline ::capnp::Orphan<Key> Map<Key, Value>::Entry::Builder::disownKey() {
  return ::capnp::_::PointerHelpers<Key>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

template <typename Key, typename Value>
inline bool Map<Key, Value>::Entry::Reader::hasValue() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
template <typename Key, typename Value>
inline bool Map<Key, Value>::Entry::Builder::hasValue() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
template <typename Key, typename Value>
inline ::capnp::ReaderFor<Value> Map<Key, Value>::Entry::Reader::getValue()
    const {
  return ::capnp::_::PointerHelpers<Value>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline ::capnp::BuilderFor<Value> Map<Key, Value>::Entry::Builder::getValue() {
  return ::capnp::_::PointerHelpers<Value>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename Key, typename Value>
inline ::capnp::PipelineFor<Value>
Map<Key, Value>::Entry::Pipeline::getValue() {
  return ::capnp::PipelineFor<Value>(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
template <typename Key, typename Value>
inline void Map<Key, Value>::Entry::Builder::setValue(
    ::capnp::ReaderFor<Value> value) {
  ::capnp::_::PointerHelpers<Value>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
template <typename Key, typename Value>
inline ::capnp::BuilderFor<Value> Map<Key, Value>::Entry::Builder::initValue() {
  return ::capnp::_::PointerHelpers<Value>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline ::capnp::BuilderFor<Value> Map<Key, Value>::Entry::Builder::initValue(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<Value>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
template <typename Key, typename Value>
inline void Map<Key, Value>::Entry::Builder::adoptValue(
    ::capnp::Orphan<Value>&& value) {
  ::capnp::_::PointerHelpers<Value>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
template <typename Key, typename Value>
inline ::capnp::Orphan<Value> Map<Key, Value>::Entry::Builder::disownValue() {
  return ::capnp::_::PointerHelpers<Value>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

// Map<Key, Value>::Entry
template <typename Key, typename Value>
constexpr uint16_t Map<Key, Value>::Entry::_capnpPrivate::dataWordSize;
template <typename Key, typename Value>
constexpr uint16_t Map<Key, Value>::Entry::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename Key, typename Value>
constexpr ::capnp::Kind Map<Key, Value>::Entry::_capnpPrivate::kind;
template <typename Key, typename Value>
constexpr ::capnp::_::RawSchema const*
    Map<Key, Value>::Entry::_capnpPrivate::schema;
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema::Scope
    Map<Key, Value>::Entry::_capnpPrivate::brandScopes[] = {
        {0xf179c194ae71718c, brandBindings + 0, 2, false},
};
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema::Binding
    Map<Key, Value>::Entry::_capnpPrivate::brandBindings[] = {
        ::capnp::_::brandBindingFor<Key>(),
        ::capnp::_::brandBindingFor<Value>(),
};
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema
    Map<Key, Value>::Entry::_capnpPrivate::specificBrand = {
        &::capnp::schemas::s_db5514c8aaf6faea,
        brandScopes,
        nullptr,
        1,
        0,
        nullptr};
#endif  // !CAPNP_LITE

// Map<Key, Value>
template <typename Key, typename Value>
constexpr uint16_t Map<Key, Value>::_capnpPrivate::dataWordSize;
template <typename Key, typename Value>
constexpr uint16_t Map<Key, Value>::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename Key, typename Value>
constexpr ::capnp::Kind Map<Key, Value>::_capnpPrivate::kind;
template <typename Key, typename Value>
constexpr ::capnp::_::RawSchema const* Map<Key, Value>::_capnpPrivate::schema;
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema::Scope
    Map<Key, Value>::_capnpPrivate::brandScopes[] = {
        {0xf179c194ae71718c, brandBindings + 0, 2, false},
};
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema::Binding
    Map<Key, Value>::_capnpPrivate::brandBindings[] = {
        ::capnp::_::brandBindingFor<Key>(),
        ::capnp::_::brandBindingFor<Value>(),
};
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema::Dependency
    Map<Key, Value>::_capnpPrivate::brandDependencies[] = {
        {16777216,
         ::tiledb::sm::serialization::capnp::Map<Key, Value>::Entry::
             _capnpPrivate::brand()},
};
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema
    Map<Key, Value>::_capnpPrivate::specificBrand = {
        &::capnp::schemas::s_f179c194ae71718c,
        brandScopes,
        brandDependencies,
        1,
        1,
        nullptr};
#endif  // !CAPNP_LITE

inline bool MapUInt32::Reader::hasEntries() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool MapUInt32::Builder::hasEntries() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::MapUInt32::Entry,
    ::capnp::Kind::STRUCT>::Reader
MapUInt32::Reader::getEntries() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::MapUInt32::Entry,
      ::capnp::Kind::STRUCT>>::get(_reader
                                       .getPointerField(
                                           ::capnp::bounded<0>() *
                                           ::capnp::POINTERS));
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::MapUInt32::Entry,
    ::capnp::Kind::STRUCT>::Builder
MapUInt32::Builder::getEntries() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::MapUInt32::Entry,
      ::capnp::Kind::STRUCT>>::get(_builder
                                       .getPointerField(
                                           ::capnp::bounded<0>() *
                                           ::capnp::POINTERS));
}
inline void MapUInt32::Builder::setEntries(
    ::capnp::List<
        ::tiledb::sm::serialization::capnp::MapUInt32::Entry,
        ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::MapUInt32::Entry,
      ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::MapUInt32::Entry,
    ::capnp::Kind::STRUCT>::Builder
MapUInt32::Builder::initEntries(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::MapUInt32::Entry,
      ::capnp::Kind::STRUCT>>::
      init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          size);
}
inline void MapUInt32::Builder::adoptEntries(
    ::capnp::Orphan<::capnp::List<
        ::tiledb::sm::serialization::capnp::MapUInt32::Entry,
        ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::MapUInt32::Entry,
      ::capnp::Kind::STRUCT>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::tiledb::sm::serialization::capnp::MapUInt32::Entry,
    ::capnp::Kind::STRUCT>>
MapUInt32::Builder::disownEntries() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::MapUInt32::Entry,
      ::capnp::Kind::STRUCT>>::disown(_builder
                                          .getPointerField(
                                              ::capnp::bounded<0>() *
                                              ::capnp::POINTERS));
}

inline bool MapUInt32::Entry::Reader::hasKey() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool MapUInt32::Entry::Builder::hasKey() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader MapUInt32::Entry::Reader::getKey() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder MapUInt32::Entry::Builder::getKey() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MapUInt32::Entry::Builder::setKey(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder MapUInt32::Entry::Builder::initKey(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void MapUInt32::Entry::Builder::adoptKey(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> MapUInt32::Entry::Builder::disownKey() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline ::uint32_t MapUInt32::Entry::Reader::getValue() const {
  return _reader.getDataField<::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::uint32_t MapUInt32::Entry::Builder::getValue() {
  return _builder.getDataField<::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void MapUInt32::Entry::Builder::setValue(::uint32_t value) {
  _builder.setDataField<::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool MapInt64::Reader::hasEntries() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool MapInt64::Builder::hasEntries() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::MapInt64::Entry,
    ::capnp::Kind::STRUCT>::Reader
MapInt64::Reader::getEntries() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::MapInt64::Entry,
      ::capnp::Kind::STRUCT>>::get(_reader
                                       .getPointerField(
                                           ::capnp::bounded<0>() *
                                           ::capnp::POINTERS));
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::MapInt64::Entry,
    ::capnp::Kind::STRUCT>::Builder
MapInt64::Builder::getEntries() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::MapInt64::Entry,
      ::capnp::Kind::STRUCT>>::get(_builder
                                       .getPointerField(
                                           ::capnp::bounded<0>() *
                                           ::capnp::POINTERS));
}
inline void MapInt64::Builder::setEntries(
    ::capnp::List<
        ::tiledb::sm::serialization::capnp::MapInt64::Entry,
        ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::MapInt64::Entry,
      ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::MapInt64::Entry,
    ::capnp::Kind::STRUCT>::Builder
MapInt64::Builder::initEntries(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::MapInt64::Entry,
      ::capnp::Kind::STRUCT>>::
      init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          size);
}
inline void MapInt64::Builder::adoptEntries(
    ::capnp::Orphan<::capnp::List<
        ::tiledb::sm::serialization::capnp::MapInt64::Entry,
        ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::MapInt64::Entry,
      ::capnp::Kind::STRUCT>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::tiledb::sm::serialization::capnp::MapInt64::Entry,
    ::capnp::Kind::STRUCT>>
MapInt64::Builder::disownEntries() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::MapInt64::Entry,
      ::capnp::Kind::STRUCT>>::disown(_builder
                                          .getPointerField(
                                              ::capnp::bounded<0>() *
                                              ::capnp::POINTERS));
}

inline bool MapInt64::Entry::Reader::hasKey() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool MapInt64::Entry::Builder::hasKey() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader MapInt64::Entry::Reader::getKey() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder MapInt64::Entry::Builder::getKey() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MapInt64::Entry::Builder::setKey(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder MapInt64::Entry::Builder::initKey(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void MapInt64::Entry::Builder::adoptKey(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> MapInt64::Entry::Builder::disownKey() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline ::int64_t MapInt64::Entry::Reader::getValue() const {
  return _reader.getDataField<::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::int64_t MapInt64::Entry::Builder::getValue() {
  return _builder.getDataField<::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void MapInt64::Entry::Builder::setValue(::int64_t value) {
  _builder.setDataField<::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool MapUInt64::Reader::hasEntries() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool MapUInt64::Builder::hasEntries() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::MapUInt64::Entry,
    ::capnp::Kind::STRUCT>::Reader
MapUInt64::Reader::getEntries() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::MapUInt64::Entry,
      ::capnp::Kind::STRUCT>>::get(_reader
                                       .getPointerField(
                                           ::capnp::bounded<0>() *
                                           ::capnp::POINTERS));
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::MapUInt64::Entry,
    ::capnp::Kind::STRUCT>::Builder
MapUInt64::Builder::getEntries() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::MapUInt64::Entry,
      ::capnp::Kind::STRUCT>>::get(_builder
                                       .getPointerField(
                                           ::capnp::bounded<0>() *
                                           ::capnp::POINTERS));
}
inline void MapUInt64::Builder::setEntries(
    ::capnp::List<
        ::tiledb::sm::serialization::capnp::MapUInt64::Entry,
        ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::MapUInt64::Entry,
      ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::MapUInt64::Entry,
    ::capnp::Kind::STRUCT>::Builder
MapUInt64::Builder::initEntries(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::MapUInt64::Entry,
      ::capnp::Kind::STRUCT>>::
      init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          size);
}
inline void MapUInt64::Builder::adoptEntries(
    ::capnp::Orphan<::capnp::List<
        ::tiledb::sm::serialization::capnp::MapUInt64::Entry,
        ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::MapUInt64::Entry,
      ::capnp::Kind::STRUCT>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::tiledb::sm::serialization::capnp::MapUInt64::Entry,
    ::capnp::Kind::STRUCT>>
MapUInt64::Builder::disownEntries() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::MapUInt64::Entry,
      ::capnp::Kind::STRUCT>>::disown(_builder
                                          .getPointerField(
                                              ::capnp::bounded<0>() *
                                              ::capnp::POINTERS));
}

inline bool MapUInt64::Entry::Reader::hasKey() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool MapUInt64::Entry::Builder::hasKey() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader MapUInt64::Entry::Reader::getKey() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder MapUInt64::Entry::Builder::getKey() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MapUInt64::Entry::Builder::setKey(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder MapUInt64::Entry::Builder::initKey(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void MapUInt64::Entry::Builder::adoptKey(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> MapUInt64::Entry::Builder::disownKey() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline ::uint64_t MapUInt64::Entry::Reader::getValue() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::uint64_t MapUInt64::Entry::Builder::getValue() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void MapUInt64::Entry::Builder::setValue(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool MapFloat64::Reader::hasEntries() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool MapFloat64::Builder::hasEntries() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::MapFloat64::Entry,
    ::capnp::Kind::STRUCT>::Reader
MapFloat64::Reader::getEntries() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::MapFloat64::Entry,
      ::capnp::Kind::STRUCT>>::get(_reader
                                       .getPointerField(
                                           ::capnp::bounded<0>() *
                                           ::capnp::POINTERS));
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::MapFloat64::Entry,
    ::capnp::Kind::STRUCT>::Builder
MapFloat64::Builder::getEntries() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::MapFloat64::Entry,
      ::capnp::Kind::STRUCT>>::get(_builder
                                       .getPointerField(
                                           ::capnp::bounded<0>() *
                                           ::capnp::POINTERS));
}
inline void MapFloat64::Builder::setEntries(
    ::capnp::List<
        ::tiledb::sm::serialization::capnp::MapFloat64::Entry,
        ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::MapFloat64::Entry,
      ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::MapFloat64::Entry,
    ::capnp::Kind::STRUCT>::Builder
MapFloat64::Builder::initEntries(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::MapFloat64::Entry,
      ::capnp::Kind::STRUCT>>::
      init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          size);
}
inline void MapFloat64::Builder::adoptEntries(
    ::capnp::Orphan<::capnp::List<
        ::tiledb::sm::serialization::capnp::MapFloat64::Entry,
        ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::MapFloat64::Entry,
      ::capnp::Kind::STRUCT>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::tiledb::sm::serialization::capnp::MapFloat64::Entry,
    ::capnp::Kind::STRUCT>>
MapFloat64::Builder::disownEntries() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::MapFloat64::Entry,
      ::capnp::Kind::STRUCT>>::disown(_builder
                                          .getPointerField(
                                              ::capnp::bounded<0>() *
                                              ::capnp::POINTERS));
}

inline bool MapFloat64::Entry::Reader::hasKey() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool MapFloat64::Entry::Builder::hasKey() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader MapFloat64::Entry::Reader::getKey() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder MapFloat64::Entry::Builder::getKey() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MapFloat64::Entry::Builder::setKey(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder MapFloat64::Entry::Builder::initKey(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void MapFloat64::Entry::Builder::adoptKey(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> MapFloat64::Entry::Builder::disownKey() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline double MapFloat64::Entry::Reader::getValue() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double MapFloat64::Entry::Builder::getValue() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void MapFloat64::Entry::Builder::setValue(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Stats::Reader::hasTimers() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Stats::Builder::hasTimers() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::MapFloat64::Reader
Stats::Reader::getTimers() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::MapFloat64>::get(
          _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::MapFloat64::Builder
Stats::Builder::getTimers() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::MapFloat64>::get(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::MapFloat64::Pipeline
Stats::Pipeline::getTimers() {
  return ::tiledb::sm::serialization::capnp::MapFloat64::Pipeline(
      _typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Stats::Builder::setTimers(
    ::tiledb::sm::serialization::capnp::MapFloat64::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::MapFloat64>::
      set(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::MapFloat64::Builder
Stats::Builder::initTimers() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::MapFloat64>::init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Stats::Builder::adoptTimers(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::MapFloat64>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::MapFloat64>::
      adopt(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::MapFloat64>
Stats::Builder::disownTimers() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::MapFloat64>::disown(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Stats::Reader::hasCounters() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Stats::Builder::hasCounters() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::MapUInt64::Reader
Stats::Reader::getCounters() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::MapUInt64>::get(
          _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::MapUInt64::Builder
Stats::Builder::getCounters() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::MapUInt64>::get(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::MapUInt64::Pipeline
Stats::Pipeline::getCounters() {
  return ::tiledb::sm::serialization::capnp::MapUInt64::Pipeline(
      _typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Stats::Builder::setCounters(
    ::tiledb::sm::serialization::capnp::MapUInt64::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::MapUInt64>::
      set(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::MapUInt64::Builder
Stats::Builder::initCounters() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::MapUInt64>::init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Stats::Builder::adoptCounters(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::MapUInt64>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::MapUInt64>::
      adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::MapUInt64>
Stats::Builder::disownCounters() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::MapUInt64>::disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool UnorderedWriterState::Reader::getIsCoordsPass() const {
  return _reader.getDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool UnorderedWriterState::Builder::getIsCoordsPass() {
  return _builder.getDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UnorderedWriterState::Builder::setIsCoordsPass(bool value) {
  _builder.setDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool UnorderedWriterState::Reader::hasCellPos() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool UnorderedWriterState::Builder::hasCellPos() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
UnorderedWriterState::Reader::getCellPos() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
UnorderedWriterState::Builder::getCellPos() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UnorderedWriterState::Builder::setCellPos(
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline void UnorderedWriterState::Builder::setCellPos(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
UnorderedWriterState::Builder::initCellPos(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          size);
}
inline void UnorderedWriterState::Builder::adoptCellPos(
    ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
UnorderedWriterState::Builder::disownCellPos() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UnorderedWriterState::Reader::hasCoordDups() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool UnorderedWriterState::Builder::hasCoordDups() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
UnorderedWriterState::Reader::getCoordDups() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
UnorderedWriterState::Builder::getCoordDups() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void UnorderedWriterState::Builder::setCoordDups(
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline void UnorderedWriterState::Builder::setCoordDups(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
UnorderedWriterState::Builder::initCoordDups(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          size);
}
inline void UnorderedWriterState::Builder::adoptCoordDups(
    ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
UnorderedWriterState::Builder::disownCoordDups() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool UnorderedWriterState::Reader::hasFragMeta() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool UnorderedWriterState::Builder::hasFragMeta() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::FragmentMetadata::Reader
UnorderedWriterState::Reader::getFragMeta() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::FragmentMetadata>::get(
          _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::FragmentMetadata::Builder
UnorderedWriterState::Builder::getFragMeta() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::FragmentMetadata>::get(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::FragmentMetadata::Pipeline
UnorderedWriterState::Pipeline::getFragMeta() {
  return ::tiledb::sm::serialization::capnp::FragmentMetadata::Pipeline(
      _typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void UnorderedWriterState::Builder::setFragMeta(
    ::tiledb::sm::serialization::capnp::FragmentMetadata::Reader value) {
  ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::FragmentMetadata>::set(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::FragmentMetadata::Builder
UnorderedWriterState::Builder::initFragMeta() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::FragmentMetadata>::
      init(_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void UnorderedWriterState::Builder::adoptFragMeta(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::FragmentMetadata>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::FragmentMetadata>::
      adopt(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::FragmentMetadata>
UnorderedWriterState::Builder::disownFragMeta() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::FragmentMetadata>::
      disown(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Writer::Reader::getCheckCoordDups() const {
  return _reader.getDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Writer::Builder::getCheckCoordDups() {
  return _builder.getDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Writer::Builder::setCheckCoordDups(bool value) {
  _builder.setDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Writer::Reader::getCheckCoordOOB() const {
  return _reader.getDataField<bool>(::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool Writer::Builder::getCheckCoordOOB() {
  return _builder.getDataField<bool>(::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Writer::Builder::setCheckCoordOOB(bool value) {
  _builder.setDataField<bool>(::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Writer::Reader::getDedupCoords() const {
  return _reader.getDataField<bool>(::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool Writer::Builder::getDedupCoords() {
  return _builder.getDataField<bool>(::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Writer::Builder::setDedupCoords(bool value) {
  _builder.setDataField<bool>(::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Writer::Reader::hasSubarray() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Writer::Builder::hasSubarray() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::DomainArray::Reader
Writer::Reader::getSubarray() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::DomainArray>::get(
          _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::DomainArray::Builder
Writer::Builder::getSubarray() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::DomainArray>::get(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::DomainArray::Pipeline
Writer::Pipeline::getSubarray() {
  return ::tiledb::sm::serialization::capnp::DomainArray::Pipeline(
      _typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Writer::Builder::setSubarray(
    ::tiledb::sm::serialization::capnp::DomainArray::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::DomainArray>::
      set(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::DomainArray::Builder
Writer::Builder::initSubarray() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::DomainArray>::init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Writer::Builder::adoptSubarray(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::DomainArray>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::DomainArray>::
      adopt(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::DomainArray>
Writer::Builder::disownSubarray() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::DomainArray>::disown(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Writer::Reader::hasSubarrayRanges() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Writer::Builder::hasSubarrayRanges() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::Subarray::Reader
Writer::Reader::getSubarrayRanges() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Subarray>::get(
          _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::Subarray::Builder
Writer::Builder::getSubarrayRanges() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Subarray>::get(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::Subarray::Pipeline
Writer::Pipeline::getSubarrayRanges() {
  return ::tiledb::sm::serialization::capnp::Subarray::Pipeline(
      _typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Writer::Builder::setSubarrayRanges(
    ::tiledb::sm::serialization::capnp::Subarray::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Subarray>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::tiledb::sm::serialization::capnp::Subarray::Builder
Writer::Builder::initSubarrayRanges() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Subarray>::init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Writer::Builder::adoptSubarrayRanges(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::Subarray>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Subarray>::
      adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Subarray>
Writer::Builder::disownSubarrayRanges() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Subarray>::disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Writer::Reader::hasStats() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Writer::Builder::hasStats() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::Stats::Reader
Writer::Reader::getStats() const {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::
      get(_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::Stats::Builder
Writer::Builder::getStats() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::
      get(_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::Stats::Pipeline
Writer::Pipeline::getStats() {
  return ::tiledb::sm::serialization::capnp::Stats::Pipeline(
      _typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Writer::Builder::setStats(
    ::tiledb::sm::serialization::capnp::Stats::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::tiledb::sm::serialization::capnp::Stats::Builder
Writer::Builder::initStats() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::
      init(_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Writer::Builder::adoptStats(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::Stats>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Stats>
Writer::Builder::disownStats() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::
      disown(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Writer::Reader::hasGlobalWriteStateV1() const {
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Writer::Builder::hasGlobalWriteStateV1() {
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::GlobalWriteState::Reader
Writer::Reader::getGlobalWriteStateV1() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::GlobalWriteState>::get(
          _reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::GlobalWriteState::Builder
Writer::Builder::getGlobalWriteStateV1() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::GlobalWriteState>::get(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::GlobalWriteState::Pipeline
Writer::Pipeline::getGlobalWriteStateV1() {
  return ::tiledb::sm::serialization::capnp::GlobalWriteState::Pipeline(
      _typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Writer::Builder::setGlobalWriteStateV1(
    ::tiledb::sm::serialization::capnp::GlobalWriteState::Reader value) {
  ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::GlobalWriteState>::set(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::GlobalWriteState::Builder
Writer::Builder::initGlobalWriteStateV1() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::GlobalWriteState>::
      init(_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Writer::Builder::adoptGlobalWriteStateV1(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::GlobalWriteState>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::GlobalWriteState>::
      adopt(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::GlobalWriteState>
Writer::Builder::disownGlobalWriteStateV1() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::GlobalWriteState>::
      disown(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Writer::Reader::hasUnorderedWriterState() const {
  return !_reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Writer::Builder::hasUnorderedWriterState() {
  return !_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::UnorderedWriterState::Reader
Writer::Reader::getUnorderedWriterState() const {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::UnorderedWriterState>::
      get(_reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::UnorderedWriterState::Builder
Writer::Builder::getUnorderedWriterState() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::UnorderedWriterState>::
      get(_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::UnorderedWriterState::Pipeline
Writer::Pipeline::getUnorderedWriterState() {
  return ::tiledb::sm::serialization::capnp::UnorderedWriterState::Pipeline(
      _typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Writer::Builder::setUnorderedWriterState(
    ::tiledb::sm::serialization::capnp::UnorderedWriterState::Reader value) {
  ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::UnorderedWriterState>::
      set(_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::UnorderedWriterState::Builder
Writer::Builder::initUnorderedWriterState() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::UnorderedWriterState>::
      init(_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Writer::Builder::adoptUnorderedWriterState(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::UnorderedWriterState>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::UnorderedWriterState>::
      adopt(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::UnorderedWriterState>
Writer::Builder::disownUnorderedWriterState() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::UnorderedWriterState>::
      disown(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool SubarrayRanges::Reader::hasType() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool SubarrayRanges::Builder::hasType() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader SubarrayRanges::Reader::getType() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder SubarrayRanges::Builder::getType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SubarrayRanges::Builder::setType(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder SubarrayRanges::Builder::initType(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void SubarrayRanges::Builder::adoptType(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> SubarrayRanges::Builder::disownType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SubarrayRanges::Reader::getHasDefaultRange() const {
  return _reader.getDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool SubarrayRanges::Builder::getHasDefaultRange() {
  return _builder.getDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SubarrayRanges::Builder::setHasDefaultRange(bool value) {
  _builder.setDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool SubarrayRanges::Reader::hasBuffer() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool SubarrayRanges::Builder::hasBuffer() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Data::Reader SubarrayRanges::Reader::getBuffer() const {
  return ::capnp::_::PointerHelpers<::capnp::Data>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::Data::Builder SubarrayRanges::Builder::getBuffer() {
  return ::capnp::_::PointerHelpers<::capnp::Data>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void SubarrayRanges::Builder::setBuffer(::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Data>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Data::Builder SubarrayRanges::Builder::initBuffer(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Data>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void SubarrayRanges::Builder::adoptBuffer(
    ::capnp::Orphan<::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Data>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Data> SubarrayRanges::Builder::disownBuffer() {
  return ::capnp::_::PointerHelpers<::capnp::Data>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool SubarrayRanges::Reader::hasBufferSizes() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool SubarrayRanges::Builder::hasBufferSizes() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
SubarrayRanges::Reader::getBufferSizes() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
SubarrayRanges::Builder::getBufferSizes() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void SubarrayRanges::Builder::setBufferSizes(
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          value);
}
inline void SubarrayRanges::Builder::setBufferSizes(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
SubarrayRanges::Builder::initBufferSizes(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          size);
}
inline void SubarrayRanges::Builder::adoptBufferSizes(
    ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
SubarrayRanges::Builder::disownBufferSizes() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool SubarrayRanges::Reader::hasBufferStartSizes() const {
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool SubarrayRanges::Builder::hasBufferStartSizes() {
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
SubarrayRanges::Reader::getBufferStartSizes() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
SubarrayRanges::Builder::getBufferStartSizes() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void SubarrayRanges::Builder::setBufferStartSizes(
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          value);
}
inline void SubarrayRanges::Builder::setBufferStartSizes(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
SubarrayRanges::Builder::initBufferStartSizes(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          size);
}
inline void SubarrayRanges::Builder::adoptBufferStartSizes(
    ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
SubarrayRanges::Builder::disownBufferStartSizes() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline ::uint32_t LabelSubarrayRanges::Reader::getDimensionId() const {
  return _reader.getDataField<::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::uint32_t LabelSubarrayRanges::Builder::getDimensionId() {
  return _builder.getDataField<::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LabelSubarrayRanges::Builder::setDimensionId(::uint32_t value) {
  _builder.setDataField<::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool LabelSubarrayRanges::Reader::hasName() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool LabelSubarrayRanges::Builder::hasName() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader LabelSubarrayRanges::Reader::getName() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder LabelSubarrayRanges::Builder::getName() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LabelSubarrayRanges::Builder::setName(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder LabelSubarrayRanges::Builder::initName(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void LabelSubarrayRanges::Builder::adoptName(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text>
LabelSubarrayRanges::Builder::disownName() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LabelSubarrayRanges::Reader::hasRanges() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool LabelSubarrayRanges::Builder::hasRanges() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::SubarrayRanges::Reader
LabelSubarrayRanges::Reader::getRanges() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::SubarrayRanges>::get(
          _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::SubarrayRanges::Builder
LabelSubarrayRanges::Builder::getRanges() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::SubarrayRanges>::get(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::SubarrayRanges::Pipeline
LabelSubarrayRanges::Pipeline::getRanges() {
  return ::tiledb::sm::serialization::capnp::SubarrayRanges::Pipeline(
      _typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void LabelSubarrayRanges::Builder::setRanges(
    ::tiledb::sm::serialization::capnp::SubarrayRanges::Reader value) {
  ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::SubarrayRanges>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::SubarrayRanges::Builder
LabelSubarrayRanges::Builder::initRanges() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::SubarrayRanges>::init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LabelSubarrayRanges::Builder::adoptRanges(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::SubarrayRanges>&&
        value) {
  ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::SubarrayRanges>::adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::SubarrayRanges>
LabelSubarrayRanges::Builder::disownRanges() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::SubarrayRanges>::
      disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Subarray::Reader::hasLayout() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Subarray::Builder::hasLayout() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Subarray::Reader::getLayout() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Subarray::Builder::getLayout() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Subarray::Builder::setLayout(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Subarray::Builder::initLayout(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void Subarray::Builder::adoptLayout(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Subarray::Builder::disownLayout() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Subarray::Reader::hasRanges() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Subarray::Builder::hasRanges() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::SubarrayRanges,
    ::capnp::Kind::STRUCT>::Reader
Subarray::Reader::getRanges() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::SubarrayRanges,
      ::capnp::Kind::STRUCT>>::get(_reader
                                       .getPointerField(
                                           ::capnp::bounded<1>() *
                                           ::capnp::POINTERS));
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::SubarrayRanges,
    ::capnp::Kind::STRUCT>::Builder
Subarray::Builder::getRanges() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::SubarrayRanges,
      ::capnp::Kind::STRUCT>>::get(_builder
                                       .getPointerField(
                                           ::capnp::bounded<1>() *
                                           ::capnp::POINTERS));
}
inline void Subarray::Builder::setRanges(
    ::capnp::List<
        ::tiledb::sm::serialization::capnp::SubarrayRanges,
        ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::SubarrayRanges,
      ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::SubarrayRanges,
    ::capnp::Kind::STRUCT>::Builder
Subarray::Builder::initRanges(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::SubarrayRanges,
      ::capnp::Kind::STRUCT>>::
      init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          size);
}
inline void Subarray::Builder::adoptRanges(
    ::capnp::Orphan<::capnp::List<
        ::tiledb::sm::serialization::capnp::SubarrayRanges,
        ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::SubarrayRanges,
      ::capnp::Kind::STRUCT>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::tiledb::sm::serialization::capnp::SubarrayRanges,
    ::capnp::Kind::STRUCT>>
Subarray::Builder::disownRanges() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::SubarrayRanges,
      ::capnp::Kind::STRUCT>>::disown(_builder
                                          .getPointerField(
                                              ::capnp::bounded<1>() *
                                              ::capnp::POINTERS));
}

inline bool Subarray::Reader::hasStats() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Subarray::Builder::hasStats() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::Stats::Reader
Subarray::Reader::getStats() const {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::
      get(_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::Stats::Builder
Subarray::Builder::getStats() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::
      get(_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::Stats::Pipeline
Subarray::Pipeline::getStats() {
  return ::tiledb::sm::serialization::capnp::Stats::Pipeline(
      _typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Subarray::Builder::setStats(
    ::tiledb::sm::serialization::capnp::Stats::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::tiledb::sm::serialization::capnp::Stats::Builder
Subarray::Builder::initStats() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::
      init(_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Subarray::Builder::adoptStats(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::Stats>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Stats>
Subarray::Builder::disownStats() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::
      disown(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Subarray::Reader::hasRelevantFragments() const {
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Subarray::Builder::hasRelevantFragments() {
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>::Reader
Subarray::Reader::getRelevantFragments() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>::Builder
Subarray::Builder::getRelevantFragments() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Subarray::Builder::setRelevantFragments(
    ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          value);
}
inline void Subarray::Builder::setRelevantFragments(
    ::kj::ArrayPtr<const ::uint32_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>::Builder
Subarray::Builder::initRelevantFragments(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          size);
}
inline void Subarray::Builder::adoptRelevantFragments(
    ::capnp::Orphan<::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>
Subarray::Builder::disownRelevantFragments() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::uint32_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Subarray::Reader::hasLabelRanges() const {
  return !_reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Subarray::Builder::hasLabelRanges() {
  return !_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::LabelSubarrayRanges,
    ::capnp::Kind::STRUCT>::Reader
Subarray::Reader::getLabelRanges() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::LabelSubarrayRanges,
      ::capnp::Kind::STRUCT>>::get(_reader
                                       .getPointerField(
                                           ::capnp::bounded<4>() *
                                           ::capnp::POINTERS));
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::LabelSubarrayRanges,
    ::capnp::Kind::STRUCT>::Builder
Subarray::Builder::getLabelRanges() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::LabelSubarrayRanges,
      ::capnp::Kind::STRUCT>>::get(_builder
                                       .getPointerField(
                                           ::capnp::bounded<4>() *
                                           ::capnp::POINTERS));
}
inline void Subarray::Builder::setLabelRanges(
    ::capnp::List<
        ::tiledb::sm::serialization::capnp::LabelSubarrayRanges,
        ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::LabelSubarrayRanges,
      ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::LabelSubarrayRanges,
    ::capnp::Kind::STRUCT>::Builder
Subarray::Builder::initLabelRanges(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::LabelSubarrayRanges,
      ::capnp::Kind::STRUCT>>::
      init(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
          size);
}
inline void Subarray::Builder::adoptLabelRanges(
    ::capnp::Orphan<::capnp::List<
        ::tiledb::sm::serialization::capnp::LabelSubarrayRanges,
        ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::LabelSubarrayRanges,
      ::capnp::Kind::STRUCT>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::tiledb::sm::serialization::capnp::LabelSubarrayRanges,
    ::capnp::Kind::STRUCT>>
Subarray::Builder::disownLabelRanges() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::LabelSubarrayRanges,
      ::capnp::Kind::STRUCT>>::disown(_builder
                                          .getPointerField(
                                              ::capnp::bounded<4>() *
                                              ::capnp::POINTERS));
}

inline bool Subarray::Reader::hasAttributeRanges() const {
  return !_reader.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Subarray::Builder::hasAttributeRanges() {
  return !_builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::Map<
    ::capnp::Text,
    ::tiledb::sm::serialization::capnp::SubarrayRanges>::Reader
Subarray::Reader::getAttributeRanges() const {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::SubarrayRanges>>::
      get(_reader.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::Map<
    ::capnp::Text,
    ::tiledb::sm::serialization::capnp::SubarrayRanges>::Builder
Subarray::Builder::getAttributeRanges() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::SubarrayRanges>>::
      get(_builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::Map<
    ::capnp::Text,
    ::tiledb::sm::serialization::capnp::SubarrayRanges>::Pipeline
Subarray::Pipeline::getAttributeRanges() {
  return ::tiledb::sm::serialization::capnp::
      Map<::capnp::Text, ::tiledb::sm::serialization::capnp::SubarrayRanges>::
          Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void Subarray::Builder::setAttributeRanges(
    ::tiledb::sm::serialization::capnp::Map<
        ::capnp::Text,
        ::tiledb::sm::serialization::capnp::SubarrayRanges>::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::SubarrayRanges>>::
      set(_builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::Map<
    ::capnp::Text,
    ::tiledb::sm::serialization::capnp::SubarrayRanges>::Builder
Subarray::Builder::initAttributeRanges() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::SubarrayRanges>>::
      init(_builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Subarray::Builder::adoptAttributeRanges(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::Map<
        ::capnp::Text,
        ::tiledb::sm::serialization::capnp::SubarrayRanges>>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::SubarrayRanges>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Map<
    ::capnp::Text,
    ::tiledb::sm::serialization::capnp::SubarrayRanges>>
Subarray::Builder::disownAttributeRanges() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::SubarrayRanges>>::
      disown(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Subarray::Reader::getCoalesceRanges() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, true);
}

inline bool Subarray::Builder::getCoalesceRanges() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, true);
}
inline void Subarray::Builder::setCoalesceRanges(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, true);
}

inline bool SubarrayPartitioner::Reader::hasSubarray() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool SubarrayPartitioner::Builder::hasSubarray() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::Subarray::Reader
SubarrayPartitioner::Reader::getSubarray() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Subarray>::get(
          _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::Subarray::Builder
SubarrayPartitioner::Builder::getSubarray() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Subarray>::get(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::Subarray::Pipeline
SubarrayPartitioner::Pipeline::getSubarray() {
  return ::tiledb::sm::serialization::capnp::Subarray::Pipeline(
      _typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void SubarrayPartitioner::Builder::setSubarray(
    ::tiledb::sm::serialization::capnp::Subarray::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Subarray>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::tiledb::sm::serialization::capnp::Subarray::Builder
SubarrayPartitioner::Builder::initSubarray() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Subarray>::init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SubarrayPartitioner::Builder::adoptSubarray(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::Subarray>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Subarray>::
      adopt(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Subarray>
SubarrayPartitioner::Builder::disownSubarray() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Subarray>::disown(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SubarrayPartitioner::Reader::hasBudget() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool SubarrayPartitioner::Builder::hasBudget() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::AttributeBufferSize,
    ::capnp::Kind::STRUCT>::Reader
SubarrayPartitioner::Reader::getBudget() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::AttributeBufferSize,
      ::capnp::Kind::STRUCT>>::get(_reader
                                       .getPointerField(
                                           ::capnp::bounded<1>() *
                                           ::capnp::POINTERS));
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::AttributeBufferSize,
    ::capnp::Kind::STRUCT>::Builder
SubarrayPartitioner::Builder::getBudget() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::AttributeBufferSize,
      ::capnp::Kind::STRUCT>>::get(_builder
                                       .getPointerField(
                                           ::capnp::bounded<1>() *
                                           ::capnp::POINTERS));
}
inline void SubarrayPartitioner::Builder::setBudget(
    ::capnp::List<
        ::tiledb::sm::serialization::capnp::AttributeBufferSize,
        ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::AttributeBufferSize,
      ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::AttributeBufferSize,
    ::capnp::Kind::STRUCT>::Builder
SubarrayPartitioner::Builder::initBudget(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::AttributeBufferSize,
      ::capnp::Kind::STRUCT>>::
      init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          size);
}
inline void SubarrayPartitioner::Builder::adoptBudget(
    ::capnp::Orphan<::capnp::List<
        ::tiledb::sm::serialization::capnp::AttributeBufferSize,
        ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::AttributeBufferSize,
      ::capnp::Kind::STRUCT>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::tiledb::sm::serialization::capnp::AttributeBufferSize,
    ::capnp::Kind::STRUCT>>
SubarrayPartitioner::Builder::disownBudget() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::AttributeBufferSize,
      ::capnp::Kind::STRUCT>>::disown(_builder
                                          .getPointerField(
                                              ::capnp::bounded<1>() *
                                              ::capnp::POINTERS));
}

inline bool SubarrayPartitioner::Reader::hasCurrent() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool SubarrayPartitioner::Builder::hasCurrent() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::SubarrayPartitioner::PartitionInfo::
    Reader
    SubarrayPartitioner::Reader::getCurrent() const {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::SubarrayPartitioner::PartitionInfo>::
      get(_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::SubarrayPartitioner::PartitionInfo::
    Builder
    SubarrayPartitioner::Builder::getCurrent() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::SubarrayPartitioner::PartitionInfo>::
      get(_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::SubarrayPartitioner::PartitionInfo::
    Pipeline
    SubarrayPartitioner::Pipeline::getCurrent() {
  return ::tiledb::sm::serialization::capnp::SubarrayPartitioner::
      PartitionInfo::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void SubarrayPartitioner::Builder::setCurrent(
    ::tiledb::sm::serialization::capnp::SubarrayPartitioner::PartitionInfo::
        Reader value) {
  ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::SubarrayPartitioner::PartitionInfo>::
      set(_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::SubarrayPartitioner::PartitionInfo::
    Builder
    SubarrayPartitioner::Builder::initCurrent() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::SubarrayPartitioner::PartitionInfo>::
      init(_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void SubarrayPartitioner::Builder::adoptCurrent(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::SubarrayPartitioner::
                        PartitionInfo>&& value) {
  ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::SubarrayPartitioner::PartitionInfo>::
      adopt(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<
    ::tiledb::sm::serialization::capnp::SubarrayPartitioner::PartitionInfo>
SubarrayPartitioner::Builder::disownCurrent() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::SubarrayPartitioner::PartitionInfo>::
      disown(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool SubarrayPartitioner::Reader::hasState() const {
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool SubarrayPartitioner::Builder::hasState() {
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::SubarrayPartitioner::State::Reader
SubarrayPartitioner::Reader::getState() const {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::SubarrayPartitioner::State>::
      get(_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::SubarrayPartitioner::State::Builder
SubarrayPartitioner::Builder::getState() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::SubarrayPartitioner::State>::
      get(_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::SubarrayPartitioner::State::Pipeline
SubarrayPartitioner::Pipeline::getState() {
  return ::tiledb::sm::serialization::capnp::SubarrayPartitioner::State::
      Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void SubarrayPartitioner::Builder::setState(
    ::tiledb::sm::serialization::capnp::SubarrayPartitioner::State::Reader
        value) {
  ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::SubarrayPartitioner::State>::
      set(_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::SubarrayPartitioner::State::Builder
SubarrayPartitioner::Builder::initState() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::SubarrayPartitioner::State>::
      init(_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void SubarrayPartitioner::Builder::adoptState(
    ::capnp::Orphan<
        ::tiledb::sm::serialization::capnp::SubarrayPartitioner::State>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::SubarrayPartitioner::State>::
      adopt(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<
    ::tiledb::sm::serialization::capnp::SubarrayPartitioner::State>
SubarrayPartitioner::Builder::disownState() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::SubarrayPartitioner::State>::
      disown(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline ::uint64_t SubarrayPartitioner::Reader::getMemoryBudget() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::uint64_t SubarrayPartitioner::Builder::getMemoryBudget() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SubarrayPartitioner::Builder::setMemoryBudget(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline ::uint64_t SubarrayPartitioner::Reader::getMemoryBudgetVar() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::uint64_t SubarrayPartitioner::Builder::getMemoryBudgetVar() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SubarrayPartitioner::Builder::setMemoryBudgetVar(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline ::uint64_t SubarrayPartitioner::Reader::getMemoryBudgetValidity() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline ::uint64_t SubarrayPartitioner::Builder::getMemoryBudgetValidity() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void SubarrayPartitioner::Builder::setMemoryBudgetValidity(
    ::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool SubarrayPartitioner::Reader::hasStats() const {
  return !_reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline bool SubarrayPartitioner::Builder::hasStats() {
  return !_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::Stats::Reader
SubarrayPartitioner::Reader::getStats() const {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::
      get(_reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::Stats::Builder
SubarrayPartitioner::Builder::getStats() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::
      get(_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::Stats::Pipeline
SubarrayPartitioner::Pipeline::getStats() {
  return ::tiledb::sm::serialization::capnp::Stats::Pipeline(
      _typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void SubarrayPartitioner::Builder::setStats(
    ::tiledb::sm::serialization::capnp::Stats::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::set(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      value);
}
inline ::tiledb::sm::serialization::capnp::Stats::Builder
SubarrayPartitioner::Builder::initStats() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::
      init(_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void SubarrayPartitioner::Builder::adoptStats(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::Stats>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::adopt(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Stats>
SubarrayPartitioner::Builder::disownStats() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::
      disown(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool SubarrayPartitioner::PartitionInfo::Reader::hasSubarray() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool SubarrayPartitioner::PartitionInfo::Builder::hasSubarray() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::Subarray::Reader
SubarrayPartitioner::PartitionInfo::Reader::getSubarray() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Subarray>::get(
          _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::Subarray::Builder
SubarrayPartitioner::PartitionInfo::Builder::getSubarray() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Subarray>::get(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::Subarray::Pipeline
SubarrayPartitioner::PartitionInfo::Pipeline::getSubarray() {
  return ::tiledb::sm::serialization::capnp::Subarray::Pipeline(
      _typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void SubarrayPartitioner::PartitionInfo::Builder::setSubarray(
    ::tiledb::sm::serialization::capnp::Subarray::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Subarray>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::tiledb::sm::serialization::capnp::Subarray::Builder
SubarrayPartitioner::PartitionInfo::Builder::initSubarray() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Subarray>::init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SubarrayPartitioner::PartitionInfo::Builder::adoptSubarray(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::Subarray>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Subarray>::
      adopt(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Subarray>
SubarrayPartitioner::PartitionInfo::Builder::disownSubarray() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Subarray>::disown(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline ::uint64_t SubarrayPartitioner::PartitionInfo::Reader::getStart() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::uint64_t SubarrayPartitioner::PartitionInfo::Builder::getStart() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SubarrayPartitioner::PartitionInfo::Builder::setStart(
    ::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline ::uint64_t SubarrayPartitioner::PartitionInfo::Reader::getEnd() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::uint64_t SubarrayPartitioner::PartitionInfo::Builder::getEnd() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SubarrayPartitioner::PartitionInfo::Builder::setEnd(
    ::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool SubarrayPartitioner::PartitionInfo::Reader::getSplitMultiRange()
    const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}

inline bool SubarrayPartitioner::PartitionInfo::Builder::getSplitMultiRange() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}
inline void SubarrayPartitioner::PartitionInfo::Builder::setSplitMultiRange(
    bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS, value);
}

inline ::uint64_t SubarrayPartitioner::State::Reader::getStart() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::uint64_t SubarrayPartitioner::State::Builder::getStart() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SubarrayPartitioner::State::Builder::setStart(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline ::uint64_t SubarrayPartitioner::State::Reader::getEnd() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::uint64_t SubarrayPartitioner::State::Builder::getEnd() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SubarrayPartitioner::State::Builder::setEnd(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool SubarrayPartitioner::State::Reader::hasSingleRange() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool SubarrayPartitioner::State::Builder::hasSingleRange() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::Subarray,
    ::capnp::Kind::STRUCT>::Reader
SubarrayPartitioner::State::Reader::getSingleRange() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Subarray,
      ::capnp::Kind::STRUCT>>::get(_reader
                                       .getPointerField(
                                           ::capnp::bounded<0>() *
                                           ::capnp::POINTERS));
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::Subarray,
    ::capnp::Kind::STRUCT>::Builder
SubarrayPartitioner::State::Builder::getSingleRange() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Subarray,
      ::capnp::Kind::STRUCT>>::get(_builder
                                       .getPointerField(
                                           ::capnp::bounded<0>() *
                                           ::capnp::POINTERS));
}
inline void SubarrayPartitioner::State::Builder::setSingleRange(
    ::capnp::List<
        ::tiledb::sm::serialization::capnp::Subarray,
        ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Subarray,
      ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::Subarray,
    ::capnp::Kind::STRUCT>::Builder
SubarrayPartitioner::State::Builder::initSingleRange(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Subarray,
      ::capnp::Kind::STRUCT>>::
      init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          size);
}
inline void SubarrayPartitioner::State::Builder::adoptSingleRange(
    ::capnp::Orphan<::capnp::List<
        ::tiledb::sm::serialization::capnp::Subarray,
        ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Subarray,
      ::capnp::Kind::STRUCT>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::tiledb::sm::serialization::capnp::Subarray,
    ::capnp::Kind::STRUCT>>
SubarrayPartitioner::State::Builder::disownSingleRange() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Subarray,
      ::capnp::Kind::STRUCT>>::disown(_builder
                                          .getPointerField(
                                              ::capnp::bounded<0>() *
                                              ::capnp::POINTERS));
}

inline bool SubarrayPartitioner::State::Reader::hasMultiRange() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool SubarrayPartitioner::State::Builder::hasMultiRange() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::Subarray,
    ::capnp::Kind::STRUCT>::Reader
SubarrayPartitioner::State::Reader::getMultiRange() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Subarray,
      ::capnp::Kind::STRUCT>>::get(_reader
                                       .getPointerField(
                                           ::capnp::bounded<1>() *
                                           ::capnp::POINTERS));
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::Subarray,
    ::capnp::Kind::STRUCT>::Builder
SubarrayPartitioner::State::Builder::getMultiRange() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Subarray,
      ::capnp::Kind::STRUCT>>::get(_builder
                                       .getPointerField(
                                           ::capnp::bounded<1>() *
                                           ::capnp::POINTERS));
}
inline void SubarrayPartitioner::State::Builder::setMultiRange(
    ::capnp::List<
        ::tiledb::sm::serialization::capnp::Subarray,
        ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Subarray,
      ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::Subarray,
    ::capnp::Kind::STRUCT>::Builder
SubarrayPartitioner::State::Builder::initMultiRange(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Subarray,
      ::capnp::Kind::STRUCT>>::
      init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          size);
}
inline void SubarrayPartitioner::State::Builder::adoptMultiRange(
    ::capnp::Orphan<::capnp::List<
        ::tiledb::sm::serialization::capnp::Subarray,
        ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Subarray,
      ::capnp::Kind::STRUCT>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::tiledb::sm::serialization::capnp::Subarray,
    ::capnp::Kind::STRUCT>>
SubarrayPartitioner::State::Builder::disownMultiRange() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::Subarray,
      ::capnp::Kind::STRUCT>>::disown(_builder
                                          .getPointerField(
                                              ::capnp::bounded<1>() *
                                              ::capnp::POINTERS));
}

inline bool ReadState::Reader::getOverflowed() const {
  return _reader.getDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ReadState::Builder::getOverflowed() {
  return _builder.getDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ReadState::Builder::setOverflowed(bool value) {
  _builder.setDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ReadState::Reader::getUnsplittable() const {
  return _reader.getDataField<bool>(::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool ReadState::Builder::getUnsplittable() {
  return _builder.getDataField<bool>(::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ReadState::Builder::setUnsplittable(bool value) {
  _builder.setDataField<bool>(::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ReadState::Reader::getInitialized() const {
  return _reader.getDataField<bool>(::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool ReadState::Builder::getInitialized() {
  return _builder.getDataField<bool>(::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ReadState::Builder::setInitialized(bool value) {
  _builder.setDataField<bool>(::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool ReadState::Reader::hasSubarrayPartitioner() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ReadState::Builder::hasSubarrayPartitioner() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::SubarrayPartitioner::Reader
ReadState::Reader::getSubarrayPartitioner() const {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::SubarrayPartitioner>::
      get(_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::SubarrayPartitioner::Builder
ReadState::Builder::getSubarrayPartitioner() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::SubarrayPartitioner>::
      get(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::SubarrayPartitioner::Pipeline
ReadState::Pipeline::getSubarrayPartitioner() {
  return ::tiledb::sm::serialization::capnp::SubarrayPartitioner::Pipeline(
      _typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ReadState::Builder::setSubarrayPartitioner(
    ::tiledb::sm::serialization::capnp::SubarrayPartitioner::Reader value) {
  ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::SubarrayPartitioner>::
      set(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::SubarrayPartitioner::Builder
ReadState::Builder::initSubarrayPartitioner() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::SubarrayPartitioner>::
      init(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ReadState::Builder::adoptSubarrayPartitioner(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::SubarrayPartitioner>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::SubarrayPartitioner>::
      adopt(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::SubarrayPartitioner>
ReadState::Builder::disownSubarrayPartitioner() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::SubarrayPartitioner>::
      disown(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ConditionClause::Reader::hasFieldName() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ConditionClause::Builder::hasFieldName() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader ConditionClause::Reader::getFieldName() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder ConditionClause::Builder::getFieldName() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ConditionClause::Builder::setFieldName(
    ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder ConditionClause::Builder::initFieldName(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void ConditionClause::Builder::adoptFieldName(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text>
ConditionClause::Builder::disownFieldName() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ConditionClause::Reader::hasValue() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ConditionClause::Builder::hasValue() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Data::Reader ConditionClause::Reader::getValue() const {
  return ::capnp::_::PointerHelpers<::capnp::Data>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::Data::Builder ConditionClause::Builder::getValue() {
  return ::capnp::_::PointerHelpers<::capnp::Data>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ConditionClause::Builder::setValue(::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Data>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Data::Builder ConditionClause::Builder::initValue(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Data>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void ConditionClause::Builder::adoptValue(
    ::capnp::Orphan<::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Data>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Data> ConditionClause::Builder::disownValue() {
  return ::capnp::_::PointerHelpers<::capnp::Data>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ConditionClause::Reader::hasOp() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ConditionClause::Builder::hasOp() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader ConditionClause::Reader::getOp() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder ConditionClause::Builder::getOp() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ConditionClause::Builder::setOp(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder ConditionClause::Builder::initOp(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void ConditionClause::Builder::adoptOp(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> ConditionClause::Builder::disownOp() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ConditionClause::Reader::getUseEnumeration() const {
  return _reader.getDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ConditionClause::Builder::getUseEnumeration() {
  return _builder.getDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ConditionClause::Builder::setUseEnumeration(bool value) {
  _builder.setDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ASTNode::Reader::getIsExpression() const {
  return _reader.getDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ASTNode::Builder::getIsExpression() {
  return _builder.getDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ASTNode::Builder::setIsExpression(bool value) {
  _builder.setDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ASTNode::Reader::hasFieldName() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ASTNode::Builder::hasFieldName() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader ASTNode::Reader::getFieldName() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder ASTNode::Builder::getFieldName() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ASTNode::Builder::setFieldName(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder ASTNode::Builder::initFieldName(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void ASTNode::Builder::adoptFieldName(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> ASTNode::Builder::disownFieldName() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ASTNode::Reader::hasValue() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ASTNode::Builder::hasValue() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Data::Reader ASTNode::Reader::getValue() const {
  return ::capnp::_::PointerHelpers<::capnp::Data>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::Data::Builder ASTNode::Builder::getValue() {
  return ::capnp::_::PointerHelpers<::capnp::Data>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ASTNode::Builder::setValue(::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Data>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Data::Builder ASTNode::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Data>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void ASTNode::Builder::adoptValue(
    ::capnp::Orphan<::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Data>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Data> ASTNode::Builder::disownValue() {
  return ::capnp::_::PointerHelpers<::capnp::Data>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ASTNode::Reader::hasOp() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ASTNode::Builder::hasOp() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader ASTNode::Reader::getOp() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder ASTNode::Builder::getOp() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ASTNode::Builder::setOp(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder ASTNode::Builder::initOp(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void ASTNode::Builder::adoptOp(::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> ASTNode::Builder::disownOp() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ASTNode::Reader::hasChildren() const {
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ASTNode::Builder::hasChildren() {
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::ASTNode,
    ::capnp::Kind::STRUCT>::Reader
ASTNode::Reader::getChildren() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::ASTNode,
      ::capnp::Kind::STRUCT>>::get(_reader
                                       .getPointerField(
                                           ::capnp::bounded<3>() *
                                           ::capnp::POINTERS));
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::ASTNode,
    ::capnp::Kind::STRUCT>::Builder
ASTNode::Builder::getChildren() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::ASTNode,
      ::capnp::Kind::STRUCT>>::get(_builder
                                       .getPointerField(
                                           ::capnp::bounded<3>() *
                                           ::capnp::POINTERS));
}
inline void ASTNode::Builder::setChildren(
    ::capnp::List<
        ::tiledb::sm::serialization::capnp::ASTNode,
        ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::ASTNode,
      ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::ASTNode,
    ::capnp::Kind::STRUCT>::Builder
ASTNode::Builder::initChildren(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::ASTNode,
      ::capnp::Kind::STRUCT>>::
      init(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          size);
}
inline void ASTNode::Builder::adoptChildren(
    ::capnp::Orphan<::capnp::List<
        ::tiledb::sm::serialization::capnp::ASTNode,
        ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::ASTNode,
      ::capnp::Kind::STRUCT>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::tiledb::sm::serialization::capnp::ASTNode,
    ::capnp::Kind::STRUCT>>
ASTNode::Builder::disownChildren() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::ASTNode,
      ::capnp::Kind::STRUCT>>::disown(_builder
                                          .getPointerField(
                                              ::capnp::bounded<3>() *
                                              ::capnp::POINTERS));
}

inline bool ASTNode::Reader::hasCombinationOp() const {
  return !_reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ASTNode::Builder::hasCombinationOp() {
  return !_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader ASTNode::Reader::getCombinationOp() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder ASTNode::Builder::getCombinationOp() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void ASTNode::Builder::setCombinationOp(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder ASTNode::Builder::initCombinationOp(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      size);
}
inline void ASTNode::Builder::adoptCombinationOp(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> ASTNode::Builder::disownCombinationOp() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool ASTNode::Reader::getUseEnumeration() const {
  return _reader.getDataField<bool>(::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool ASTNode::Builder::getUseEnumeration() {
  return _builder.getDataField<bool>(::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ASTNode::Builder::setUseEnumeration(bool value) {
  _builder.setDataField<bool>(::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Condition::Reader::hasClauses() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Condition::Builder::hasClauses() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::ConditionClause,
    ::capnp::Kind::STRUCT>::Reader
Condition::Reader::getClauses() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::ConditionClause,
      ::capnp::Kind::STRUCT>>::get(_reader
                                       .getPointerField(
                                           ::capnp::bounded<0>() *
                                           ::capnp::POINTERS));
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::ConditionClause,
    ::capnp::Kind::STRUCT>::Builder
Condition::Builder::getClauses() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::ConditionClause,
      ::capnp::Kind::STRUCT>>::get(_builder
                                       .getPointerField(
                                           ::capnp::bounded<0>() *
                                           ::capnp::POINTERS));
}
inline void Condition::Builder::setClauses(
    ::capnp::List<
        ::tiledb::sm::serialization::capnp::ConditionClause,
        ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::ConditionClause,
      ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::ConditionClause,
    ::capnp::Kind::STRUCT>::Builder
Condition::Builder::initClauses(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::ConditionClause,
      ::capnp::Kind::STRUCT>>::
      init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          size);
}
inline void Condition::Builder::adoptClauses(
    ::capnp::Orphan<::capnp::List<
        ::tiledb::sm::serialization::capnp::ConditionClause,
        ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::ConditionClause,
      ::capnp::Kind::STRUCT>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::tiledb::sm::serialization::capnp::ConditionClause,
    ::capnp::Kind::STRUCT>>
Condition::Builder::disownClauses() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::ConditionClause,
      ::capnp::Kind::STRUCT>>::disown(_builder
                                          .getPointerField(
                                              ::capnp::bounded<0>() *
                                              ::capnp::POINTERS));
}

inline bool Condition::Reader::hasClauseCombinationOps() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Condition::Builder::hasClauseCombinationOps() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader
Condition::Reader::getClauseCombinationOps() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(
          _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
Condition::Builder::getClauseCombinationOps() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Condition::Builder::setClauseCombinationOps(
    ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline void Condition::Builder::setClauseCombinationOps(
    ::kj::ArrayPtr<const ::capnp::Text::Reader> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
Condition::Builder::initClauseCombinationOps(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          size);
}
inline void Condition::Builder::adoptClauseCombinationOps(
    ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>&&
        value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
Condition::Builder::disownClauseCombinationOps() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Condition::Reader::hasTree() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Condition::Builder::hasTree() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::ASTNode::Reader
Condition::Reader::getTree() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ASTNode>::get(
          _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::ASTNode::Builder
Condition::Builder::getTree() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ASTNode>::get(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::ASTNode::Pipeline
Condition::Pipeline::getTree() {
  return ::tiledb::sm::serialization::capnp::ASTNode::Pipeline(
      _typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Condition::Builder::setTree(
    ::tiledb::sm::serialization::capnp::ASTNode::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::ASTNode>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::tiledb::sm::serialization::capnp::ASTNode::Builder
Condition::Builder::initTree() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ASTNode>::init(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Condition::Builder::adoptTree(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::ASTNode>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::ASTNode>::
      adopt(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::ASTNode>
Condition::Builder::disownTree() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ASTNode>::disown(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool QueryReader::Reader::hasLayout() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool QueryReader::Builder::hasLayout() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader QueryReader::Reader::getLayout() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder QueryReader::Builder::getLayout() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QueryReader::Builder::setLayout(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder QueryReader::Builder::initLayout(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void QueryReader::Builder::adoptLayout(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> QueryReader::Builder::disownLayout() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool QueryReader::Reader::hasSubarray() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool QueryReader::Builder::hasSubarray() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::Subarray::Reader
QueryReader::Reader::getSubarray() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Subarray>::get(
          _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::Subarray::Builder
QueryReader::Builder::getSubarray() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Subarray>::get(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::Subarray::Pipeline
QueryReader::Pipeline::getSubarray() {
  return ::tiledb::sm::serialization::capnp::Subarray::Pipeline(
      _typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void QueryReader::Builder::setSubarray(
    ::tiledb::sm::serialization::capnp::Subarray::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Subarray>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::tiledb::sm::serialization::capnp::Subarray::Builder
QueryReader::Builder::initSubarray() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Subarray>::init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void QueryReader::Builder::adoptSubarray(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::Subarray>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Subarray>::
      adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Subarray>
QueryReader::Builder::disownSubarray() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Subarray>::disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool QueryReader::Reader::hasReadState() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool QueryReader::Builder::hasReadState() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::ReadState::Reader
QueryReader::Reader::getReadState() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ReadState>::get(
          _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::ReadState::Builder
QueryReader::Builder::getReadState() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ReadState>::get(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::ReadState::Pipeline
QueryReader::Pipeline::getReadState() {
  return ::tiledb::sm::serialization::capnp::ReadState::Pipeline(
      _typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void QueryReader::Builder::setReadState(
    ::tiledb::sm::serialization::capnp::ReadState::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::ReadState>::
      set(_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::ReadState::Builder
QueryReader::Builder::initReadState() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ReadState>::init(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void QueryReader::Builder::adoptReadState(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::ReadState>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::ReadState>::
      adopt(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::ReadState>
QueryReader::Builder::disownReadState() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ReadState>::disown(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool QueryReader::Reader::hasCondition() const {
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool QueryReader::Builder::hasCondition() {
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::Condition::Reader
QueryReader::Reader::getCondition() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Condition>::get(
          _reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::Condition::Builder
QueryReader::Builder::getCondition() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Condition>::get(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::Condition::Pipeline
QueryReader::Pipeline::getCondition() {
  return ::tiledb::sm::serialization::capnp::Condition::Pipeline(
      _typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void QueryReader::Builder::setCondition(
    ::tiledb::sm::serialization::capnp::Condition::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Condition>::
      set(_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::Condition::Builder
QueryReader::Builder::initCondition() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Condition>::init(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void QueryReader::Builder::adoptCondition(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::Condition>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Condition>::
      adopt(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Condition>
QueryReader::Builder::disownCondition() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Condition>::disown(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool QueryReader::Reader::hasStats() const {
  return !_reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline bool QueryReader::Builder::hasStats() {
  return !_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::Stats::Reader
QueryReader::Reader::getStats() const {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::
      get(_reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::Stats::Builder
QueryReader::Builder::getStats() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::
      get(_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::Stats::Pipeline
QueryReader::Pipeline::getStats() {
  return ::tiledb::sm::serialization::capnp::Stats::Pipeline(
      _typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void QueryReader::Builder::setStats(
    ::tiledb::sm::serialization::capnp::Stats::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::set(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      value);
}
inline ::tiledb::sm::serialization::capnp::Stats::Builder
QueryReader::Builder::initStats() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::
      init(_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void QueryReader::Builder::adoptStats(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::Stats>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::adopt(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Stats>
QueryReader::Builder::disownStats() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::
      disown(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Delete::Reader::hasCondition() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Delete::Builder::hasCondition() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::Condition::Reader
Delete::Reader::getCondition() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Condition>::get(
          _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::Condition::Builder
Delete::Builder::getCondition() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Condition>::get(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::Condition::Pipeline
Delete::Pipeline::getCondition() {
  return ::tiledb::sm::serialization::capnp::Condition::Pipeline(
      _typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Delete::Builder::setCondition(
    ::tiledb::sm::serialization::capnp::Condition::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Condition>::
      set(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::Condition::Builder
Delete::Builder::initCondition() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Condition>::init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Delete::Builder::adoptCondition(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::Condition>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Condition>::
      adopt(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Condition>
Delete::Builder::disownCondition() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Condition>::disown(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Delete::Reader::hasStats() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Delete::Builder::hasStats() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::Stats::Reader
Delete::Reader::getStats() const {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::
      get(_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::Stats::Builder
Delete::Builder::getStats() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::
      get(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::Stats::Pipeline
Delete::Pipeline::getStats() {
  return ::tiledb::sm::serialization::capnp::Stats::Pipeline(
      _typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Delete::Builder::setStats(
    ::tiledb::sm::serialization::capnp::Stats::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::tiledb::sm::serialization::capnp::Stats::Builder
Delete::Builder::initStats() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::
      init(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Delete::Builder::adoptStats(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::Stats>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Stats>
Delete::Builder::disownStats() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::
      disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline ::uint32_t ResultCellSlab::Reader::getFragIdx() const {
  return _reader.getDataField<::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::uint32_t ResultCellSlab::Builder::getFragIdx() {
  return _builder.getDataField<::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ResultCellSlab::Builder::setFragIdx(::uint32_t value) {
  _builder.setDataField<::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline ::uint64_t ResultCellSlab::Reader::getTileIdx() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::uint64_t ResultCellSlab::Builder::getTileIdx() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ResultCellSlab::Builder::setTileIdx(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline ::uint64_t ResultCellSlab::Reader::getStart() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline ::uint64_t ResultCellSlab::Builder::getStart() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ResultCellSlab::Builder::setStart(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline ::uint64_t ResultCellSlab::Reader::getLength() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline ::uint64_t ResultCellSlab::Builder::getLength() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ResultCellSlab::Builder::setLength(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline ::uint64_t FragmentIndex::Reader::getTileIdx() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::uint64_t FragmentIndex::Builder::getTileIdx() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void FragmentIndex::Builder::setTileIdx(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline ::uint64_t FragmentIndex::Reader::getCellIdx() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::uint64_t FragmentIndex::Builder::getCellIdx() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void FragmentIndex::Builder::setCellIdx(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ReadStateIndex::Reader::hasResultCellSlab() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ReadStateIndex::Builder::hasResultCellSlab() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::ResultCellSlab,
    ::capnp::Kind::STRUCT>::Reader
ReadStateIndex::Reader::getResultCellSlab() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::ResultCellSlab,
      ::capnp::Kind::STRUCT>>::get(_reader
                                       .getPointerField(
                                           ::capnp::bounded<0>() *
                                           ::capnp::POINTERS));
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::ResultCellSlab,
    ::capnp::Kind::STRUCT>::Builder
ReadStateIndex::Builder::getResultCellSlab() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::ResultCellSlab,
      ::capnp::Kind::STRUCT>>::get(_builder
                                       .getPointerField(
                                           ::capnp::bounded<0>() *
                                           ::capnp::POINTERS));
}
inline void ReadStateIndex::Builder::setResultCellSlab(
    ::capnp::List<
        ::tiledb::sm::serialization::capnp::ResultCellSlab,
        ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::ResultCellSlab,
      ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::ResultCellSlab,
    ::capnp::Kind::STRUCT>::Builder
ReadStateIndex::Builder::initResultCellSlab(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::ResultCellSlab,
      ::capnp::Kind::STRUCT>>::
      init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          size);
}
inline void ReadStateIndex::Builder::adoptResultCellSlab(
    ::capnp::Orphan<::capnp::List<
        ::tiledb::sm::serialization::capnp::ResultCellSlab,
        ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::ResultCellSlab,
      ::capnp::Kind::STRUCT>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::tiledb::sm::serialization::capnp::ResultCellSlab,
    ::capnp::Kind::STRUCT>>
ReadStateIndex::Builder::disownResultCellSlab() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::ResultCellSlab,
      ::capnp::Kind::STRUCT>>::disown(_builder
                                          .getPointerField(
                                              ::capnp::bounded<0>() *
                                              ::capnp::POINTERS));
}

inline bool ReadStateIndex::Reader::hasFragTileIdx() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ReadStateIndex::Builder::hasFragTileIdx() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::FragmentIndex,
    ::capnp::Kind::STRUCT>::Reader
ReadStateIndex::Reader::getFragTileIdx() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::FragmentIndex,
      ::capnp::Kind::STRUCT>>::get(_reader
                                       .getPointerField(
                                           ::capnp::bounded<1>() *
                                           ::capnp::POINTERS));
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::FragmentIndex,
    ::capnp::Kind::STRUCT>::Builder
ReadStateIndex::Builder::getFragTileIdx() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::FragmentIndex,
      ::capnp::Kind::STRUCT>>::get(_builder
                                       .getPointerField(
                                           ::capnp::bounded<1>() *
                                           ::capnp::POINTERS));
}
inline void ReadStateIndex::Builder::setFragTileIdx(
    ::capnp::List<
        ::tiledb::sm::serialization::capnp::FragmentIndex,
        ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::FragmentIndex,
      ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::FragmentIndex,
    ::capnp::Kind::STRUCT>::Builder
ReadStateIndex::Builder::initFragTileIdx(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::FragmentIndex,
      ::capnp::Kind::STRUCT>>::
      init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          size);
}
inline void ReadStateIndex::Builder::adoptFragTileIdx(
    ::capnp::Orphan<::capnp::List<
        ::tiledb::sm::serialization::capnp::FragmentIndex,
        ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::FragmentIndex,
      ::capnp::Kind::STRUCT>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::tiledb::sm::serialization::capnp::FragmentIndex,
    ::capnp::Kind::STRUCT>>
ReadStateIndex::Builder::disownFragTileIdx() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::FragmentIndex,
      ::capnp::Kind::STRUCT>>::disown(_builder
                                          .getPointerField(
                                              ::capnp::bounded<1>() *
                                              ::capnp::POINTERS));
}

inline bool ReadStateIndex::Reader::getDoneAddingResultTiles() const {
  return _reader.getDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ReadStateIndex::Builder::getDoneAddingResultTiles() {
  return _builder.getDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ReadStateIndex::Builder::setDoneAddingResultTiles(bool value) {
  _builder.setDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ReaderIndex::Reader::hasLayout() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ReaderIndex::Builder::hasLayout() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader ReaderIndex::Reader::getLayout() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder ReaderIndex::Builder::getLayout() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ReaderIndex::Builder::setLayout(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder ReaderIndex::Builder::initLayout(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void ReaderIndex::Builder::adoptLayout(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> ReaderIndex::Builder::disownLayout() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ReaderIndex::Reader::hasSubarray() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ReaderIndex::Builder::hasSubarray() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::Subarray::Reader
ReaderIndex::Reader::getSubarray() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Subarray>::get(
          _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::Subarray::Builder
ReaderIndex::Builder::getSubarray() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Subarray>::get(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::Subarray::Pipeline
ReaderIndex::Pipeline::getSubarray() {
  return ::tiledb::sm::serialization::capnp::Subarray::Pipeline(
      _typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ReaderIndex::Builder::setSubarray(
    ::tiledb::sm::serialization::capnp::Subarray::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Subarray>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::tiledb::sm::serialization::capnp::Subarray::Builder
ReaderIndex::Builder::initSubarray() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Subarray>::init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ReaderIndex::Builder::adoptSubarray(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::Subarray>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Subarray>::
      adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Subarray>
ReaderIndex::Builder::disownSubarray() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Subarray>::disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ReaderIndex::Reader::hasReadState() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ReaderIndex::Builder::hasReadState() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::ReadStateIndex::Reader
ReaderIndex::Reader::getReadState() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ReadStateIndex>::get(
          _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::ReadStateIndex::Builder
ReaderIndex::Builder::getReadState() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ReadStateIndex>::get(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::ReadStateIndex::Pipeline
ReaderIndex::Pipeline::getReadState() {
  return ::tiledb::sm::serialization::capnp::ReadStateIndex::Pipeline(
      _typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void ReaderIndex::Builder::setReadState(
    ::tiledb::sm::serialization::capnp::ReadStateIndex::Reader value) {
  ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ReadStateIndex>::set(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::ReadStateIndex::Builder
ReaderIndex::Builder::initReadState() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ReadStateIndex>::init(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ReaderIndex::Builder::adoptReadState(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::ReadStateIndex>&&
        value) {
  ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ReadStateIndex>::adopt(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::ReadStateIndex>
ReaderIndex::Builder::disownReadState() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::ReadStateIndex>::
      disown(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ReaderIndex::Reader::hasCondition() const {
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ReaderIndex::Builder::hasCondition() {
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::Condition::Reader
ReaderIndex::Reader::getCondition() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Condition>::get(
          _reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::Condition::Builder
ReaderIndex::Builder::getCondition() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Condition>::get(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::Condition::Pipeline
ReaderIndex::Pipeline::getCondition() {
  return ::tiledb::sm::serialization::capnp::Condition::Pipeline(
      _typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void ReaderIndex::Builder::setCondition(
    ::tiledb::sm::serialization::capnp::Condition::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Condition>::
      set(_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::Condition::Builder
ReaderIndex::Builder::initCondition() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Condition>::init(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ReaderIndex::Builder::adoptCondition(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::Condition>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Condition>::
      adopt(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Condition>
ReaderIndex::Builder::disownCondition() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Condition>::disown(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool ReaderIndex::Reader::hasStats() const {
  return !_reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ReaderIndex::Builder::hasStats() {
  return !_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::Stats::Reader
ReaderIndex::Reader::getStats() const {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::
      get(_reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::Stats::Builder
ReaderIndex::Builder::getStats() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::
      get(_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::Stats::Pipeline
ReaderIndex::Pipeline::getStats() {
  return ::tiledb::sm::serialization::capnp::Stats::Pipeline(
      _typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void ReaderIndex::Builder::setStats(
    ::tiledb::sm::serialization::capnp::Stats::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::set(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      value);
}
inline ::tiledb::sm::serialization::capnp::Stats::Builder
ReaderIndex::Builder::initStats() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::
      init(_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void ReaderIndex::Builder::adoptStats(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::Stats>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::adopt(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Stats>
ReaderIndex::Builder::disownStats() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::
      disown(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Query::Reader::hasAttributeBufferHeaders() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Builder::hasAttributeBufferHeaders() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::AttributeBufferHeader,
    ::capnp::Kind::STRUCT>::Reader
Query::Reader::getAttributeBufferHeaders() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::AttributeBufferHeader,
      ::capnp::Kind::STRUCT>>::get(_reader
                                       .getPointerField(
                                           ::capnp::bounded<0>() *
                                           ::capnp::POINTERS));
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::AttributeBufferHeader,
    ::capnp::Kind::STRUCT>::Builder
Query::Builder::getAttributeBufferHeaders() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::AttributeBufferHeader,
      ::capnp::Kind::STRUCT>>::get(_builder
                                       .getPointerField(
                                           ::capnp::bounded<0>() *
                                           ::capnp::POINTERS));
}
inline void Query::Builder::setAttributeBufferHeaders(
    ::capnp::List<
        ::tiledb::sm::serialization::capnp::AttributeBufferHeader,
        ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::AttributeBufferHeader,
      ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::AttributeBufferHeader,
    ::capnp::Kind::STRUCT>::Builder
Query::Builder::initAttributeBufferHeaders(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::AttributeBufferHeader,
      ::capnp::Kind::STRUCT>>::
      init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          size);
}
inline void Query::Builder::adoptAttributeBufferHeaders(
    ::capnp::Orphan<::capnp::List<
        ::tiledb::sm::serialization::capnp::AttributeBufferHeader,
        ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::AttributeBufferHeader,
      ::capnp::Kind::STRUCT>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::tiledb::sm::serialization::capnp::AttributeBufferHeader,
    ::capnp::Kind::STRUCT>>
Query::Builder::disownAttributeBufferHeaders() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::AttributeBufferHeader,
      ::capnp::Kind::STRUCT>>::disown(_builder
                                          .getPointerField(
                                              ::capnp::bounded<0>() *
                                              ::capnp::POINTERS));
}

inline bool Query::Reader::hasLayout() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Builder::hasLayout() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Query::Reader::getLayout() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Query::Builder::getLayout() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Query::Builder::setLayout(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Query::Builder::initLayout(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void Query::Builder::adoptLayout(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Query::Builder::disownLayout() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Query::Reader::hasStatus() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Builder::hasStatus() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Query::Reader::getStatus() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Query::Builder::getStatus() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Query::Builder::setStatus(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Query::Builder::initStatus(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void Query::Builder::adoptStatus(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Query::Builder::disownStatus() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Query::Reader::hasType() const {
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Builder::hasType() {
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Query::Reader::getType() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Query::Builder::getType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Query::Builder::setType(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Query::Builder::initType(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      size);
}
inline void Query::Builder::adoptType(::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Query::Builder::disownType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Query::Reader::hasWriter() const {
  return !_reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Builder::hasWriter() {
  return !_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::Writer::Reader
Query::Reader::getWriter() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Writer>::get(
          _reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::Writer::Builder
Query::Builder::getWriter() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Writer>::get(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::Writer::Pipeline
Query::Pipeline::getWriter() {
  return ::tiledb::sm::serialization::capnp::Writer::Pipeline(
      _typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Query::Builder::setWriter(
    ::tiledb::sm::serialization::capnp::Writer::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Writer>::set(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      value);
}
inline ::tiledb::sm::serialization::capnp::Writer::Builder
Query::Builder::initWriter() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Writer>::init(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Query::Builder::adoptWriter(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::Writer>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Writer>::adopt(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Writer>
Query::Builder::disownWriter() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Writer>::disown(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Query::Reader::hasReader() const {
  return !_reader.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Builder::hasReader() {
  return !_builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::QueryReader::Reader
Query::Reader::getReader() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::QueryReader>::get(
          _reader.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::QueryReader::Builder
Query::Builder::getReader() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::QueryReader>::get(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::QueryReader::Pipeline
Query::Pipeline::getReader() {
  return ::tiledb::sm::serialization::capnp::QueryReader::Pipeline(
      _typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void Query::Builder::setReader(
    ::tiledb::sm::serialization::capnp::QueryReader::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::QueryReader>::
      set(_builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::QueryReader::Builder
Query::Builder::initReader() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::QueryReader>::init(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Query::Builder::adoptReader(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::QueryReader>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::QueryReader>::
      adopt(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::QueryReader>
Query::Builder::disownReader() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::QueryReader>::disown(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Query::Reader::hasArray() const {
  return !_reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Builder::hasArray() {
  return !_builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::Array::Reader
Query::Reader::getArray() const {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Array>::
      get(_reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::Array::Builder
Query::Builder::getArray() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Array>::
      get(_builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::Array::Pipeline
Query::Pipeline::getArray() {
  return ::tiledb::sm::serialization::capnp::Array::Pipeline(
      _typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void Query::Builder::setArray(
    ::tiledb::sm::serialization::capnp::Array::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Array>::set(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      value);
}
inline ::tiledb::sm::serialization::capnp::Array::Builder
Query::Builder::initArray() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Array>::
      init(_builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Query::Builder::adoptArray(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::Array>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Array>::adopt(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Array>
Query::Builder::disownArray() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Array>::
      disown(
          _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline ::uint64_t Query::Reader::getTotalFixedLengthBufferBytes() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::uint64_t Query::Builder::getTotalFixedLengthBufferBytes() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Query::Builder::setTotalFixedLengthBufferBytes(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline ::uint64_t Query::Reader::getTotalVarLenBufferBytes() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::uint64_t Query::Builder::getTotalVarLenBufferBytes() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Query::Builder::setTotalVarLenBufferBytes(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline ::uint64_t Query::Reader::getTotalValidityBufferBytes() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline ::uint64_t Query::Builder::getTotalValidityBufferBytes() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Query::Builder::setTotalValidityBufferBytes(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Query::Reader::hasVarOffsetsMode() const {
  return !_reader.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Builder::hasVarOffsetsMode() {
  return !_builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Query::Reader::getVarOffsetsMode() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Query::Builder::getVarOffsetsMode() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Query::Builder::setVarOffsetsMode(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Query::Builder::initVarOffsetsMode(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
      size);
}
inline void Query::Builder::adoptVarOffsetsMode(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Query::Builder::disownVarOffsetsMode() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Query::Reader::getVarOffsetsAddExtraElement() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<192>() * ::capnp::ELEMENTS);
}

inline bool Query::Builder::getVarOffsetsAddExtraElement() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<192>() * ::capnp::ELEMENTS);
}
inline void Query::Builder::setVarOffsetsAddExtraElement(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<192>() * ::capnp::ELEMENTS, value);
}

inline ::int32_t Query::Reader::getVarOffsetsBitsize() const {
  return _reader.getDataField<::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline ::int32_t Query::Builder::getVarOffsetsBitsize() {
  return _builder.getDataField<::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Query::Builder::setVarOffsetsBitsize(::int32_t value) {
  _builder.setDataField<::int32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Query::Reader::hasConfig() const {
  return !_reader.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Builder::hasConfig() {
  return !_builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::Config::Reader
Query::Reader::getConfig() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Config>::get(
          _reader.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::Config::Builder
Query::Builder::getConfig() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Config>::get(
          _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::Config::Pipeline
Query::Pipeline::getConfig() {
  return ::tiledb::sm::serialization::capnp::Config::Pipeline(
      _typeless.getPointerField(8));
}
#endif  // !CAPNP_LITE
inline void Query::Builder::setConfig(
    ::tiledb::sm::serialization::capnp::Config::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Config>::set(
      _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS),
      value);
}
inline ::tiledb::sm::serialization::capnp::Config::Builder
Query::Builder::initConfig() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Config>::init(
          _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Query::Builder::adoptConfig(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::Config>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Config>::adopt(
      _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Config>
Query::Builder::disownConfig() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Config>::disown(
          _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Query::Reader::hasStats() const {
  return !_reader.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Builder::hasStats() {
  return !_builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::Stats::Reader
Query::Reader::getStats() const {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::
      get(_reader.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::Stats::Builder
Query::Builder::getStats() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::
      get(_builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::Stats::Pipeline
Query::Pipeline::getStats() {
  return ::tiledb::sm::serialization::capnp::Stats::Pipeline(
      _typeless.getPointerField(9));
}
#endif  // !CAPNP_LITE
inline void Query::Builder::setStats(
    ::tiledb::sm::serialization::capnp::Stats::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::set(
      _builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS),
      value);
}
inline ::tiledb::sm::serialization::capnp::Stats::Builder
Query::Builder::initStats() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::
      init(_builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Query::Builder::adoptStats(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::Stats>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::adopt(
      _builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Stats>
Query::Builder::disownStats() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Stats>::
      disown(
          _builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Query::Reader::hasReaderIndex() const {
  return !_reader.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Builder::hasReaderIndex() {
  return !_builder.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::ReaderIndex::Reader
Query::Reader::getReaderIndex() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ReaderIndex>::get(
          _reader.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::ReaderIndex::Builder
Query::Builder::getReaderIndex() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ReaderIndex>::get(
          _builder.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::ReaderIndex::Pipeline
Query::Pipeline::getReaderIndex() {
  return ::tiledb::sm::serialization::capnp::ReaderIndex::Pipeline(
      _typeless.getPointerField(10));
}
#endif  // !CAPNP_LITE
inline void Query::Builder::setReaderIndex(
    ::tiledb::sm::serialization::capnp::ReaderIndex::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::ReaderIndex>::
      set(_builder.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::ReaderIndex::Builder
Query::Builder::initReaderIndex() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ReaderIndex>::init(
          _builder.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Query::Builder::adoptReaderIndex(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::ReaderIndex>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::ReaderIndex>::
      adopt(
          _builder.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::ReaderIndex>
Query::Builder::disownReaderIndex() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ReaderIndex>::disown(
          _builder.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Query::Reader::hasDenseReader() const {
  return !_reader.getPointerField(::capnp::bounded<11>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Builder::hasDenseReader() {
  return !_builder.getPointerField(::capnp::bounded<11>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::QueryReader::Reader
Query::Reader::getDenseReader() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::QueryReader>::get(
          _reader.getPointerField(::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::QueryReader::Builder
Query::Builder::getDenseReader() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::QueryReader>::get(
          _builder.getPointerField(::capnp::bounded<11>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::QueryReader::Pipeline
Query::Pipeline::getDenseReader() {
  return ::tiledb::sm::serialization::capnp::QueryReader::Pipeline(
      _typeless.getPointerField(11));
}
#endif  // !CAPNP_LITE
inline void Query::Builder::setDenseReader(
    ::tiledb::sm::serialization::capnp::QueryReader::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::QueryReader>::
      set(_builder.getPointerField(::capnp::bounded<11>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::QueryReader::Builder
Query::Builder::initDenseReader() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::QueryReader>::init(
          _builder.getPointerField(::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Query::Builder::adoptDenseReader(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::QueryReader>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::QueryReader>::
      adopt(
          _builder.getPointerField(::capnp::bounded<11>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::QueryReader>
Query::Builder::disownDenseReader() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::QueryReader>::disown(
          _builder.getPointerField(::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool Query::Reader::hasDelete() const {
  return !_reader.getPointerField(::capnp::bounded<12>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Builder::hasDelete() {
  return !_builder.getPointerField(::capnp::bounded<12>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::Delete::Reader
Query::Reader::getDelete() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Delete>::get(
          _reader.getPointerField(::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::Delete::Builder
Query::Builder::getDelete() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Delete>::get(
          _builder.getPointerField(::capnp::bounded<12>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::Delete::Pipeline
Query::Pipeline::getDelete() {
  return ::tiledb::sm::serialization::capnp::Delete::Pipeline(
      _typeless.getPointerField(12));
}
#endif  // !CAPNP_LITE
inline void Query::Builder::setDelete(
    ::tiledb::sm::serialization::capnp::Delete::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Delete>::set(
      _builder.getPointerField(::capnp::bounded<12>() * ::capnp::POINTERS),
      value);
}
inline ::tiledb::sm::serialization::capnp::Delete::Builder
Query::Builder::initDelete() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Delete>::init(
          _builder.getPointerField(::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Query::Builder::adoptDelete(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::Delete>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Delete>::adopt(
      _builder.getPointerField(::capnp::bounded<12>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Delete>
Query::Builder::disownDelete() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Delete>::disown(
          _builder.getPointerField(::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool Query::Reader::hasWrittenFragmentInfo() const {
  return !_reader.getPointerField(::capnp::bounded<13>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Builder::hasWrittenFragmentInfo() {
  return !_builder.getPointerField(::capnp::bounded<13>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::WrittenFragmentInfo,
    ::capnp::Kind::STRUCT>::Reader
Query::Reader::getWrittenFragmentInfo() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::WrittenFragmentInfo,
      ::capnp::Kind::STRUCT>>::get(_reader
                                       .getPointerField(
                                           ::capnp::bounded<13>() *
                                           ::capnp::POINTERS));
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::WrittenFragmentInfo,
    ::capnp::Kind::STRUCT>::Builder
Query::Builder::getWrittenFragmentInfo() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::WrittenFragmentInfo,
      ::capnp::Kind::STRUCT>>::get(_builder
                                       .getPointerField(
                                           ::capnp::bounded<13>() *
                                           ::capnp::POINTERS));
}
inline void Query::Builder::setWrittenFragmentInfo(
    ::capnp::List<
        ::tiledb::sm::serialization::capnp::WrittenFragmentInfo,
        ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::WrittenFragmentInfo,
      ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<13>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::WrittenFragmentInfo,
    ::capnp::Kind::STRUCT>::Builder
Query::Builder::initWrittenFragmentInfo(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::WrittenFragmentInfo,
      ::capnp::Kind::STRUCT>>::
      init(
          _builder.getPointerField(::capnp::bounded<13>() * ::capnp::POINTERS),
          size);
}
inline void Query::Builder::adoptWrittenFragmentInfo(
    ::capnp::Orphan<::capnp::List<
        ::tiledb::sm::serialization::capnp::WrittenFragmentInfo,
        ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::WrittenFragmentInfo,
      ::capnp::Kind::STRUCT>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<13>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::tiledb::sm::serialization::capnp::WrittenFragmentInfo,
    ::capnp::Kind::STRUCT>>
Query::Builder::disownWrittenFragmentInfo() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::WrittenFragmentInfo,
      ::capnp::Kind::STRUCT>>::disown(_builder
                                          .getPointerField(
                                              ::capnp::bounded<13>() *
                                              ::capnp::POINTERS));
}

inline bool Query::Reader::hasWrittenBuffers() const {
  return !_reader.getPointerField(::capnp::bounded<14>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Builder::hasWrittenBuffers() {
  return !_builder.getPointerField(::capnp::bounded<14>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader
Query::Reader::getWrittenBuffers() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(
          _reader.getPointerField(::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
Query::Builder::getWrittenBuffers() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(
          _builder.getPointerField(::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void Query::Builder::setWrittenBuffers(
    ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(
          _builder.getPointerField(::capnp::bounded<14>() * ::capnp::POINTERS),
          value);
}
inline void Query::Builder::setWrittenBuffers(
    ::kj::ArrayPtr<const ::capnp::Text::Reader> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(
          _builder.getPointerField(::capnp::bounded<14>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
Query::Builder::initWrittenBuffers(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::init(
          _builder.getPointerField(::capnp::bounded<14>() * ::capnp::POINTERS),
          size);
}
inline void Query::Builder::adoptWrittenBuffers(
    ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>&&
        value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::adopt(
          _builder.getPointerField(::capnp::bounded<14>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
Query::Builder::disownWrittenBuffers() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::disown(
          _builder.getPointerField(::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool NonEmptyDomain::Reader::hasNonEmptyDomain() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool NonEmptyDomain::Builder::hasNonEmptyDomain() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::DomainArray::Reader
NonEmptyDomain::Reader::getNonEmptyDomain() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::DomainArray>::get(
          _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::DomainArray::Builder
NonEmptyDomain::Builder::getNonEmptyDomain() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::DomainArray>::get(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::DomainArray::Pipeline
NonEmptyDomain::Pipeline::getNonEmptyDomain() {
  return ::tiledb::sm::serialization::capnp::DomainArray::Pipeline(
      _typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void NonEmptyDomain::Builder::setNonEmptyDomain(
    ::tiledb::sm::serialization::capnp::DomainArray::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::DomainArray>::
      set(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::DomainArray::Builder
NonEmptyDomain::Builder::initNonEmptyDomain() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::DomainArray>::init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void NonEmptyDomain::Builder::adoptNonEmptyDomain(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::DomainArray>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::DomainArray>::
      adopt(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::DomainArray>
NonEmptyDomain::Builder::disownNonEmptyDomain() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::DomainArray>::disown(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool NonEmptyDomain::Reader::getIsEmpty() const {
  return _reader.getDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool NonEmptyDomain::Builder::getIsEmpty() {
  return _builder.getDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void NonEmptyDomain::Builder::setIsEmpty(bool value) {
  _builder.setDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool NonEmptyDomain::Reader::hasSizes() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool NonEmptyDomain::Builder::hasSizes() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
NonEmptyDomain::Reader::getSizes() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
NonEmptyDomain::Builder::getSizes() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void NonEmptyDomain::Builder::setSizes(
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline void NonEmptyDomain::Builder::setSizes(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
NonEmptyDomain::Builder::initSizes(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          size);
}
inline void NonEmptyDomain::Builder::adoptSizes(
    ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
NonEmptyDomain::Builder::disownSizes() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool NonEmptyDomainList::Reader::hasNonEmptyDomains() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool NonEmptyDomainList::Builder::hasNonEmptyDomains() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::NonEmptyDomain,
    ::capnp::Kind::STRUCT>::Reader
NonEmptyDomainList::Reader::getNonEmptyDomains() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::NonEmptyDomain,
      ::capnp::Kind::STRUCT>>::get(_reader
                                       .getPointerField(
                                           ::capnp::bounded<0>() *
                                           ::capnp::POINTERS));
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::NonEmptyDomain,
    ::capnp::Kind::STRUCT>::Builder
NonEmptyDomainList::Builder::getNonEmptyDomains() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::NonEmptyDomain,
      ::capnp::Kind::STRUCT>>::get(_builder
                                       .getPointerField(
                                           ::capnp::bounded<0>() *
                                           ::capnp::POINTERS));
}
inline void NonEmptyDomainList::Builder::setNonEmptyDomains(
    ::capnp::List<
        ::tiledb::sm::serialization::capnp::NonEmptyDomain,
        ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::NonEmptyDomain,
      ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::NonEmptyDomain,
    ::capnp::Kind::STRUCT>::Builder
NonEmptyDomainList::Builder::initNonEmptyDomains(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::NonEmptyDomain,
      ::capnp::Kind::STRUCT>>::
      init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          size);
}
inline void NonEmptyDomainList::Builder::adoptNonEmptyDomains(
    ::capnp::Orphan<::capnp::List<
        ::tiledb::sm::serialization::capnp::NonEmptyDomain,
        ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::NonEmptyDomain,
      ::capnp::Kind::STRUCT>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::tiledb::sm::serialization::capnp::NonEmptyDomain,
    ::capnp::Kind::STRUCT>>
NonEmptyDomainList::Builder::disownNonEmptyDomains() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::NonEmptyDomain,
      ::capnp::Kind::STRUCT>>::disown(_builder
                                          .getPointerField(
                                              ::capnp::bounded<0>() *
                                              ::capnp::POINTERS));
}

inline bool AttributeBufferSize::Reader::hasAttribute() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool AttributeBufferSize::Builder::hasAttribute() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader AttributeBufferSize::Reader::getAttribute() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder AttributeBufferSize::Builder::getAttribute() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AttributeBufferSize::Builder::setAttribute(
    ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder AttributeBufferSize::Builder::initAttribute(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void AttributeBufferSize::Builder::adoptAttribute(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text>
AttributeBufferSize::Builder::disownAttribute() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline ::uint64_t AttributeBufferSize::Reader::getOffsetBytes() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::uint64_t AttributeBufferSize::Builder::getOffsetBytes() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AttributeBufferSize::Builder::setOffsetBytes(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline ::uint64_t AttributeBufferSize::Reader::getDataBytes() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::uint64_t AttributeBufferSize::Builder::getDataBytes() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AttributeBufferSize::Builder::setDataBytes(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline ::uint64_t AttributeBufferSize::Reader::getValidityBytes() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline ::uint64_t AttributeBufferSize::Builder::getValidityBytes() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AttributeBufferSize::Builder::setValidityBytes(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool MaxBufferSizes::Reader::hasMaxBufferSizes() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool MaxBufferSizes::Builder::hasMaxBufferSizes() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::AttributeBufferSize,
    ::capnp::Kind::STRUCT>::Reader
MaxBufferSizes::Reader::getMaxBufferSizes() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::AttributeBufferSize,
      ::capnp::Kind::STRUCT>>::get(_reader
                                       .getPointerField(
                                           ::capnp::bounded<0>() *
                                           ::capnp::POINTERS));
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::AttributeBufferSize,
    ::capnp::Kind::STRUCT>::Builder
MaxBufferSizes::Builder::getMaxBufferSizes() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::AttributeBufferSize,
      ::capnp::Kind::STRUCT>>::get(_builder
                                       .getPointerField(
                                           ::capnp::bounded<0>() *
                                           ::capnp::POINTERS));
}
inline void MaxBufferSizes::Builder::setMaxBufferSizes(
    ::capnp::List<
        ::tiledb::sm::serialization::capnp::AttributeBufferSize,
        ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::AttributeBufferSize,
      ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::AttributeBufferSize,
    ::capnp::Kind::STRUCT>::Builder
MaxBufferSizes::Builder::initMaxBufferSizes(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::AttributeBufferSize,
      ::capnp::Kind::STRUCT>>::
      init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          size);
}
inline void MaxBufferSizes::Builder::adoptMaxBufferSizes(
    ::capnp::Orphan<::capnp::List<
        ::tiledb::sm::serialization::capnp::AttributeBufferSize,
        ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::AttributeBufferSize,
      ::capnp::Kind::STRUCT>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::tiledb::sm::serialization::capnp::AttributeBufferSize,
    ::capnp::Kind::STRUCT>>
MaxBufferSizes::Builder::disownMaxBufferSizes() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::AttributeBufferSize,
      ::capnp::Kind::STRUCT>>::disown(_builder
                                          .getPointerField(
                                              ::capnp::bounded<0>() *
                                              ::capnp::POINTERS));
}

inline bool ArrayMetadata::Reader::hasEntries() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArrayMetadata::Builder::hasEntries() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::ArrayMetadata::MetadataEntry,
    ::capnp::Kind::STRUCT>::Reader
ArrayMetadata::Reader::getEntries() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::ArrayMetadata::MetadataEntry,
      ::capnp::Kind::STRUCT>>::get(_reader
                                       .getPointerField(
                                           ::capnp::bounded<0>() *
                                           ::capnp::POINTERS));
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::ArrayMetadata::MetadataEntry,
    ::capnp::Kind::STRUCT>::Builder
ArrayMetadata::Builder::getEntries() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::ArrayMetadata::MetadataEntry,
      ::capnp::Kind::STRUCT>>::get(_builder
                                       .getPointerField(
                                           ::capnp::bounded<0>() *
                                           ::capnp::POINTERS));
}
inline void ArrayMetadata::Builder::setEntries(
    ::capnp::List<
        ::tiledb::sm::serialization::capnp::ArrayMetadata::MetadataEntry,
        ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::ArrayMetadata::MetadataEntry,
      ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::ArrayMetadata::MetadataEntry,
    ::capnp::Kind::STRUCT>::Builder
ArrayMetadata::Builder::initEntries(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::ArrayMetadata::MetadataEntry,
      ::capnp::Kind::STRUCT>>::
      init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          size);
}
inline void ArrayMetadata::Builder::adoptEntries(
    ::capnp::Orphan<::capnp::List<
        ::tiledb::sm::serialization::capnp::ArrayMetadata::MetadataEntry,
        ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::ArrayMetadata::MetadataEntry,
      ::capnp::Kind::STRUCT>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::tiledb::sm::serialization::capnp::ArrayMetadata::MetadataEntry,
    ::capnp::Kind::STRUCT>>
ArrayMetadata::Builder::disownEntries() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::ArrayMetadata::MetadataEntry,
      ::capnp::Kind::STRUCT>>::disown(_builder
                                          .getPointerField(
                                              ::capnp::bounded<0>() *
                                              ::capnp::POINTERS));
}

inline bool ArrayMetadata::MetadataEntry::Reader::hasKey() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArrayMetadata::MetadataEntry::Builder::hasKey() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader ArrayMetadata::MetadataEntry::Reader::getKey()
    const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder ArrayMetadata::MetadataEntry::Builder::getKey() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ArrayMetadata::MetadataEntry::Builder::setKey(
    ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder ArrayMetadata::MetadataEntry::Builder::initKey(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void ArrayMetadata::MetadataEntry::Builder::adoptKey(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text>
ArrayMetadata::MetadataEntry::Builder::disownKey() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ArrayMetadata::MetadataEntry::Reader::hasType() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArrayMetadata::MetadataEntry::Builder::hasType() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader ArrayMetadata::MetadataEntry::Reader::getType()
    const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder ArrayMetadata::MetadataEntry::Builder::getType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ArrayMetadata::MetadataEntry::Builder::setType(
    ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder ArrayMetadata::MetadataEntry::Builder::initType(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void ArrayMetadata::MetadataEntry::Builder::adoptType(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text>
ArrayMetadata::MetadataEntry::Builder::disownType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline ::uint32_t ArrayMetadata::MetadataEntry::Reader::getValueNum() const {
  return _reader.getDataField<::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::uint32_t ArrayMetadata::MetadataEntry::Builder::getValueNum() {
  return _builder.getDataField<::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ArrayMetadata::MetadataEntry::Builder::setValueNum(
    ::uint32_t value) {
  _builder.setDataField<::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ArrayMetadata::MetadataEntry::Reader::hasValue() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArrayMetadata::MetadataEntry::Builder::hasValue() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Data::Reader ArrayMetadata::MetadataEntry::Reader::getValue()
    const {
  return ::capnp::_::PointerHelpers<::capnp::Data>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::Data::Builder
ArrayMetadata::MetadataEntry::Builder::getValue() {
  return ::capnp::_::PointerHelpers<::capnp::Data>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ArrayMetadata::MetadataEntry::Builder::setValue(
    ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Data>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Data::Builder ArrayMetadata::MetadataEntry::Builder::initValue(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Data>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void ArrayMetadata::MetadataEntry::Builder::adoptValue(
    ::capnp::Orphan<::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Data>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Data>
ArrayMetadata::MetadataEntry::Builder::disownValue() {
  return ::capnp::_::PointerHelpers<::capnp::Data>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ArrayMetadata::MetadataEntry::Reader::getDel() const {
  return _reader.getDataField<bool>(::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline bool ArrayMetadata::MetadataEntry::Builder::getDel() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void ArrayMetadata::MetadataEntry::Builder::setDel(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

inline bool ArrayDirectory::Reader::hasUnfilteredFragmentUris() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArrayDirectory::Builder::hasUnfilteredFragmentUris() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader
ArrayDirectory::Reader::getUnfilteredFragmentUris() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(
          _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
ArrayDirectory::Builder::getUnfilteredFragmentUris() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ArrayDirectory::Builder::setUnfilteredFragmentUris(
    ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline void ArrayDirectory::Builder::setUnfilteredFragmentUris(
    ::kj::ArrayPtr<const ::capnp::Text::Reader> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
ArrayDirectory::Builder::initUnfilteredFragmentUris(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          size);
}
inline void ArrayDirectory::Builder::adoptUnfilteredFragmentUris(
    ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>&&
        value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::adopt(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
ArrayDirectory::Builder::disownUnfilteredFragmentUris() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::disown(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ArrayDirectory::Reader::hasConsolidatedCommitUris() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArrayDirectory::Builder::hasConsolidatedCommitUris() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader
ArrayDirectory::Reader::getConsolidatedCommitUris() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(
          _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
ArrayDirectory::Builder::getConsolidatedCommitUris() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ArrayDirectory::Builder::setConsolidatedCommitUris(
    ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline void ArrayDirectory::Builder::setConsolidatedCommitUris(
    ::kj::ArrayPtr<const ::capnp::Text::Reader> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
ArrayDirectory::Builder::initConsolidatedCommitUris(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          size);
}
inline void ArrayDirectory::Builder::adoptConsolidatedCommitUris(
    ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>&&
        value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
ArrayDirectory::Builder::disownConsolidatedCommitUris() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ArrayDirectory::Reader::hasArraySchemaUris() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArrayDirectory::Builder::hasArraySchemaUris() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader
ArrayDirectory::Reader::getArraySchemaUris() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(
          _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
ArrayDirectory::Builder::getArraySchemaUris() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ArrayDirectory::Builder::setArraySchemaUris(
    ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          value);
}
inline void ArrayDirectory::Builder::setArraySchemaUris(
    ::kj::ArrayPtr<const ::capnp::Text::Reader> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
ArrayDirectory::Builder::initArraySchemaUris(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::init(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          size);
}
inline void ArrayDirectory::Builder::adoptArraySchemaUris(
    ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>&&
        value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::adopt(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
ArrayDirectory::Builder::disownArraySchemaUris() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::disown(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ArrayDirectory::Reader::hasLatestArraySchemaUri() const {
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArrayDirectory::Builder::hasLatestArraySchemaUri() {
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader ArrayDirectory::Reader::getLatestArraySchemaUri()
    const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder
ArrayDirectory::Builder::getLatestArraySchemaUri() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ArrayDirectory::Builder::setLatestArraySchemaUri(
    ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder ArrayDirectory::Builder::initLatestArraySchemaUri(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      size);
}
inline void ArrayDirectory::Builder::adoptLatestArraySchemaUri(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text>
ArrayDirectory::Builder::disownLatestArraySchemaUri() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool ArrayDirectory::Reader::hasArrayMetaUrisToVacuum() const {
  return !_reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArrayDirectory::Builder::hasArrayMetaUrisToVacuum() {
  return !_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader
ArrayDirectory::Reader::getArrayMetaUrisToVacuum() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(
          _reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
ArrayDirectory::Builder::getArrayMetaUrisToVacuum() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void ArrayDirectory::Builder::setArrayMetaUrisToVacuum(
    ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
          value);
}
inline void ArrayDirectory::Builder::setArrayMetaUrisToVacuum(
    ::kj::ArrayPtr<const ::capnp::Text::Reader> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
ArrayDirectory::Builder::initArrayMetaUrisToVacuum(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::init(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
          size);
}
inline void ArrayDirectory::Builder::adoptArrayMetaUrisToVacuum(
    ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>&&
        value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::adopt(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
ArrayDirectory::Builder::disownArrayMetaUrisToVacuum() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::disown(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool ArrayDirectory::Reader::hasArrayMetaVacUrisToVacuum() const {
  return !_reader.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArrayDirectory::Builder::hasArrayMetaVacUrisToVacuum() {
  return !_builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader
ArrayDirectory::Reader::getArrayMetaVacUrisToVacuum() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(
          _reader.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
ArrayDirectory::Builder::getArrayMetaVacUrisToVacuum() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ArrayDirectory::Builder::setArrayMetaVacUrisToVacuum(
    ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
          value);
}
inline void ArrayDirectory::Builder::setArrayMetaVacUrisToVacuum(
    ::kj::ArrayPtr<const ::capnp::Text::Reader> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
ArrayDirectory::Builder::initArrayMetaVacUrisToVacuum(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::init(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
          size);
}
inline void ArrayDirectory::Builder::adoptArrayMetaVacUrisToVacuum(
    ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>&&
        value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::adopt(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
ArrayDirectory::Builder::disownArrayMetaVacUrisToVacuum() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::disown(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool ArrayDirectory::Reader::hasCommitUrisToConsolidate() const {
  return !_reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArrayDirectory::Builder::hasCommitUrisToConsolidate() {
  return !_builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader
ArrayDirectory::Reader::getCommitUrisToConsolidate() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(
          _reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
ArrayDirectory::Builder::getCommitUrisToConsolidate() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(
          _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void ArrayDirectory::Builder::setCommitUrisToConsolidate(
    ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(
          _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
          value);
}
inline void ArrayDirectory::Builder::setCommitUrisToConsolidate(
    ::kj::ArrayPtr<const ::capnp::Text::Reader> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(
          _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
ArrayDirectory::Builder::initCommitUrisToConsolidate(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::init(
          _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
          size);
}
inline void ArrayDirectory::Builder::adoptCommitUrisToConsolidate(
    ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>&&
        value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::adopt(
          _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
ArrayDirectory::Builder::disownCommitUrisToConsolidate() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::disown(
          _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool ArrayDirectory::Reader::hasCommitUrisToVacuum() const {
  return !_reader.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArrayDirectory::Builder::hasCommitUrisToVacuum() {
  return !_builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader
ArrayDirectory::Reader::getCommitUrisToVacuum() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(
          _reader.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
ArrayDirectory::Builder::getCommitUrisToVacuum() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(
          _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void ArrayDirectory::Builder::setCommitUrisToVacuum(
    ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(
          _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
          value);
}
inline void ArrayDirectory::Builder::setCommitUrisToVacuum(
    ::kj::ArrayPtr<const ::capnp::Text::Reader> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(
          _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
ArrayDirectory::Builder::initCommitUrisToVacuum(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::init(
          _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
          size);
}
inline void ArrayDirectory::Builder::adoptCommitUrisToVacuum(
    ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>&&
        value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::adopt(
          _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
ArrayDirectory::Builder::disownCommitUrisToVacuum() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::disown(
          _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool ArrayDirectory::Reader::hasConsolidatedCommitUrisToVacuum() const {
  return !_reader.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArrayDirectory::Builder::hasConsolidatedCommitUrisToVacuum() {
  return !_builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader
ArrayDirectory::Reader::getConsolidatedCommitUrisToVacuum() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(
          _reader.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
ArrayDirectory::Builder::getConsolidatedCommitUrisToVacuum() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(
          _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void ArrayDirectory::Builder::setConsolidatedCommitUrisToVacuum(
    ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(
          _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS),
          value);
}
inline void ArrayDirectory::Builder::setConsolidatedCommitUrisToVacuum(
    ::kj::ArrayPtr<const ::capnp::Text::Reader> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(
          _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
ArrayDirectory::Builder::initConsolidatedCommitUrisToVacuum(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::init(
          _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS),
          size);
}
inline void ArrayDirectory::Builder::adoptConsolidatedCommitUrisToVacuum(
    ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>&&
        value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::adopt(
          _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
ArrayDirectory::Builder::disownConsolidatedCommitUrisToVacuum() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::disown(
          _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool ArrayDirectory::Reader::hasArrayMetaUris() const {
  return !_reader.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArrayDirectory::Builder::hasArrayMetaUris() {
  return !_builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::ArrayDirectory::TimestampedURI,
    ::capnp::Kind::STRUCT>::Reader
ArrayDirectory::Reader::getArrayMetaUris() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::ArrayDirectory::TimestampedURI,
      ::capnp::Kind::STRUCT>>::get(_reader
                                       .getPointerField(
                                           ::capnp::bounded<9>() *
                                           ::capnp::POINTERS));
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::ArrayDirectory::TimestampedURI,
    ::capnp::Kind::STRUCT>::Builder
ArrayDirectory::Builder::getArrayMetaUris() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::ArrayDirectory::TimestampedURI,
      ::capnp::Kind::STRUCT>>::get(_builder
                                       .getPointerField(
                                           ::capnp::bounded<9>() *
                                           ::capnp::POINTERS));
}
inline void ArrayDirectory::Builder::setArrayMetaUris(
    ::capnp::List<
        ::tiledb::sm::serialization::capnp::ArrayDirectory::TimestampedURI,
        ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::ArrayDirectory::TimestampedURI,
      ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::ArrayDirectory::TimestampedURI,
    ::capnp::Kind::STRUCT>::Builder
ArrayDirectory::Builder::initArrayMetaUris(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::ArrayDirectory::TimestampedURI,
      ::capnp::Kind::STRUCT>>::
      init(
          _builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS),
          size);
}
inline void ArrayDirectory::Builder::adoptArrayMetaUris(
    ::capnp::Orphan<::capnp::List<
        ::tiledb::sm::serialization::capnp::ArrayDirectory::TimestampedURI,
        ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::ArrayDirectory::TimestampedURI,
      ::capnp::Kind::STRUCT>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::tiledb::sm::serialization::capnp::ArrayDirectory::TimestampedURI,
    ::capnp::Kind::STRUCT>>
ArrayDirectory::Builder::disownArrayMetaUris() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::ArrayDirectory::TimestampedURI,
      ::capnp::Kind::STRUCT>>::disown(_builder
                                          .getPointerField(
                                              ::capnp::bounded<9>() *
                                              ::capnp::POINTERS));
}

inline bool ArrayDirectory::Reader::hasFragmentMetaUris() const {
  return !_reader.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArrayDirectory::Builder::hasFragmentMetaUris() {
  return !_builder.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader
ArrayDirectory::Reader::getFragmentMetaUris() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(
          _reader.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
ArrayDirectory::Builder::getFragmentMetaUris() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(
          _builder.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void ArrayDirectory::Builder::setFragmentMetaUris(
    ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(
          _builder.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS),
          value);
}
inline void ArrayDirectory::Builder::setFragmentMetaUris(
    ::kj::ArrayPtr<const ::capnp::Text::Reader> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(
          _builder.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
ArrayDirectory::Builder::initFragmentMetaUris(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::init(
          _builder.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS),
          size);
}
inline void ArrayDirectory::Builder::adoptFragmentMetaUris(
    ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>&&
        value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::adopt(
          _builder.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
ArrayDirectory::Builder::disownFragmentMetaUris() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::disown(
          _builder.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool ArrayDirectory::Reader::hasDeleteAndUpdateTileLocation() const {
  return !_reader.getPointerField(::capnp::bounded<11>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArrayDirectory::Builder::hasDeleteAndUpdateTileLocation() {
  return !_builder.getPointerField(::capnp::bounded<11>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::ArrayDirectory::
        DeleteAndUpdateTileLocation,
    ::capnp::Kind::STRUCT>::Reader
ArrayDirectory::Reader::getDeleteAndUpdateTileLocation() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::ArrayDirectory::
          DeleteAndUpdateTileLocation,
      ::capnp::Kind::STRUCT>>::get(_reader
                                       .getPointerField(
                                           ::capnp::bounded<11>() *
                                           ::capnp::POINTERS));
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::ArrayDirectory::
        DeleteAndUpdateTileLocation,
    ::capnp::Kind::STRUCT>::Builder
ArrayDirectory::Builder::getDeleteAndUpdateTileLocation() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::ArrayDirectory::
          DeleteAndUpdateTileLocation,
      ::capnp::Kind::STRUCT>>::get(_builder
                                       .getPointerField(
                                           ::capnp::bounded<11>() *
                                           ::capnp::POINTERS));
}
inline void ArrayDirectory::Builder::setDeleteAndUpdateTileLocation(
    ::capnp::List<
        ::tiledb::sm::serialization::capnp::ArrayDirectory::
            DeleteAndUpdateTileLocation,
        ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::ArrayDirectory::
          DeleteAndUpdateTileLocation,
      ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<11>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::ArrayDirectory::
        DeleteAndUpdateTileLocation,
    ::capnp::Kind::STRUCT>::Builder
ArrayDirectory::Builder::initDeleteAndUpdateTileLocation(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::ArrayDirectory::
          DeleteAndUpdateTileLocation,
      ::capnp::Kind::STRUCT>>::
      init(
          _builder.getPointerField(::capnp::bounded<11>() * ::capnp::POINTERS),
          size);
}
inline void ArrayDirectory::Builder::adoptDeleteAndUpdateTileLocation(
    ::capnp::Orphan<::capnp::List<
        ::tiledb::sm::serialization::capnp::ArrayDirectory::
            DeleteAndUpdateTileLocation,
        ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::ArrayDirectory::
          DeleteAndUpdateTileLocation,
      ::capnp::Kind::STRUCT>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<11>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::tiledb::sm::serialization::capnp::ArrayDirectory::
        DeleteAndUpdateTileLocation,
    ::capnp::Kind::STRUCT>>
ArrayDirectory::Builder::disownDeleteAndUpdateTileLocation() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::ArrayDirectory::
          DeleteAndUpdateTileLocation,
      ::capnp::Kind::STRUCT>>::disown(_builder
                                          .getPointerField(
                                              ::capnp::bounded<11>() *
                                              ::capnp::POINTERS));
}

inline ::uint64_t ArrayDirectory::Reader::getTimestampStart() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::uint64_t ArrayDirectory::Builder::getTimestampStart() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ArrayDirectory::Builder::setTimestampStart(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline ::uint64_t ArrayDirectory::Reader::getTimestampEnd() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::uint64_t ArrayDirectory::Builder::getTimestampEnd() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ArrayDirectory::Builder::setTimestampEnd(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ArrayDirectory::TimestampedURI::Reader::hasUri() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArrayDirectory::TimestampedURI::Builder::hasUri() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader ArrayDirectory::TimestampedURI::Reader::getUri()
    const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder
ArrayDirectory::TimestampedURI::Builder::getUri() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ArrayDirectory::TimestampedURI::Builder::setUri(
    ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder ArrayDirectory::TimestampedURI::Builder::initUri(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void ArrayDirectory::TimestampedURI::Builder::adoptUri(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text>
ArrayDirectory::TimestampedURI::Builder::disownUri() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline ::uint64_t ArrayDirectory::TimestampedURI::Reader::getTimestampStart()
    const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::uint64_t ArrayDirectory::TimestampedURI::Builder::getTimestampStart() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ArrayDirectory::TimestampedURI::Builder::setTimestampStart(
    ::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline ::uint64_t ArrayDirectory::TimestampedURI::Reader::getTimestampEnd()
    const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::uint64_t ArrayDirectory::TimestampedURI::Builder::getTimestampEnd() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ArrayDirectory::TimestampedURI::Builder::setTimestampEnd(
    ::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ArrayDirectory::DeleteAndUpdateTileLocation::Reader::hasUri()
    const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArrayDirectory::DeleteAndUpdateTileLocation::Builder::hasUri() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader
ArrayDirectory::DeleteAndUpdateTileLocation::Reader::getUri() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder
ArrayDirectory::DeleteAndUpdateTileLocation::Builder::getUri() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ArrayDirectory::DeleteAndUpdateTileLocation::Builder::setUri(
    ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder
ArrayDirectory::DeleteAndUpdateTileLocation::Builder::initUri(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void ArrayDirectory::DeleteAndUpdateTileLocation::Builder::adoptUri(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text>
ArrayDirectory::DeleteAndUpdateTileLocation::Builder::disownUri() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool
ArrayDirectory::DeleteAndUpdateTileLocation::Reader::hasConditionMarker()
    const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool
ArrayDirectory::DeleteAndUpdateTileLocation::Builder::hasConditionMarker() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader
ArrayDirectory::DeleteAndUpdateTileLocation::Reader::getConditionMarker()
    const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder
ArrayDirectory::DeleteAndUpdateTileLocation::Builder::getConditionMarker() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void
ArrayDirectory::DeleteAndUpdateTileLocation::Builder::setConditionMarker(
    ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder
ArrayDirectory::DeleteAndUpdateTileLocation::Builder::initConditionMarker(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void
ArrayDirectory::DeleteAndUpdateTileLocation::Builder::adoptConditionMarker(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text>
ArrayDirectory::DeleteAndUpdateTileLocation::Builder::disownConditionMarker() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline ::uint64_t
ArrayDirectory::DeleteAndUpdateTileLocation::Reader::getOffset() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::uint64_t
ArrayDirectory::DeleteAndUpdateTileLocation::Builder::getOffset() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ArrayDirectory::DeleteAndUpdateTileLocation::Builder::setOffset(
    ::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool EstimatedResultSize::Reader::hasResultSizes() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool EstimatedResultSize::Builder::hasResultSizes() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::Map<
    ::capnp::Text,
    ::tiledb::sm::serialization::capnp::EstimatedResultSize::ResultSize>::Reader
EstimatedResultSize::Reader::getResultSizes() const {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::EstimatedResultSize::ResultSize>>::
      get(_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::Map<
    ::capnp::Text,
    ::tiledb::sm::serialization::capnp::EstimatedResultSize::ResultSize>::
    Builder
    EstimatedResultSize::Builder::getResultSizes() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::EstimatedResultSize::ResultSize>>::
      get(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::Map<
    ::capnp::Text,
    ::tiledb::sm::serialization::capnp::EstimatedResultSize::ResultSize>::
    Pipeline
    EstimatedResultSize::Pipeline::getResultSizes() {
  return ::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::EstimatedResultSize::ResultSize>::
      Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void EstimatedResultSize::Builder::setResultSizes(
    ::tiledb::sm::serialization::capnp::Map<
        ::capnp::Text,
        ::tiledb::sm::serialization::capnp::EstimatedResultSize::ResultSize>::
        Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::EstimatedResultSize::ResultSize>>::
      set(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::Map<
    ::capnp::Text,
    ::tiledb::sm::serialization::capnp::EstimatedResultSize::ResultSize>::
    Builder
    EstimatedResultSize::Builder::initResultSizes() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::EstimatedResultSize::ResultSize>>::
      init(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void EstimatedResultSize::Builder::adoptResultSizes(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::Map<
        ::capnp::Text,
        ::tiledb::sm::serialization::capnp::EstimatedResultSize::ResultSize>>&&
        value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::EstimatedResultSize::ResultSize>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Map<
    ::capnp::Text,
    ::tiledb::sm::serialization::capnp::EstimatedResultSize::ResultSize>>
EstimatedResultSize::Builder::disownResultSizes() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::EstimatedResultSize::ResultSize>>::
      disown(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool EstimatedResultSize::Reader::hasMemorySizes() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool EstimatedResultSize::Builder::hasMemorySizes() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::Map<
    ::capnp::Text,
    ::tiledb::sm::serialization::capnp::EstimatedResultSize::MemorySize>::Reader
EstimatedResultSize::Reader::getMemorySizes() const {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::EstimatedResultSize::MemorySize>>::
      get(_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::Map<
    ::capnp::Text,
    ::tiledb::sm::serialization::capnp::EstimatedResultSize::MemorySize>::
    Builder
    EstimatedResultSize::Builder::getMemorySizes() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::EstimatedResultSize::MemorySize>>::
      get(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::Map<
    ::capnp::Text,
    ::tiledb::sm::serialization::capnp::EstimatedResultSize::MemorySize>::
    Pipeline
    EstimatedResultSize::Pipeline::getMemorySizes() {
  return ::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::EstimatedResultSize::MemorySize>::
      Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void EstimatedResultSize::Builder::setMemorySizes(
    ::tiledb::sm::serialization::capnp::Map<
        ::capnp::Text,
        ::tiledb::sm::serialization::capnp::EstimatedResultSize::MemorySize>::
        Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::EstimatedResultSize::MemorySize>>::
      set(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::Map<
    ::capnp::Text,
    ::tiledb::sm::serialization::capnp::EstimatedResultSize::MemorySize>::
    Builder
    EstimatedResultSize::Builder::initMemorySizes() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::EstimatedResultSize::MemorySize>>::
      init(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void EstimatedResultSize::Builder::adoptMemorySizes(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::Map<
        ::capnp::Text,
        ::tiledb::sm::serialization::capnp::EstimatedResultSize::MemorySize>>&&
        value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::EstimatedResultSize::MemorySize>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Map<
    ::capnp::Text,
    ::tiledb::sm::serialization::capnp::EstimatedResultSize::MemorySize>>
EstimatedResultSize::Builder::disownMemorySizes() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::EstimatedResultSize::MemorySize>>::
      disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline double EstimatedResultSize::ResultSize::Reader::getSizeFixed() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double EstimatedResultSize::ResultSize::Builder::getSizeFixed() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void EstimatedResultSize::ResultSize::Builder::setSizeFixed(
    double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double EstimatedResultSize::ResultSize::Reader::getSizeVar() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double EstimatedResultSize::ResultSize::Builder::getSizeVar() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void EstimatedResultSize::ResultSize::Builder::setSizeVar(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double EstimatedResultSize::ResultSize::Reader::getSizeValidity() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double EstimatedResultSize::ResultSize::Builder::getSizeValidity() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void EstimatedResultSize::ResultSize::Builder::setSizeValidity(
    double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline ::uint64_t EstimatedResultSize::MemorySize::Reader::getSizeFixed()
    const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::uint64_t EstimatedResultSize::MemorySize::Builder::getSizeFixed() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void EstimatedResultSize::MemorySize::Builder::setSizeFixed(
    ::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline ::uint64_t EstimatedResultSize::MemorySize::Reader::getSizeVar() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::uint64_t EstimatedResultSize::MemorySize::Builder::getSizeVar() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void EstimatedResultSize::MemorySize::Builder::setSizeVar(
    ::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline ::uint64_t EstimatedResultSize::MemorySize::Reader::getSizeValidity()
    const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline ::uint64_t EstimatedResultSize::MemorySize::Builder::getSizeValidity() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void EstimatedResultSize::MemorySize::Builder::setSizeValidity(
    ::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool FragmentInfoRequest::Reader::hasConfig() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentInfoRequest::Builder::hasConfig() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::Config::Reader
FragmentInfoRequest::Reader::getConfig() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Config>::get(
          _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::Config::Builder
FragmentInfoRequest::Builder::getConfig() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Config>::get(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::Config::Pipeline
FragmentInfoRequest::Pipeline::getConfig() {
  return ::tiledb::sm::serialization::capnp::Config::Pipeline(
      _typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void FragmentInfoRequest::Builder::setConfig(
    ::tiledb::sm::serialization::capnp::Config::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Config>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::tiledb::sm::serialization::capnp::Config::Builder
FragmentInfoRequest::Builder::initConfig() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Config>::init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FragmentInfoRequest::Builder::adoptConfig(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::Config>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Config>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Config>
FragmentInfoRequest::Builder::disownConfig() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Config>::disown(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SingleFragmentInfo::Reader::hasArraySchemaName() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool SingleFragmentInfo::Builder::hasArraySchemaName() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader SingleFragmentInfo::Reader::getArraySchemaName()
    const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder
SingleFragmentInfo::Builder::getArraySchemaName() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SingleFragmentInfo::Builder::setArraySchemaName(
    ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder SingleFragmentInfo::Builder::initArraySchemaName(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void SingleFragmentInfo::Builder::adoptArraySchemaName(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text>
SingleFragmentInfo::Builder::disownArraySchemaName() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SingleFragmentInfo::Reader::hasMeta() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool SingleFragmentInfo::Builder::hasMeta() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::FragmentMetadata::Reader
SingleFragmentInfo::Reader::getMeta() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::FragmentMetadata>::get(
          _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::FragmentMetadata::Builder
SingleFragmentInfo::Builder::getMeta() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::FragmentMetadata>::get(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::FragmentMetadata::Pipeline
SingleFragmentInfo::Pipeline::getMeta() {
  return ::tiledb::sm::serialization::capnp::FragmentMetadata::Pipeline(
      _typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void SingleFragmentInfo::Builder::setMeta(
    ::tiledb::sm::serialization::capnp::FragmentMetadata::Reader value) {
  ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::FragmentMetadata>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::FragmentMetadata::Builder
SingleFragmentInfo::Builder::initMeta() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::FragmentMetadata>::
      init(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void SingleFragmentInfo::Builder::adoptMeta(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::FragmentMetadata>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::FragmentMetadata>::
      adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::FragmentMetadata>
SingleFragmentInfo::Builder::disownMeta() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::FragmentMetadata>::
      disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline ::uint64_t SingleFragmentInfo::Reader::getFragmentSize() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::uint64_t SingleFragmentInfo::Builder::getFragmentSize() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SingleFragmentInfo::Builder::setFragmentSize(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool FragmentInfo::Reader::hasArraySchemaLatest() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentInfo::Builder::hasArraySchemaLatest() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::ArraySchema::Reader
FragmentInfo::Reader::getArraySchemaLatest() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ArraySchema>::get(
          _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::ArraySchema::Builder
FragmentInfo::Builder::getArraySchemaLatest() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ArraySchema>::get(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::ArraySchema::Pipeline
FragmentInfo::Pipeline::getArraySchemaLatest() {
  return ::tiledb::sm::serialization::capnp::ArraySchema::Pipeline(
      _typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void FragmentInfo::Builder::setArraySchemaLatest(
    ::tiledb::sm::serialization::capnp::ArraySchema::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::ArraySchema>::
      set(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::ArraySchema::Builder
FragmentInfo::Builder::initArraySchemaLatest() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ArraySchema>::init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FragmentInfo::Builder::adoptArraySchemaLatest(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::ArraySchema>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::ArraySchema>::
      adopt(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::ArraySchema>
FragmentInfo::Builder::disownArraySchemaLatest() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ArraySchema>::disown(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool FragmentInfo::Reader::hasArraySchemasAll() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentInfo::Builder::hasArraySchemasAll() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::
    Map<::capnp::Text, ::tiledb::sm::serialization::capnp::ArraySchema>::Reader
    FragmentInfo::Reader::getArraySchemasAll() const {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::ArraySchema>>::
      get(_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::
    Map<::capnp::Text, ::tiledb::sm::serialization::capnp::ArraySchema>::Builder
    FragmentInfo::Builder::getArraySchemasAll() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::ArraySchema>>::
      get(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::Map<
    ::capnp::Text,
    ::tiledb::sm::serialization::capnp::ArraySchema>::Pipeline
FragmentInfo::Pipeline::getArraySchemasAll() {
  return ::tiledb::sm::serialization::capnp::
      Map<::capnp::Text, ::tiledb::sm::serialization::capnp::ArraySchema>::
          Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void FragmentInfo::Builder::setArraySchemasAll(
    ::tiledb::sm::serialization::capnp::Map<
        ::capnp::Text,
        ::tiledb::sm::serialization::capnp::ArraySchema>::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::ArraySchema>>::
      set(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::
    Map<::capnp::Text, ::tiledb::sm::serialization::capnp::ArraySchema>::Builder
    FragmentInfo::Builder::initArraySchemasAll() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::ArraySchema>>::
      init(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void FragmentInfo::Builder::adoptArraySchemasAll(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::Map<
        ::capnp::Text,
        ::tiledb::sm::serialization::capnp::ArraySchema>>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::ArraySchema>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Map<
    ::capnp::Text,
    ::tiledb::sm::serialization::capnp::ArraySchema>>
FragmentInfo::Builder::disownArraySchemasAll() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::ArraySchema>>::
      disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool FragmentInfo::Reader::hasFragmentInfo() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentInfo::Builder::hasFragmentInfo() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::SingleFragmentInfo,
    ::capnp::Kind::STRUCT>::Reader
FragmentInfo::Reader::getFragmentInfo() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::SingleFragmentInfo,
      ::capnp::Kind::STRUCT>>::get(_reader
                                       .getPointerField(
                                           ::capnp::bounded<2>() *
                                           ::capnp::POINTERS));
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::SingleFragmentInfo,
    ::capnp::Kind::STRUCT>::Builder
FragmentInfo::Builder::getFragmentInfo() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::SingleFragmentInfo,
      ::capnp::Kind::STRUCT>>::get(_builder
                                       .getPointerField(
                                           ::capnp::bounded<2>() *
                                           ::capnp::POINTERS));
}
inline void FragmentInfo::Builder::setFragmentInfo(
    ::capnp::List<
        ::tiledb::sm::serialization::capnp::SingleFragmentInfo,
        ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::SingleFragmentInfo,
      ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::SingleFragmentInfo,
    ::capnp::Kind::STRUCT>::Builder
FragmentInfo::Builder::initFragmentInfo(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::SingleFragmentInfo,
      ::capnp::Kind::STRUCT>>::
      init(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          size);
}
inline void FragmentInfo::Builder::adoptFragmentInfo(
    ::capnp::Orphan<::capnp::List<
        ::tiledb::sm::serialization::capnp::SingleFragmentInfo,
        ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::SingleFragmentInfo,
      ::capnp::Kind::STRUCT>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::tiledb::sm::serialization::capnp::SingleFragmentInfo,
    ::capnp::Kind::STRUCT>>
FragmentInfo::Builder::disownFragmentInfo() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::SingleFragmentInfo,
      ::capnp::Kind::STRUCT>>::disown(_builder
                                          .getPointerField(
                                              ::capnp::bounded<2>() *
                                              ::capnp::POINTERS));
}

inline bool FragmentInfo::Reader::hasToVacuum() const {
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentInfo::Builder::hasToVacuum() {
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader
FragmentInfo::Reader::getToVacuum() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(
          _reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
FragmentInfo::Builder::getToVacuum() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void FragmentInfo::Builder::setToVacuum(
    ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          value);
}
inline void FragmentInfo::Builder::setToVacuum(
    ::kj::ArrayPtr<const ::capnp::Text::Reader> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
FragmentInfo::Builder::initToVacuum(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::init(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          size);
}
inline void FragmentInfo::Builder::adoptToVacuum(
    ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>&&
        value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::adopt(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
FragmentInfo::Builder::disownToVacuum() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::disown(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool GroupMetadata::Reader::hasConfig() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool GroupMetadata::Builder::hasConfig() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::Config::Reader
GroupMetadata::Reader::getConfig() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Config>::get(
          _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::Config::Builder
GroupMetadata::Builder::getConfig() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Config>::get(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::Config::Pipeline
GroupMetadata::Pipeline::getConfig() {
  return ::tiledb::sm::serialization::capnp::Config::Pipeline(
      _typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GroupMetadata::Builder::setConfig(
    ::tiledb::sm::serialization::capnp::Config::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Config>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::tiledb::sm::serialization::capnp::Config::Builder
GroupMetadata::Builder::initConfig() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Config>::init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GroupMetadata::Builder::adoptConfig(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::Config>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Config>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Config>
GroupMetadata::Builder::disownConfig() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Config>::disown(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GroupMetadata::Reader::hasMetadata() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool GroupMetadata::Builder::hasMetadata() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::ArrayMetadata::Reader
GroupMetadata::Reader::getMetadata() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ArrayMetadata>::get(
          _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::ArrayMetadata::Builder
GroupMetadata::Builder::getMetadata() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ArrayMetadata>::get(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::ArrayMetadata::Pipeline
GroupMetadata::Pipeline::getMetadata() {
  return ::tiledb::sm::serialization::capnp::ArrayMetadata::Pipeline(
      _typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void GroupMetadata::Builder::setMetadata(
    ::tiledb::sm::serialization::capnp::ArrayMetadata::Reader value) {
  ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ArrayMetadata>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::ArrayMetadata::Builder
GroupMetadata::Builder::initMetadata() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ArrayMetadata>::init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void GroupMetadata::Builder::adoptMetadata(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::ArrayMetadata>&&
        value) {
  ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ArrayMetadata>::adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::ArrayMetadata>
GroupMetadata::Builder::disownMetadata() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ArrayMetadata>::disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool GroupMember::Reader::hasUri() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool GroupMember::Builder::hasUri() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader GroupMember::Reader::getUri() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder GroupMember::Builder::getUri() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GroupMember::Builder::setUri(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder GroupMember::Builder::initUri(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void GroupMember::Builder::adoptUri(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> GroupMember::Builder::disownUri() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GroupMember::Reader::hasType() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool GroupMember::Builder::hasType() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader GroupMember::Reader::getType() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder GroupMember::Builder::getType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void GroupMember::Builder::setType(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder GroupMember::Builder::initType(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void GroupMember::Builder::adoptType(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> GroupMember::Builder::disownType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool GroupMember::Reader::getRelative() const {
  return _reader.getDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool GroupMember::Builder::getRelative() {
  return _builder.getDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GroupMember::Builder::setRelative(bool value) {
  _builder.setDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool GroupMember::Reader::hasName() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool GroupMember::Builder::hasName() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader GroupMember::Reader::getName() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder GroupMember::Builder::getName() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void GroupMember::Builder::setName(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder GroupMember::Builder::initName(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void GroupMember::Builder::adoptName(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> GroupMember::Builder::disownName() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Group::Reader::hasConfig() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Group::Builder::hasConfig() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::Config::Reader
Group::Reader::getConfig() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Config>::get(
          _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::Config::Builder
Group::Builder::getConfig() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Config>::get(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::Config::Pipeline
Group::Pipeline::getConfig() {
  return ::tiledb::sm::serialization::capnp::Config::Pipeline(
      _typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Group::Builder::setConfig(
    ::tiledb::sm::serialization::capnp::Config::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Config>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::tiledb::sm::serialization::capnp::Config::Builder
Group::Builder::initConfig() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Config>::init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Group::Builder::adoptConfig(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::Config>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Config>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Config>
Group::Builder::disownConfig() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Config>::disown(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Group::Reader::hasGroup() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Group::Builder::hasGroup() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::Group::GroupDetails::Reader
Group::Reader::getGroup() const {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::Group::GroupDetails>::
      get(_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::Group::GroupDetails::Builder
Group::Builder::getGroup() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::Group::GroupDetails>::
      get(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::Group::GroupDetails::Pipeline
Group::Pipeline::getGroup() {
  return ::tiledb::sm::serialization::capnp::Group::GroupDetails::Pipeline(
      _typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Group::Builder::setGroup(
    ::tiledb::sm::serialization::capnp::Group::GroupDetails::Reader value) {
  ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::Group::GroupDetails>::
      set(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::Group::GroupDetails::Builder
Group::Builder::initGroup() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::Group::GroupDetails>::
      init(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Group::Builder::adoptGroup(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::Group::GroupDetails>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::Group::GroupDetails>::
      adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Group::GroupDetails>
Group::Builder::disownGroup() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::Group::GroupDetails>::
      disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Group::GroupDetails::Reader::hasMembers() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Group::GroupDetails::Builder::hasMembers() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::GroupMember,
    ::capnp::Kind::STRUCT>::Reader
Group::GroupDetails::Reader::getMembers() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::GroupMember,
      ::capnp::Kind::STRUCT>>::get(_reader
                                       .getPointerField(
                                           ::capnp::bounded<0>() *
                                           ::capnp::POINTERS));
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::GroupMember,
    ::capnp::Kind::STRUCT>::Builder
Group::GroupDetails::Builder::getMembers() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::GroupMember,
      ::capnp::Kind::STRUCT>>::get(_builder
                                       .getPointerField(
                                           ::capnp::bounded<0>() *
                                           ::capnp::POINTERS));
}
inline void Group::GroupDetails::Builder::setMembers(
    ::capnp::List<
        ::tiledb::sm::serialization::capnp::GroupMember,
        ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::GroupMember,
      ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::GroupMember,
    ::capnp::Kind::STRUCT>::Builder
Group::GroupDetails::Builder::initMembers(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::GroupMember,
      ::capnp::Kind::STRUCT>>::
      init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          size);
}
inline void Group::GroupDetails::Builder::adoptMembers(
    ::capnp::Orphan<::capnp::List<
        ::tiledb::sm::serialization::capnp::GroupMember,
        ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::GroupMember,
      ::capnp::Kind::STRUCT>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::tiledb::sm::serialization::capnp::GroupMember,
    ::capnp::Kind::STRUCT>>
Group::GroupDetails::Builder::disownMembers() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::GroupMember,
      ::capnp::Kind::STRUCT>>::disown(_builder
                                          .getPointerField(
                                              ::capnp::bounded<0>() *
                                              ::capnp::POINTERS));
}

inline bool Group::GroupDetails::Reader::hasMetadata() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Group::GroupDetails::Builder::hasMetadata() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::ArrayMetadata::Reader
Group::GroupDetails::Reader::getMetadata() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ArrayMetadata>::get(
          _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::ArrayMetadata::Builder
Group::GroupDetails::Builder::getMetadata() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ArrayMetadata>::get(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::ArrayMetadata::Pipeline
Group::GroupDetails::Pipeline::getMetadata() {
  return ::tiledb::sm::serialization::capnp::ArrayMetadata::Pipeline(
      _typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Group::GroupDetails::Builder::setMetadata(
    ::tiledb::sm::serialization::capnp::ArrayMetadata::Reader value) {
  ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ArrayMetadata>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::ArrayMetadata::Builder
Group::GroupDetails::Builder::initMetadata() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ArrayMetadata>::init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Group::GroupDetails::Builder::adoptMetadata(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::ArrayMetadata>&&
        value) {
  ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ArrayMetadata>::adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::ArrayMetadata>
Group::GroupDetails::Builder::disownMetadata() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::ArrayMetadata>::disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool GroupUpdate::Reader::hasConfig() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool GroupUpdate::Builder::hasConfig() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::Config::Reader
GroupUpdate::Reader::getConfig() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Config>::get(
          _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::Config::Builder
GroupUpdate::Builder::getConfig() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Config>::get(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::Config::Pipeline
GroupUpdate::Pipeline::getConfig() {
  return ::tiledb::sm::serialization::capnp::Config::Pipeline(
      _typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GroupUpdate::Builder::setConfig(
    ::tiledb::sm::serialization::capnp::Config::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Config>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::tiledb::sm::serialization::capnp::Config::Builder
GroupUpdate::Builder::initConfig() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Config>::init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GroupUpdate::Builder::adoptConfig(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::Config>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Config>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Config>
GroupUpdate::Builder::disownConfig() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Config>::disown(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GroupUpdate::Reader::hasGroupUpdate() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool GroupUpdate::Builder::hasGroupUpdate() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::GroupUpdate::GroupUpdateDetails::
    Reader
    GroupUpdate::Reader::getGroupUpdate() const {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::GroupUpdate::GroupUpdateDetails>::
      get(_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::GroupUpdate::GroupUpdateDetails::
    Builder
    GroupUpdate::Builder::getGroupUpdate() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::GroupUpdate::GroupUpdateDetails>::
      get(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::GroupUpdate::GroupUpdateDetails::
    Pipeline
    GroupUpdate::Pipeline::getGroupUpdate() {
  return ::tiledb::sm::serialization::capnp::GroupUpdate::GroupUpdateDetails::
      Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void GroupUpdate::Builder::setGroupUpdate(
    ::tiledb::sm::serialization::capnp::GroupUpdate::GroupUpdateDetails::Reader
        value) {
  ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::GroupUpdate::GroupUpdateDetails>::
      set(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::GroupUpdate::GroupUpdateDetails::
    Builder
    GroupUpdate::Builder::initGroupUpdate() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::GroupUpdate::GroupUpdateDetails>::
      init(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void GroupUpdate::Builder::adoptGroupUpdate(
    ::capnp::Orphan<
        ::tiledb::sm::serialization::capnp::GroupUpdate::GroupUpdateDetails>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::GroupUpdate::GroupUpdateDetails>::
      adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<
    ::tiledb::sm::serialization::capnp::GroupUpdate::GroupUpdateDetails>
GroupUpdate::Builder::disownGroupUpdate() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::GroupUpdate::GroupUpdateDetails>::
      disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool GroupUpdate::GroupUpdateDetails::Reader::hasMembersToRemove()
    const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool GroupUpdate::GroupUpdateDetails::Builder::hasMembersToRemove() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader
GroupUpdate::GroupUpdateDetails::Reader::getMembersToRemove() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(
          _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
GroupUpdate::GroupUpdateDetails::Builder::getMembersToRemove() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GroupUpdate::GroupUpdateDetails::Builder::setMembersToRemove(
    ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline void GroupUpdate::GroupUpdateDetails::Builder::setMembersToRemove(
    ::kj::ArrayPtr<const ::capnp::Text::Reader> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder
GroupUpdate::GroupUpdateDetails::Builder::initMembersToRemove(
    unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          size);
}
inline void GroupUpdate::GroupUpdateDetails::Builder::adoptMembersToRemove(
    ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>&&
        value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::adopt(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>
GroupUpdate::GroupUpdateDetails::Builder::disownMembersToRemove() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::disown(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GroupUpdate::GroupUpdateDetails::Reader::hasMembersToAdd() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool GroupUpdate::GroupUpdateDetails::Builder::hasMembersToAdd() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::GroupMember,
    ::capnp::Kind::STRUCT>::Reader
GroupUpdate::GroupUpdateDetails::Reader::getMembersToAdd() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::GroupMember,
      ::capnp::Kind::STRUCT>>::get(_reader
                                       .getPointerField(
                                           ::capnp::bounded<1>() *
                                           ::capnp::POINTERS));
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::GroupMember,
    ::capnp::Kind::STRUCT>::Builder
GroupUpdate::GroupUpdateDetails::Builder::getMembersToAdd() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::GroupMember,
      ::capnp::Kind::STRUCT>>::get(_builder
                                       .getPointerField(
                                           ::capnp::bounded<1>() *
                                           ::capnp::POINTERS));
}
inline void GroupUpdate::GroupUpdateDetails::Builder::setMembersToAdd(
    ::capnp::List<
        ::tiledb::sm::serialization::capnp::GroupMember,
        ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::GroupMember,
      ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::GroupMember,
    ::capnp::Kind::STRUCT>::Builder
GroupUpdate::GroupUpdateDetails::Builder::initMembersToAdd(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::GroupMember,
      ::capnp::Kind::STRUCT>>::
      init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          size);
}
inline void GroupUpdate::GroupUpdateDetails::Builder::adoptMembersToAdd(
    ::capnp::Orphan<::capnp::List<
        ::tiledb::sm::serialization::capnp::GroupMember,
        ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::GroupMember,
      ::capnp::Kind::STRUCT>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::tiledb::sm::serialization::capnp::GroupMember,
    ::capnp::Kind::STRUCT>>
GroupUpdate::GroupUpdateDetails::Builder::disownMembersToAdd() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::GroupMember,
      ::capnp::Kind::STRUCT>>::disown(_builder
                                          .getPointerField(
                                              ::capnp::bounded<1>() *
                                              ::capnp::POINTERS));
}

inline bool GroupCreate::Reader::hasConfig() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool GroupCreate::Builder::hasConfig() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::Config::Reader
GroupCreate::Reader::getConfig() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Config>::get(
          _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::Config::Builder
GroupCreate::Builder::getConfig() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Config>::get(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::Config::Pipeline
GroupCreate::Pipeline::getConfig() {
  return ::tiledb::sm::serialization::capnp::Config::Pipeline(
      _typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GroupCreate::Builder::setConfig(
    ::tiledb::sm::serialization::capnp::Config::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Config>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::tiledb::sm::serialization::capnp::Config::Builder
GroupCreate::Builder::initConfig() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Config>::init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GroupCreate::Builder::adoptConfig(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::Config>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Config>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Config>
GroupCreate::Builder::disownConfig() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::Config>::disown(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GroupCreate::Reader::hasGroupDetails() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool GroupCreate::Builder::hasGroupDetails() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::GroupCreate::GroupCreateDetails::
    Reader
    GroupCreate::Reader::getGroupDetails() const {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::GroupCreate::GroupCreateDetails>::
      get(_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::GroupCreate::GroupCreateDetails::
    Builder
    GroupCreate::Builder::getGroupDetails() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::GroupCreate::GroupCreateDetails>::
      get(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::GroupCreate::GroupCreateDetails::
    Pipeline
    GroupCreate::Pipeline::getGroupDetails() {
  return ::tiledb::sm::serialization::capnp::GroupCreate::GroupCreateDetails::
      Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void GroupCreate::Builder::setGroupDetails(
    ::tiledb::sm::serialization::capnp::GroupCreate::GroupCreateDetails::Reader
        value) {
  ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::GroupCreate::GroupCreateDetails>::
      set(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::GroupCreate::GroupCreateDetails::
    Builder
    GroupCreate::Builder::initGroupDetails() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::GroupCreate::GroupCreateDetails>::
      init(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void GroupCreate::Builder::adoptGroupDetails(
    ::capnp::Orphan<
        ::tiledb::sm::serialization::capnp::GroupCreate::GroupCreateDetails>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::GroupCreate::GroupCreateDetails>::
      adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<
    ::tiledb::sm::serialization::capnp::GroupCreate::GroupCreateDetails>
GroupCreate::Builder::disownGroupDetails() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::GroupCreate::GroupCreateDetails>::
      disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool GroupCreate::GroupCreateDetails::Reader::hasUri() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool GroupCreate::GroupCreateDetails::Builder::hasUri() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader GroupCreate::GroupCreateDetails::Reader::getUri()
    const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder
GroupCreate::GroupCreateDetails::Builder::getUri() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GroupCreate::GroupCreateDetails::Builder::setUri(
    ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder GroupCreate::GroupCreateDetails::Builder::initUri(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void GroupCreate::GroupCreateDetails::Builder::adoptUri(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text>
GroupCreate::GroupCreateDetails::Builder::disownUri() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GlobalWriteState::Reader::hasCellsWritten() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool GlobalWriteState::Builder::hasCellsWritten() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::MapUInt64::Reader
GlobalWriteState::Reader::getCellsWritten() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::MapUInt64>::get(
          _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::MapUInt64::Builder
GlobalWriteState::Builder::getCellsWritten() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::MapUInt64>::get(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::MapUInt64::Pipeline
GlobalWriteState::Pipeline::getCellsWritten() {
  return ::tiledb::sm::serialization::capnp::MapUInt64::Pipeline(
      _typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GlobalWriteState::Builder::setCellsWritten(
    ::tiledb::sm::serialization::capnp::MapUInt64::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::MapUInt64>::
      set(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::MapUInt64::Builder
GlobalWriteState::Builder::initCellsWritten() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::MapUInt64>::init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GlobalWriteState::Builder::adoptCellsWritten(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::MapUInt64>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::MapUInt64>::
      adopt(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::MapUInt64>
GlobalWriteState::Builder::disownCellsWritten() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::MapUInt64>::disown(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GlobalWriteState::Reader::hasFragMeta() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool GlobalWriteState::Builder::hasFragMeta() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::FragmentMetadata::Reader
GlobalWriteState::Reader::getFragMeta() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::FragmentMetadata>::get(
          _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::FragmentMetadata::Builder
GlobalWriteState::Builder::getFragMeta() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::FragmentMetadata>::get(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::FragmentMetadata::Pipeline
GlobalWriteState::Pipeline::getFragMeta() {
  return ::tiledb::sm::serialization::capnp::FragmentMetadata::Pipeline(
      _typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void GlobalWriteState::Builder::setFragMeta(
    ::tiledb::sm::serialization::capnp::FragmentMetadata::Reader value) {
  ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::FragmentMetadata>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::FragmentMetadata::Builder
GlobalWriteState::Builder::initFragMeta() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::FragmentMetadata>::
      init(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void GlobalWriteState::Builder::adoptFragMeta(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::FragmentMetadata>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::FragmentMetadata>::
      adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::FragmentMetadata>
GlobalWriteState::Builder::disownFragMeta() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::FragmentMetadata>::
      disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool GlobalWriteState::Reader::hasLastCellCoords() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool GlobalWriteState::Builder::hasLastCellCoords() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::SingleCoord::Reader
GlobalWriteState::Reader::getLastCellCoords() const {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::SingleCoord>::get(
          _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::SingleCoord::Builder
GlobalWriteState::Builder::getLastCellCoords() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::SingleCoord>::get(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::SingleCoord::Pipeline
GlobalWriteState::Pipeline::getLastCellCoords() {
  return ::tiledb::sm::serialization::capnp::SingleCoord::Pipeline(
      _typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void GlobalWriteState::Builder::setLastCellCoords(
    ::tiledb::sm::serialization::capnp::SingleCoord::Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::SingleCoord>::
      set(_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::SingleCoord::Builder
GlobalWriteState::Builder::initLastCellCoords() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::SingleCoord>::init(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void GlobalWriteState::Builder::adoptLastCellCoords(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::SingleCoord>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::SingleCoord>::
      adopt(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::SingleCoord>
GlobalWriteState::Builder::disownLastCellCoords() {
  return ::capnp::_::
      PointerHelpers<::tiledb::sm::serialization::capnp::SingleCoord>::disown(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline ::uint64_t GlobalWriteState::Reader::getLastHilbertValue() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::uint64_t GlobalWriteState::Builder::getLastHilbertValue() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GlobalWriteState::Builder::setLastHilbertValue(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool GlobalWriteState::Reader::hasMultiPartUploadStates() const {
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool GlobalWriteState::Builder::hasMultiPartUploadStates() {
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::Map<
    ::capnp::Text,
    ::tiledb::sm::serialization::capnp::MultiPartUploadState>::Reader
GlobalWriteState::Reader::getMultiPartUploadStates() const {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::MultiPartUploadState>>::
      get(_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::Map<
    ::capnp::Text,
    ::tiledb::sm::serialization::capnp::MultiPartUploadState>::Builder
GlobalWriteState::Builder::getMultiPartUploadStates() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::MultiPartUploadState>>::
      get(_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::Map<
    ::capnp::Text,
    ::tiledb::sm::serialization::capnp::MultiPartUploadState>::Pipeline
GlobalWriteState::Pipeline::getMultiPartUploadStates() {
  return ::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::MultiPartUploadState>::
      Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void GlobalWriteState::Builder::setMultiPartUploadStates(
    ::tiledb::sm::serialization::capnp::Map<
        ::capnp::Text,
        ::tiledb::sm::serialization::capnp::MultiPartUploadState>::Reader
        value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::MultiPartUploadState>>::
      set(_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::Map<
    ::capnp::Text,
    ::tiledb::sm::serialization::capnp::MultiPartUploadState>::Builder
GlobalWriteState::Builder::initMultiPartUploadStates() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::MultiPartUploadState>>::
      init(_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void GlobalWriteState::Builder::adoptMultiPartUploadStates(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::Map<
        ::capnp::Text,
        ::tiledb::sm::serialization::capnp::MultiPartUploadState>>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::MultiPartUploadState>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::Map<
    ::capnp::Text,
    ::tiledb::sm::serialization::capnp::MultiPartUploadState>>
GlobalWriteState::Builder::disownMultiPartUploadStates() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::Map<
      ::capnp::Text,
      ::tiledb::sm::serialization::capnp::MultiPartUploadState>>::
      disown(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool SingleCoord::Reader::hasCoords() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool SingleCoord::Builder::hasCoords() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Reader
SingleCoord::Reader::getCoords() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::get(_reader
                                     .getPointerField(
                                         ::capnp::bounded<0>() *
                                         ::capnp::POINTERS));
}
inline ::capnp::List<
    ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Builder
SingleCoord::Builder::getCoords() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::get(_builder
                                     .getPointerField(
                                         ::capnp::bounded<0>() *
                                         ::capnp::POINTERS));
}
inline void SingleCoord::Builder::setCoords(
    ::capnp::List<
        ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
        ::capnp::Kind::LIST>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      set(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline void SingleCoord::Builder::setCoords(
    ::kj::ArrayPtr<
        const ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>::Reader>
        value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      set(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Builder
SingleCoord::Builder::initCoords(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          size);
}
inline void SingleCoord::Builder::adoptCoords(
    ::capnp::Orphan<::capnp::List<
        ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
        ::capnp::Kind::LIST>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>>
SingleCoord::Builder::disownCoords() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::disown(_builder
                                        .getPointerField(
                                            ::capnp::bounded<0>() *
                                            ::capnp::POINTERS));
}

inline bool SingleCoord::Reader::hasSizes() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool SingleCoord::Builder::hasSizes() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
SingleCoord::Reader::getSizes() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
SingleCoord::Builder::getSizes() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void SingleCoord::Builder::setSizes(
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline void SingleCoord::Builder::setSizes(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
SingleCoord::Builder::initSizes(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          size);
}
inline void SingleCoord::Builder::adoptSizes(
    ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
SingleCoord::Builder::disownSizes() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool SingleCoord::Reader::hasSingleOffset() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool SingleCoord::Builder::hasSingleOffset() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
SingleCoord::Reader::getSingleOffset() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
SingleCoord::Builder::getSingleOffset() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void SingleCoord::Builder::setSingleOffset(
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          value);
}
inline void SingleCoord::Builder::setSingleOffset(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
SingleCoord::Builder::initSingleOffset(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          size);
}
inline void SingleCoord::Builder::adoptSingleOffset(
    ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
SingleCoord::Builder::disownSingleOffset() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool FragmentMetadata::Reader::hasFileSizes() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::Builder::hasFileSizes() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
FragmentMetadata::Reader::getFileSizes() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
FragmentMetadata::Builder::getFileSizes() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::Builder::setFileSizes(
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline void FragmentMetadata::Builder::setFileSizes(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
FragmentMetadata::Builder::initFileSizes(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          size);
}
inline void FragmentMetadata::Builder::adoptFileSizes(
    ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
FragmentMetadata::Builder::disownFileSizes() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool FragmentMetadata::Reader::hasFileVarSizes() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::Builder::hasFileVarSizes() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
FragmentMetadata::Reader::getFileVarSizes() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
FragmentMetadata::Builder::getFileVarSizes() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::Builder::setFileVarSizes(
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline void FragmentMetadata::Builder::setFileVarSizes(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
FragmentMetadata::Builder::initFileVarSizes(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          size);
}
inline void FragmentMetadata::Builder::adoptFileVarSizes(
    ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
FragmentMetadata::Builder::disownFileVarSizes() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool FragmentMetadata::Reader::hasFileValiditySizes() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::Builder::hasFileValiditySizes() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
FragmentMetadata::Reader::getFileValiditySizes() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
FragmentMetadata::Builder::getFileValiditySizes() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::Builder::setFileValiditySizes(
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          value);
}
inline void FragmentMetadata::Builder::setFileValiditySizes(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
FragmentMetadata::Builder::initFileValiditySizes(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          size);
}
inline void FragmentMetadata::Builder::adoptFileValiditySizes(
    ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
FragmentMetadata::Builder::disownFileValiditySizes() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool FragmentMetadata::Reader::hasFragmentUri() const {
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::Builder::hasFragmentUri() {
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader FragmentMetadata::Reader::getFragmentUri() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder FragmentMetadata::Builder::getFragmentUri() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::Builder::setFragmentUri(
    ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder FragmentMetadata::Builder::initFragmentUri(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      size);
}
inline void FragmentMetadata::Builder::adoptFragmentUri(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text>
FragmentMetadata::Builder::disownFragmentUri() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool FragmentMetadata::Reader::getHasTimestamps() const {
  return _reader.getDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool FragmentMetadata::Builder::getHasTimestamps() {
  return _builder.getDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void FragmentMetadata::Builder::setHasTimestamps(bool value) {
  _builder.setDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool FragmentMetadata::Reader::getHasDeleteMeta() const {
  return _reader.getDataField<bool>(::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool FragmentMetadata::Builder::getHasDeleteMeta() {
  return _builder.getDataField<bool>(::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void FragmentMetadata::Builder::setHasDeleteMeta(bool value) {
  _builder.setDataField<bool>(::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline ::uint64_t FragmentMetadata::Reader::getSparseTileNum() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::uint64_t FragmentMetadata::Builder::getSparseTileNum() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void FragmentMetadata::Builder::setSparseTileNum(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline ::uint64_t FragmentMetadata::Reader::getTileIndexBase() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline ::uint64_t FragmentMetadata::Builder::getTileIndexBase() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void FragmentMetadata::Builder::setTileIndexBase(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool FragmentMetadata::Reader::hasTileOffsets() const {
  return !_reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::Builder::hasTileOffsets() {
  return !_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Reader
FragmentMetadata::Reader::getTileOffsets() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::get(_reader
                                     .getPointerField(
                                         ::capnp::bounded<4>() *
                                         ::capnp::POINTERS));
}
inline ::capnp::List<
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Builder
FragmentMetadata::Builder::getTileOffsets() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::get(_builder
                                     .getPointerField(
                                         ::capnp::bounded<4>() *
                                         ::capnp::POINTERS));
}
inline void FragmentMetadata::Builder::setTileOffsets(
    ::capnp::List<
        ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
        ::capnp::Kind::LIST>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      set(_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
          value);
}
inline void FragmentMetadata::Builder::setTileOffsets(
    ::kj::ArrayPtr<
        const ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader>
        value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      set(_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Builder
FragmentMetadata::Builder::initTileOffsets(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      init(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
          size);
}
inline void FragmentMetadata::Builder::adoptTileOffsets(
    ::capnp::Orphan<::capnp::List<
        ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
        ::capnp::Kind::LIST>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>>
FragmentMetadata::Builder::disownTileOffsets() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::disown(_builder
                                        .getPointerField(
                                            ::capnp::bounded<4>() *
                                            ::capnp::POINTERS));
}

inline bool FragmentMetadata::Reader::hasTileVarOffsets() const {
  return !_reader.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::Builder::hasTileVarOffsets() {
  return !_builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Reader
FragmentMetadata::Reader::getTileVarOffsets() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::get(_reader
                                     .getPointerField(
                                         ::capnp::bounded<5>() *
                                         ::capnp::POINTERS));
}
inline ::capnp::List<
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Builder
FragmentMetadata::Builder::getTileVarOffsets() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::get(_builder
                                     .getPointerField(
                                         ::capnp::bounded<5>() *
                                         ::capnp::POINTERS));
}
inline void FragmentMetadata::Builder::setTileVarOffsets(
    ::capnp::List<
        ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
        ::capnp::Kind::LIST>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      set(_builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
          value);
}
inline void FragmentMetadata::Builder::setTileVarOffsets(
    ::kj::ArrayPtr<
        const ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader>
        value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      set(_builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Builder
FragmentMetadata::Builder::initTileVarOffsets(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      init(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
          size);
}
inline void FragmentMetadata::Builder::adoptTileVarOffsets(
    ::capnp::Orphan<::capnp::List<
        ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
        ::capnp::Kind::LIST>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>>
FragmentMetadata::Builder::disownTileVarOffsets() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::disown(_builder
                                        .getPointerField(
                                            ::capnp::bounded<5>() *
                                            ::capnp::POINTERS));
}

inline bool FragmentMetadata::Reader::hasTileVarSizes() const {
  return !_reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::Builder::hasTileVarSizes() {
  return !_builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Reader
FragmentMetadata::Reader::getTileVarSizes() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::get(_reader
                                     .getPointerField(
                                         ::capnp::bounded<6>() *
                                         ::capnp::POINTERS));
}
inline ::capnp::List<
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Builder
FragmentMetadata::Builder::getTileVarSizes() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::get(_builder
                                     .getPointerField(
                                         ::capnp::bounded<6>() *
                                         ::capnp::POINTERS));
}
inline void FragmentMetadata::Builder::setTileVarSizes(
    ::capnp::List<
        ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
        ::capnp::Kind::LIST>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      set(_builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
          value);
}
inline void FragmentMetadata::Builder::setTileVarSizes(
    ::kj::ArrayPtr<
        const ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader>
        value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      set(_builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Builder
FragmentMetadata::Builder::initTileVarSizes(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      init(
          _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
          size);
}
inline void FragmentMetadata::Builder::adoptTileVarSizes(
    ::capnp::Orphan<::capnp::List<
        ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
        ::capnp::Kind::LIST>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>>
FragmentMetadata::Builder::disownTileVarSizes() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::disown(_builder
                                        .getPointerField(
                                            ::capnp::bounded<6>() *
                                            ::capnp::POINTERS));
}

inline bool FragmentMetadata::Reader::hasTileValidityOffsets() const {
  return !_reader.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::Builder::hasTileValidityOffsets() {
  return !_builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Reader
FragmentMetadata::Reader::getTileValidityOffsets() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::get(_reader
                                     .getPointerField(
                                         ::capnp::bounded<7>() *
                                         ::capnp::POINTERS));
}
inline ::capnp::List<
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Builder
FragmentMetadata::Builder::getTileValidityOffsets() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::get(_builder
                                     .getPointerField(
                                         ::capnp::bounded<7>() *
                                         ::capnp::POINTERS));
}
inline void FragmentMetadata::Builder::setTileValidityOffsets(
    ::capnp::List<
        ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
        ::capnp::Kind::LIST>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      set(_builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
          value);
}
inline void FragmentMetadata::Builder::setTileValidityOffsets(
    ::kj::ArrayPtr<
        const ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader>
        value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      set(_builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Builder
FragmentMetadata::Builder::initTileValidityOffsets(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      init(
          _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
          size);
}
inline void FragmentMetadata::Builder::adoptTileValidityOffsets(
    ::capnp::Orphan<::capnp::List<
        ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
        ::capnp::Kind::LIST>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>>
FragmentMetadata::Builder::disownTileValidityOffsets() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::disown(_builder
                                        .getPointerField(
                                            ::capnp::bounded<7>() *
                                            ::capnp::POINTERS));
}

inline bool FragmentMetadata::Reader::hasTileMinBuffer() const {
  return !_reader.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::Builder::hasTileMinBuffer() {
  return !_builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Reader
FragmentMetadata::Reader::getTileMinBuffer() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::get(_reader
                                     .getPointerField(
                                         ::capnp::bounded<8>() *
                                         ::capnp::POINTERS));
}
inline ::capnp::List<
    ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Builder
FragmentMetadata::Builder::getTileMinBuffer() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::get(_builder
                                     .getPointerField(
                                         ::capnp::bounded<8>() *
                                         ::capnp::POINTERS));
}
inline void FragmentMetadata::Builder::setTileMinBuffer(
    ::capnp::List<
        ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
        ::capnp::Kind::LIST>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      set(_builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS),
          value);
}
inline void FragmentMetadata::Builder::setTileMinBuffer(
    ::kj::ArrayPtr<
        const ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>::Reader>
        value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      set(_builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Builder
FragmentMetadata::Builder::initTileMinBuffer(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      init(
          _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS),
          size);
}
inline void FragmentMetadata::Builder::adoptTileMinBuffer(
    ::capnp::Orphan<::capnp::List<
        ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
        ::capnp::Kind::LIST>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>>
FragmentMetadata::Builder::disownTileMinBuffer() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::disown(_builder
                                        .getPointerField(
                                            ::capnp::bounded<8>() *
                                            ::capnp::POINTERS));
}

inline bool FragmentMetadata::Reader::hasTileMinVarBuffer() const {
  return !_reader.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::Builder::hasTileMinVarBuffer() {
  return !_builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Reader
FragmentMetadata::Reader::getTileMinVarBuffer() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::get(_reader
                                     .getPointerField(
                                         ::capnp::bounded<9>() *
                                         ::capnp::POINTERS));
}
inline ::capnp::List<
    ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Builder
FragmentMetadata::Builder::getTileMinVarBuffer() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::get(_builder
                                     .getPointerField(
                                         ::capnp::bounded<9>() *
                                         ::capnp::POINTERS));
}
inline void FragmentMetadata::Builder::setTileMinVarBuffer(
    ::capnp::List<
        ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
        ::capnp::Kind::LIST>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      set(_builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS),
          value);
}
inline void FragmentMetadata::Builder::setTileMinVarBuffer(
    ::kj::ArrayPtr<
        const ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>::Reader>
        value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      set(_builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Builder
FragmentMetadata::Builder::initTileMinVarBuffer(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      init(
          _builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS),
          size);
}
inline void FragmentMetadata::Builder::adoptTileMinVarBuffer(
    ::capnp::Orphan<::capnp::List<
        ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
        ::capnp::Kind::LIST>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>>
FragmentMetadata::Builder::disownTileMinVarBuffer() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::disown(_builder
                                        .getPointerField(
                                            ::capnp::bounded<9>() *
                                            ::capnp::POINTERS));
}

inline bool FragmentMetadata::Reader::hasTileMaxBuffer() const {
  return !_reader.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::Builder::hasTileMaxBuffer() {
  return !_builder.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Reader
FragmentMetadata::Reader::getTileMaxBuffer() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::get(_reader
                                     .getPointerField(
                                         ::capnp::bounded<10>() *
                                         ::capnp::POINTERS));
}
inline ::capnp::List<
    ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Builder
FragmentMetadata::Builder::getTileMaxBuffer() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::get(_builder
                                     .getPointerField(
                                         ::capnp::bounded<10>() *
                                         ::capnp::POINTERS));
}
inline void FragmentMetadata::Builder::setTileMaxBuffer(
    ::capnp::List<
        ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
        ::capnp::Kind::LIST>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      set(_builder.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS),
          value);
}
inline void FragmentMetadata::Builder::setTileMaxBuffer(
    ::kj::ArrayPtr<
        const ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>::Reader>
        value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      set(_builder.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Builder
FragmentMetadata::Builder::initTileMaxBuffer(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      init(
          _builder.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS),
          size);
}
inline void FragmentMetadata::Builder::adoptTileMaxBuffer(
    ::capnp::Orphan<::capnp::List<
        ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
        ::capnp::Kind::LIST>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>>
FragmentMetadata::Builder::disownTileMaxBuffer() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::disown(_builder
                                        .getPointerField(
                                            ::capnp::bounded<10>() *
                                            ::capnp::POINTERS));
}

inline bool FragmentMetadata::Reader::hasTileMaxVarBuffer() const {
  return !_reader.getPointerField(::capnp::bounded<11>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::Builder::hasTileMaxVarBuffer() {
  return !_builder.getPointerField(::capnp::bounded<11>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Reader
FragmentMetadata::Reader::getTileMaxVarBuffer() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::get(_reader
                                     .getPointerField(
                                         ::capnp::bounded<11>() *
                                         ::capnp::POINTERS));
}
inline ::capnp::List<
    ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Builder
FragmentMetadata::Builder::getTileMaxVarBuffer() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::get(_builder
                                     .getPointerField(
                                         ::capnp::bounded<11>() *
                                         ::capnp::POINTERS));
}
inline void FragmentMetadata::Builder::setTileMaxVarBuffer(
    ::capnp::List<
        ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
        ::capnp::Kind::LIST>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      set(_builder.getPointerField(::capnp::bounded<11>() * ::capnp::POINTERS),
          value);
}
inline void FragmentMetadata::Builder::setTileMaxVarBuffer(
    ::kj::ArrayPtr<
        const ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>::Reader>
        value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      set(_builder.getPointerField(::capnp::bounded<11>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Builder
FragmentMetadata::Builder::initTileMaxVarBuffer(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      init(
          _builder.getPointerField(::capnp::bounded<11>() * ::capnp::POINTERS),
          size);
}
inline void FragmentMetadata::Builder::adoptTileMaxVarBuffer(
    ::capnp::Orphan<::capnp::List<
        ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
        ::capnp::Kind::LIST>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<11>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>>
FragmentMetadata::Builder::disownTileMaxVarBuffer() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::disown(_builder
                                        .getPointerField(
                                            ::capnp::bounded<11>() *
                                            ::capnp::POINTERS));
}

inline bool FragmentMetadata::Reader::hasTileSums() const {
  return !_reader.getPointerField(::capnp::bounded<12>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::Builder::hasTileSums() {
  return !_builder.getPointerField(::capnp::bounded<12>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Reader
FragmentMetadata::Reader::getTileSums() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::get(_reader
                                     .getPointerField(
                                         ::capnp::bounded<12>() *
                                         ::capnp::POINTERS));
}
inline ::capnp::List<
    ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Builder
FragmentMetadata::Builder::getTileSums() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::get(_builder
                                     .getPointerField(
                                         ::capnp::bounded<12>() *
                                         ::capnp::POINTERS));
}
inline void FragmentMetadata::Builder::setTileSums(
    ::capnp::List<
        ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
        ::capnp::Kind::LIST>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      set(_builder.getPointerField(::capnp::bounded<12>() * ::capnp::POINTERS),
          value);
}
inline void FragmentMetadata::Builder::setTileSums(
    ::kj::ArrayPtr<
        const ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>::Reader>
        value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      set(_builder.getPointerField(::capnp::bounded<12>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Builder
FragmentMetadata::Builder::initTileSums(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      init(
          _builder.getPointerField(::capnp::bounded<12>() * ::capnp::POINTERS),
          size);
}
inline void FragmentMetadata::Builder::adoptTileSums(
    ::capnp::Orphan<::capnp::List<
        ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
        ::capnp::Kind::LIST>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<12>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>>
FragmentMetadata::Builder::disownTileSums() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::disown(_builder
                                        .getPointerField(
                                            ::capnp::bounded<12>() *
                                            ::capnp::POINTERS));
}

inline bool FragmentMetadata::Reader::hasTileNullCounts() const {
  return !_reader.getPointerField(::capnp::bounded<13>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::Builder::hasTileNullCounts() {
  return !_builder.getPointerField(::capnp::bounded<13>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Reader
FragmentMetadata::Reader::getTileNullCounts() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::get(_reader
                                     .getPointerField(
                                         ::capnp::bounded<13>() *
                                         ::capnp::POINTERS));
}
inline ::capnp::List<
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Builder
FragmentMetadata::Builder::getTileNullCounts() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::get(_builder
                                     .getPointerField(
                                         ::capnp::bounded<13>() *
                                         ::capnp::POINTERS));
}
inline void FragmentMetadata::Builder::setTileNullCounts(
    ::capnp::List<
        ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
        ::capnp::Kind::LIST>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      set(_builder.getPointerField(::capnp::bounded<13>() * ::capnp::POINTERS),
          value);
}
inline void FragmentMetadata::Builder::setTileNullCounts(
    ::kj::ArrayPtr<
        const ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader>
        value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      set(_builder.getPointerField(::capnp::bounded<13>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Builder
FragmentMetadata::Builder::initTileNullCounts(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      init(
          _builder.getPointerField(::capnp::bounded<13>() * ::capnp::POINTERS),
          size);
}
inline void FragmentMetadata::Builder::adoptTileNullCounts(
    ::capnp::Orphan<::capnp::List<
        ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
        ::capnp::Kind::LIST>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<13>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>>
FragmentMetadata::Builder::disownTileNullCounts() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::disown(_builder
                                        .getPointerField(
                                            ::capnp::bounded<13>() *
                                            ::capnp::POINTERS));
}

inline bool FragmentMetadata::Reader::hasFragmentMins() const {
  return !_reader.getPointerField(::capnp::bounded<14>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::Builder::hasFragmentMins() {
  return !_builder.getPointerField(::capnp::bounded<14>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Reader
FragmentMetadata::Reader::getFragmentMins() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::get(_reader
                                     .getPointerField(
                                         ::capnp::bounded<14>() *
                                         ::capnp::POINTERS));
}
inline ::capnp::List<
    ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Builder
FragmentMetadata::Builder::getFragmentMins() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::get(_builder
                                     .getPointerField(
                                         ::capnp::bounded<14>() *
                                         ::capnp::POINTERS));
}
inline void FragmentMetadata::Builder::setFragmentMins(
    ::capnp::List<
        ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
        ::capnp::Kind::LIST>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      set(_builder.getPointerField(::capnp::bounded<14>() * ::capnp::POINTERS),
          value);
}
inline void FragmentMetadata::Builder::setFragmentMins(
    ::kj::ArrayPtr<
        const ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>::Reader>
        value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      set(_builder.getPointerField(::capnp::bounded<14>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Builder
FragmentMetadata::Builder::initFragmentMins(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      init(
          _builder.getPointerField(::capnp::bounded<14>() * ::capnp::POINTERS),
          size);
}
inline void FragmentMetadata::Builder::adoptFragmentMins(
    ::capnp::Orphan<::capnp::List<
        ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
        ::capnp::Kind::LIST>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<14>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>>
FragmentMetadata::Builder::disownFragmentMins() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::disown(_builder
                                        .getPointerField(
                                            ::capnp::bounded<14>() *
                                            ::capnp::POINTERS));
}

inline bool FragmentMetadata::Reader::hasFragmentMaxs() const {
  return !_reader.getPointerField(::capnp::bounded<15>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::Builder::hasFragmentMaxs() {
  return !_builder.getPointerField(::capnp::bounded<15>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Reader
FragmentMetadata::Reader::getFragmentMaxs() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::get(_reader
                                     .getPointerField(
                                         ::capnp::bounded<15>() *
                                         ::capnp::POINTERS));
}
inline ::capnp::List<
    ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Builder
FragmentMetadata::Builder::getFragmentMaxs() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::get(_builder
                                     .getPointerField(
                                         ::capnp::bounded<15>() *
                                         ::capnp::POINTERS));
}
inline void FragmentMetadata::Builder::setFragmentMaxs(
    ::capnp::List<
        ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
        ::capnp::Kind::LIST>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      set(_builder.getPointerField(::capnp::bounded<15>() * ::capnp::POINTERS),
          value);
}
inline void FragmentMetadata::Builder::setFragmentMaxs(
    ::kj::ArrayPtr<
        const ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>::Reader>
        value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      set(_builder.getPointerField(::capnp::bounded<15>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>::Builder
FragmentMetadata::Builder::initFragmentMaxs(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      init(
          _builder.getPointerField(::capnp::bounded<15>() * ::capnp::POINTERS),
          size);
}
inline void FragmentMetadata::Builder::adoptFragmentMaxs(
    ::capnp::Orphan<::capnp::List<
        ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
        ::capnp::Kind::LIST>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<15>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
    ::capnp::Kind::LIST>>
FragmentMetadata::Builder::disownFragmentMaxs() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::capnp::List<::uint8_t, ::capnp::Kind::PRIMITIVE>,
      ::capnp::Kind::LIST>>::disown(_builder
                                        .getPointerField(
                                            ::capnp::bounded<15>() *
                                            ::capnp::POINTERS));
}

inline bool FragmentMetadata::Reader::hasFragmentSums() const {
  return !_reader.getPointerField(::capnp::bounded<16>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::Builder::hasFragmentSums() {
  return !_builder.getPointerField(::capnp::bounded<16>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
FragmentMetadata::Reader::getFragmentSums() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
FragmentMetadata::Builder::getFragmentSums() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::Builder::setFragmentSums(
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<16>() * ::capnp::POINTERS),
          value);
}
inline void FragmentMetadata::Builder::setFragmentSums(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<16>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
FragmentMetadata::Builder::initFragmentSums(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<16>() * ::capnp::POINTERS),
          size);
}
inline void FragmentMetadata::Builder::adoptFragmentSums(
    ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<16>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
FragmentMetadata::Builder::disownFragmentSums() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<16>() * ::capnp::POINTERS));
}

inline bool FragmentMetadata::Reader::hasFragmentNullCounts() const {
  return !_reader.getPointerField(::capnp::bounded<17>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::Builder::hasFragmentNullCounts() {
  return !_builder.getPointerField(::capnp::bounded<17>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
FragmentMetadata::Reader::getFragmentNullCounts() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
FragmentMetadata::Builder::getFragmentNullCounts() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::Builder::setFragmentNullCounts(
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<17>() * ::capnp::POINTERS),
          value);
}
inline void FragmentMetadata::Builder::setFragmentNullCounts(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<17>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
FragmentMetadata::Builder::initFragmentNullCounts(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<17>() * ::capnp::POINTERS),
          size);
}
inline void FragmentMetadata::Builder::adoptFragmentNullCounts(
    ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<17>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
FragmentMetadata::Builder::disownFragmentNullCounts() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<17>() * ::capnp::POINTERS));
}

inline ::uint32_t FragmentMetadata::Reader::getVersion() const {
  return _reader.getDataField<::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::uint32_t FragmentMetadata::Builder::getVersion() {
  return _builder.getDataField<::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void FragmentMetadata::Builder::setVersion(::uint32_t value) {
  _builder.setDataField<::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool FragmentMetadata::Reader::hasTimestampRange() const {
  return !_reader.getPointerField(::capnp::bounded<18>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::Builder::hasTimestampRange() {
  return !_builder.getPointerField(::capnp::bounded<18>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
FragmentMetadata::Reader::getTimestampRange() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<18>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
FragmentMetadata::Builder::getTimestampRange() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<18>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::Builder::setTimestampRange(
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<18>() * ::capnp::POINTERS),
          value);
}
inline void FragmentMetadata::Builder::setTimestampRange(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<18>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
FragmentMetadata::Builder::initTimestampRange(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<18>() * ::capnp::POINTERS),
          size);
}
inline void FragmentMetadata::Builder::adoptTimestampRange(
    ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<18>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
FragmentMetadata::Builder::disownTimestampRange() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<18>() * ::capnp::POINTERS));
}

inline ::uint64_t FragmentMetadata::Reader::getLastTileCellNum() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline ::uint64_t FragmentMetadata::Builder::getLastTileCellNum() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void FragmentMetadata::Builder::setLastTileCellNum(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool FragmentMetadata::Reader::hasNonEmptyDomain() const {
  return !_reader.getPointerField(::capnp::bounded<19>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::Builder::hasNonEmptyDomain() {
  return !_builder.getPointerField(::capnp::bounded<19>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::NonEmptyDomainList::Reader
FragmentMetadata::Reader::getNonEmptyDomain() const {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::NonEmptyDomainList>::
      get(_reader.getPointerField(::capnp::bounded<19>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::NonEmptyDomainList::Builder
FragmentMetadata::Builder::getNonEmptyDomain() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::NonEmptyDomainList>::
      get(_builder.getPointerField(::capnp::bounded<19>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::NonEmptyDomainList::Pipeline
FragmentMetadata::Pipeline::getNonEmptyDomain() {
  return ::tiledb::sm::serialization::capnp::NonEmptyDomainList::Pipeline(
      _typeless.getPointerField(19));
}
#endif  // !CAPNP_LITE
inline void FragmentMetadata::Builder::setNonEmptyDomain(
    ::tiledb::sm::serialization::capnp::NonEmptyDomainList::Reader value) {
  ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::NonEmptyDomainList>::
      set(_builder.getPointerField(::capnp::bounded<19>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::NonEmptyDomainList::Builder
FragmentMetadata::Builder::initNonEmptyDomain() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::NonEmptyDomainList>::
      init(
          _builder.getPointerField(::capnp::bounded<19>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::Builder::adoptNonEmptyDomain(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::NonEmptyDomainList>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::NonEmptyDomainList>::
      adopt(
          _builder.getPointerField(::capnp::bounded<19>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::tiledb::sm::serialization::capnp::NonEmptyDomainList>
FragmentMetadata::Builder::disownNonEmptyDomain() {
  return ::capnp::_::PointerHelpers<
      ::tiledb::sm::serialization::capnp::NonEmptyDomainList>::
      disown(
          _builder.getPointerField(::capnp::bounded<19>() * ::capnp::POINTERS));
}

inline bool FragmentMetadata::Reader::hasRtree() const {
  return !_reader.getPointerField(::capnp::bounded<20>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::Builder::hasRtree() {
  return !_builder.getPointerField(::capnp::bounded<20>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Data::Reader FragmentMetadata::Reader::getRtree() const {
  return ::capnp::_::PointerHelpers<::capnp::Data>::get(
      _reader.getPointerField(::capnp::bounded<20>() * ::capnp::POINTERS));
}
inline ::capnp::Data::Builder FragmentMetadata::Builder::getRtree() {
  return ::capnp::_::PointerHelpers<::capnp::Data>::get(
      _builder.getPointerField(::capnp::bounded<20>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::Builder::setRtree(::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Data>::set(
      _builder.getPointerField(::capnp::bounded<20>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Data::Builder FragmentMetadata::Builder::initRtree(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Data>::init(
      _builder.getPointerField(::capnp::bounded<20>() * ::capnp::POINTERS),
      size);
}
inline void FragmentMetadata::Builder::adoptRtree(
    ::capnp::Orphan<::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Data>::adopt(
      _builder.getPointerField(::capnp::bounded<20>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Data> FragmentMetadata::Builder::disownRtree() {
  return ::capnp::_::PointerHelpers<::capnp::Data>::disown(
      _builder.getPointerField(::capnp::bounded<20>() * ::capnp::POINTERS));
}

inline bool FragmentMetadata::Reader::getHasConsolidatedFooter() const {
  return _reader.getDataField<bool>(::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool FragmentMetadata::Builder::getHasConsolidatedFooter() {
  return _builder.getDataField<bool>(::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void FragmentMetadata::Builder::setHasConsolidatedFooter(bool value) {
  _builder.setDataField<bool>(::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool FragmentMetadata::Reader::hasGtOffsets() const {
  return !_reader.getPointerField(::capnp::bounded<21>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::Builder::hasGtOffsets() {
  return !_builder.getPointerField(::capnp::bounded<21>() * ::capnp::POINTERS)
              .isNull();
}
inline ::tiledb::sm::serialization::capnp::FragmentMetadata::
    GenericTileOffsets::Reader
    FragmentMetadata::Reader::getGtOffsets() const {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::
                                        FragmentMetadata::GenericTileOffsets>::
      get(_reader.getPointerField(::capnp::bounded<21>() * ::capnp::POINTERS));
}
inline ::tiledb::sm::serialization::capnp::FragmentMetadata::
    GenericTileOffsets::Builder
    FragmentMetadata::Builder::getGtOffsets() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::
                                        FragmentMetadata::GenericTileOffsets>::
      get(_builder.getPointerField(::capnp::bounded<21>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::tiledb::sm::serialization::capnp::FragmentMetadata::
    GenericTileOffsets::Pipeline
    FragmentMetadata::Pipeline::getGtOffsets() {
  return ::tiledb::sm::serialization::capnp::FragmentMetadata::
      GenericTileOffsets::Pipeline(_typeless.getPointerField(21));
}
#endif  // !CAPNP_LITE
inline void FragmentMetadata::Builder::setGtOffsets(
    ::tiledb::sm::serialization::capnp::FragmentMetadata::GenericTileOffsets::
        Reader value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::
                                 FragmentMetadata::GenericTileOffsets>::
      set(_builder.getPointerField(::capnp::bounded<21>() * ::capnp::POINTERS),
          value);
}
inline ::tiledb::sm::serialization::capnp::FragmentMetadata::
    GenericTileOffsets::Builder
    FragmentMetadata::Builder::initGtOffsets() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::
                                        FragmentMetadata::GenericTileOffsets>::
      init(
          _builder.getPointerField(::capnp::bounded<21>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::Builder::adoptGtOffsets(
    ::capnp::Orphan<::tiledb::sm::serialization::capnp::FragmentMetadata::
                        GenericTileOffsets>&& value) {
  ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::
                                 FragmentMetadata::GenericTileOffsets>::
      adopt(
          _builder.getPointerField(::capnp::bounded<21>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<
    ::tiledb::sm::serialization::capnp::FragmentMetadata::GenericTileOffsets>
FragmentMetadata::Builder::disownGtOffsets() {
  return ::capnp::_::PointerHelpers<::tiledb::sm::serialization::capnp::
                                        FragmentMetadata::GenericTileOffsets>::
      disown(
          _builder.getPointerField(::capnp::bounded<21>() * ::capnp::POINTERS));
}

inline ::uint64_t FragmentMetadata::GenericTileOffsets::Reader::getRtree()
    const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::uint64_t FragmentMetadata::GenericTileOffsets::Builder::getRtree() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void FragmentMetadata::GenericTileOffsets::Builder::setRtree(
    ::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool FragmentMetadata::GenericTileOffsets::Reader::hasTileOffsets()
    const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::GenericTileOffsets::Builder::hasTileOffsets() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
FragmentMetadata::GenericTileOffsets::Reader::getTileOffsets() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
FragmentMetadata::GenericTileOffsets::Builder::getTileOffsets() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::GenericTileOffsets::Builder::setTileOffsets(
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline void FragmentMetadata::GenericTileOffsets::Builder::setTileOffsets(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
FragmentMetadata::GenericTileOffsets::Builder::initTileOffsets(
    unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          size);
}
inline void FragmentMetadata::GenericTileOffsets::Builder::adoptTileOffsets(
    ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
FragmentMetadata::GenericTileOffsets::Builder::disownTileOffsets() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool FragmentMetadata::GenericTileOffsets::Reader::hasTileVarOffsets()
    const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::GenericTileOffsets::Builder::hasTileVarOffsets() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
FragmentMetadata::GenericTileOffsets::Reader::getTileVarOffsets() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
FragmentMetadata::GenericTileOffsets::Builder::getTileVarOffsets() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::GenericTileOffsets::Builder::setTileVarOffsets(
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline void FragmentMetadata::GenericTileOffsets::Builder::setTileVarOffsets(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
FragmentMetadata::GenericTileOffsets::Builder::initTileVarOffsets(
    unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          size);
}
inline void FragmentMetadata::GenericTileOffsets::Builder::adoptTileVarOffsets(
    ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
FragmentMetadata::GenericTileOffsets::Builder::disownTileVarOffsets() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool FragmentMetadata::GenericTileOffsets::Reader::hasTileVarSizes()
    const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::GenericTileOffsets::Builder::hasTileVarSizes() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
FragmentMetadata::GenericTileOffsets::Reader::getTileVarSizes() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
FragmentMetadata::GenericTileOffsets::Builder::getTileVarSizes() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::GenericTileOffsets::Builder::setTileVarSizes(
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          value);
}
inline void FragmentMetadata::GenericTileOffsets::Builder::setTileVarSizes(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
FragmentMetadata::GenericTileOffsets::Builder::initTileVarSizes(
    unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          size);
}
inline void FragmentMetadata::GenericTileOffsets::Builder::adoptTileVarSizes(
    ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
FragmentMetadata::GenericTileOffsets::Builder::disownTileVarSizes() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool
FragmentMetadata::GenericTileOffsets::Reader::hasTileValidityOffsets() const {
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool
FragmentMetadata::GenericTileOffsets::Builder::hasTileValidityOffsets() {
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
FragmentMetadata::GenericTileOffsets::Reader::getTileValidityOffsets() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
FragmentMetadata::GenericTileOffsets::Builder::getTileValidityOffsets() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void
FragmentMetadata::GenericTileOffsets::Builder::setTileValidityOffsets(
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          value);
}
inline void
FragmentMetadata::GenericTileOffsets::Builder::setTileValidityOffsets(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
FragmentMetadata::GenericTileOffsets::Builder::initTileValidityOffsets(
    unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          size);
}
inline void
FragmentMetadata::GenericTileOffsets::Builder::adoptTileValidityOffsets(
    ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
FragmentMetadata::GenericTileOffsets::Builder::disownTileValidityOffsets() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool FragmentMetadata::GenericTileOffsets::Reader::hasTileMinOffsets()
    const {
  return !_reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::GenericTileOffsets::Builder::hasTileMinOffsets() {
  return !_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
FragmentMetadata::GenericTileOffsets::Reader::getTileMinOffsets() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
FragmentMetadata::GenericTileOffsets::Builder::getTileMinOffsets() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::GenericTileOffsets::Builder::setTileMinOffsets(
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
          value);
}
inline void FragmentMetadata::GenericTileOffsets::Builder::setTileMinOffsets(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
FragmentMetadata::GenericTileOffsets::Builder::initTileMinOffsets(
    unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
          size);
}
inline void FragmentMetadata::GenericTileOffsets::Builder::adoptTileMinOffsets(
    ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
FragmentMetadata::GenericTileOffsets::Builder::disownTileMinOffsets() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool FragmentMetadata::GenericTileOffsets::Reader::hasTileMaxOffsets()
    const {
  return !_reader.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::GenericTileOffsets::Builder::hasTileMaxOffsets() {
  return !_builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
FragmentMetadata::GenericTileOffsets::Reader::getTileMaxOffsets() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
FragmentMetadata::GenericTileOffsets::Builder::getTileMaxOffsets() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::GenericTileOffsets::Builder::setTileMaxOffsets(
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
          value);
}
inline void FragmentMetadata::GenericTileOffsets::Builder::setTileMaxOffsets(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
FragmentMetadata::GenericTileOffsets::Builder::initTileMaxOffsets(
    unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
          size);
}
inline void FragmentMetadata::GenericTileOffsets::Builder::adoptTileMaxOffsets(
    ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
FragmentMetadata::GenericTileOffsets::Builder::disownTileMaxOffsets() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool FragmentMetadata::GenericTileOffsets::Reader::hasTileSumOffsets()
    const {
  return !_reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::GenericTileOffsets::Builder::hasTileSumOffsets() {
  return !_builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
FragmentMetadata::GenericTileOffsets::Reader::getTileSumOffsets() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
FragmentMetadata::GenericTileOffsets::Builder::getTileSumOffsets() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::GenericTileOffsets::Builder::setTileSumOffsets(
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
          value);
}
inline void FragmentMetadata::GenericTileOffsets::Builder::setTileSumOffsets(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
FragmentMetadata::GenericTileOffsets::Builder::initTileSumOffsets(
    unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
          size);
}
inline void FragmentMetadata::GenericTileOffsets::Builder::adoptTileSumOffsets(
    ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
FragmentMetadata::GenericTileOffsets::Builder::disownTileSumOffsets() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool
FragmentMetadata::GenericTileOffsets::Reader::hasTileNullCountOffsets() const {
  return !_reader.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS)
              .isNull();
}
inline bool
FragmentMetadata::GenericTileOffsets::Builder::hasTileNullCountOffsets() {
  return !_builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
FragmentMetadata::GenericTileOffsets::Reader::getTileNullCountOffsets() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
FragmentMetadata::GenericTileOffsets::Builder::getTileNullCountOffsets() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void
FragmentMetadata::GenericTileOffsets::Builder::setTileNullCountOffsets(
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
          value);
}
inline void
FragmentMetadata::GenericTileOffsets::Builder::setTileNullCountOffsets(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
FragmentMetadata::GenericTileOffsets::Builder::initTileNullCountOffsets(
    unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
          size);
}
inline void
FragmentMetadata::GenericTileOffsets::Builder::adoptTileNullCountOffsets(
    ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
FragmentMetadata::GenericTileOffsets::Builder::disownTileNullCountOffsets() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline ::uint64_t FragmentMetadata::GenericTileOffsets::Reader::
    getFragmentMinMaxSumNullCountOffset() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::uint64_t FragmentMetadata::GenericTileOffsets::Builder::
    getFragmentMinMaxSumNullCountOffset() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void FragmentMetadata::GenericTileOffsets::Builder::
    setFragmentMinMaxSumNullCountOffset(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline ::uint64_t
FragmentMetadata::GenericTileOffsets::Reader::getProcessedConditionsOffsets()
    const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline ::uint64_t
FragmentMetadata::GenericTileOffsets::Builder::getProcessedConditionsOffsets() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void
FragmentMetadata::GenericTileOffsets::Builder::setProcessedConditionsOffsets(
    ::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline ::uint64_t MultiPartUploadState::Reader::getPartNumber() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::uint64_t MultiPartUploadState::Builder::getPartNumber() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void MultiPartUploadState::Builder::setPartNumber(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool MultiPartUploadState::Reader::hasUploadId() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool MultiPartUploadState::Builder::hasUploadId() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader MultiPartUploadState::Reader::getUploadId() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder MultiPartUploadState::Builder::getUploadId() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MultiPartUploadState::Builder::setUploadId(
    ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder MultiPartUploadState::Builder::initUploadId(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void MultiPartUploadState::Builder::adoptUploadId(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text>
MultiPartUploadState::Builder::disownUploadId() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool MultiPartUploadState::Reader::hasStatus() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool MultiPartUploadState::Builder::hasStatus() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader MultiPartUploadState::Reader::getStatus() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder MultiPartUploadState::Builder::getStatus() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void MultiPartUploadState::Builder::setStatus(
    ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder MultiPartUploadState::Builder::initStatus(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void MultiPartUploadState::Builder::adoptStatus(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text>
MultiPartUploadState::Builder::disownStatus() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool MultiPartUploadState::Reader::hasCompletedParts() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool MultiPartUploadState::Builder::hasCompletedParts() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::CompletedPart,
    ::capnp::Kind::STRUCT>::Reader
MultiPartUploadState::Reader::getCompletedParts() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::CompletedPart,
      ::capnp::Kind::STRUCT>>::get(_reader
                                       .getPointerField(
                                           ::capnp::bounded<2>() *
                                           ::capnp::POINTERS));
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::CompletedPart,
    ::capnp::Kind::STRUCT>::Builder
MultiPartUploadState::Builder::getCompletedParts() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::CompletedPart,
      ::capnp::Kind::STRUCT>>::get(_builder
                                       .getPointerField(
                                           ::capnp::bounded<2>() *
                                           ::capnp::POINTERS));
}
inline void MultiPartUploadState::Builder::setCompletedParts(
    ::capnp::List<
        ::tiledb::sm::serialization::capnp::CompletedPart,
        ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::CompletedPart,
      ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::CompletedPart,
    ::capnp::Kind::STRUCT>::Builder
MultiPartUploadState::Builder::initCompletedParts(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::CompletedPart,
      ::capnp::Kind::STRUCT>>::
      init(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          size);
}
inline void MultiPartUploadState::Builder::adoptCompletedParts(
    ::capnp::Orphan<::capnp::List<
        ::tiledb::sm::serialization::capnp::CompletedPart,
        ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::CompletedPart,
      ::capnp::Kind::STRUCT>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::tiledb::sm::serialization::capnp::CompletedPart,
    ::capnp::Kind::STRUCT>>
MultiPartUploadState::Builder::disownCompletedParts() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::CompletedPart,
      ::capnp::Kind::STRUCT>>::disown(_builder
                                          .getPointerField(
                                              ::capnp::bounded<2>() *
                                              ::capnp::POINTERS));
}

inline bool MultiPartUploadState::Reader::hasBufferedChunks() const {
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool MultiPartUploadState::Builder::hasBufferedChunks() {
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::BufferedChunk,
    ::capnp::Kind::STRUCT>::Reader
MultiPartUploadState::Reader::getBufferedChunks() const {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::BufferedChunk,
      ::capnp::Kind::STRUCT>>::get(_reader
                                       .getPointerField(
                                           ::capnp::bounded<3>() *
                                           ::capnp::POINTERS));
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::BufferedChunk,
    ::capnp::Kind::STRUCT>::Builder
MultiPartUploadState::Builder::getBufferedChunks() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::BufferedChunk,
      ::capnp::Kind::STRUCT>>::get(_builder
                                       .getPointerField(
                                           ::capnp::bounded<3>() *
                                           ::capnp::POINTERS));
}
inline void MultiPartUploadState::Builder::setBufferedChunks(
    ::capnp::List<
        ::tiledb::sm::serialization::capnp::BufferedChunk,
        ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::BufferedChunk,
      ::capnp::Kind::STRUCT>>::
      set(_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<
    ::tiledb::sm::serialization::capnp::BufferedChunk,
    ::capnp::Kind::STRUCT>::Builder
MultiPartUploadState::Builder::initBufferedChunks(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::BufferedChunk,
      ::capnp::Kind::STRUCT>>::
      init(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          size);
}
inline void MultiPartUploadState::Builder::adoptBufferedChunks(
    ::capnp::Orphan<::capnp::List<
        ::tiledb::sm::serialization::capnp::BufferedChunk,
        ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::BufferedChunk,
      ::capnp::Kind::STRUCT>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<
    ::tiledb::sm::serialization::capnp::BufferedChunk,
    ::capnp::Kind::STRUCT>>
MultiPartUploadState::Builder::disownBufferedChunks() {
  return ::capnp::_::PointerHelpers<::capnp::List<
      ::tiledb::sm::serialization::capnp::BufferedChunk,
      ::capnp::Kind::STRUCT>>::disown(_builder
                                          .getPointerField(
                                              ::capnp::bounded<3>() *
                                              ::capnp::POINTERS));
}

inline bool CompletedPart::Reader::hasETag() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool CompletedPart::Builder::hasETag() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader CompletedPart::Reader::getETag() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder CompletedPart::Builder::getETag() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CompletedPart::Builder::setETag(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder CompletedPart::Builder::initETag(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void CompletedPart::Builder::adoptETag(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> CompletedPart::Builder::disownETag() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline ::uint64_t CompletedPart::Reader::getPartNumber() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::uint64_t CompletedPart::Builder::getPartNumber() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CompletedPart::Builder::setPartNumber(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool WrittenFragmentInfo::Reader::hasUri() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool WrittenFragmentInfo::Builder::hasUri() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader WrittenFragmentInfo::Reader::getUri() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder WrittenFragmentInfo::Builder::getUri() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void WrittenFragmentInfo::Builder::setUri(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder WrittenFragmentInfo::Builder::initUri(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void WrittenFragmentInfo::Builder::adoptUri(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text>
WrittenFragmentInfo::Builder::disownUri() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool WrittenFragmentInfo::Reader::hasTimestampRange() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool WrittenFragmentInfo::Builder::hasTimestampRange() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader
WrittenFragmentInfo::Reader::getTimestampRange() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
WrittenFragmentInfo::Builder::getTimestampRange() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::get(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void WrittenFragmentInfo::Builder::setTimestampRange(
    ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline void WrittenFragmentInfo::Builder::setTimestampRange(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::set(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          value);
}
inline ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>::Builder
WrittenFragmentInfo::Builder::initTimestampRange(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          size);
}
inline void WrittenFragmentInfo::Builder::adoptTimestampRange(
    ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>&&
        value) {
  ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>
WrittenFragmentInfo::Builder::disownTimestampRange() {
  return ::capnp::_::PointerHelpers<
      ::capnp::List<::uint64_t, ::capnp::Kind::PRIMITIVE>>::
      disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool BufferedChunk::Reader::hasUri() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool BufferedChunk::Builder::hasUri() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader BufferedChunk::Reader::getUri() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder BufferedChunk::Builder::getUri() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BufferedChunk::Builder::setUri(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder BufferedChunk::Builder::initUri(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void BufferedChunk::Builder::adoptUri(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> BufferedChunk::Builder::disownUri() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline ::uint64_t BufferedChunk::Reader::getSize() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::uint64_t BufferedChunk::Builder::getSize() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void BufferedChunk::Builder::setSize(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

}  // namespace capnp
}  // namespace serialization
}  // namespace sm
}  // namespace tiledb
