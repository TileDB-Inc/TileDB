language: cpp

dist: trusty
sudo: required
services: docker

matrix:
  include:
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-4.9

    - os: linux
      env:
      - TILEDB_HDFS="ON"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-4.9

    - os: linux
      env:
      - TILEDB_S3="ON"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-4.9

    - os: osx

before_install:
    - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.9 49;
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.9 49;
        sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-4.9 49;
        sudo update-alternatives --config gcc;
        sudo update-alternatives --config g++;
        sudo update-alternatives --config gcov;
      fi
install:
    # Install clangformat (v5.0)
    - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        sudo scripts/install-clangformat.sh;
      fi
    # Turn off OSX clang-format check as due to brew install error
    # scripts/install-clangformat.sh;

    # Install doxygen
    - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        sudo apt-get -y install doxygen;
      fi

    # Set up arguments for install-deps.sh and bootstrap.
    - deps_args="";
      bootstrap_args="--enable=verbose,static-tiledb";
      if [[ "$TILEDB_HDFS" == "ON" ]]; then
        deps_args="${deps_args} --enable-hdfs";
        bootstrap_args="${bootstrap_args} --enable-hdfs";
      fi;
      if [[ "$TILEDB_S3" == "ON" ]]; then
        deps_args="${deps_args} --enable-s3";
        bootstrap_args="${bootstrap_args} --enable-s3";
      fi

    # Start HDFS server if enabled
    - if [[ "$TILEDB_HDFS" == "ON" ]]; then
        source scripts/install-hadoop.sh;
        source scripts/run-hadoop.sh;
      fi

    # Start minio server if S3 is enabled
    - if [[ "$TILEDB_S3" == "ON" ]]; then
        source scripts/install-minio.sh;
        source scripts/run-minio.sh;
      fi

    - mkdir -p $TRAVIS_BUILD_DIR/build && cd $TRAVIS_BUILD_DIR/build

    # Configure and build TileDB
    - ../bootstrap $bootstrap_args

    - make -j4
    - make examples -j4
    - make -C tiledb install

    # Build the documentation (this does not deploy to RTD).
    - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        pushd $TRAVIS_BUILD_DIR/doc;
        ./local-build.sh;
        popd;
      fi

script:
    - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        make check-format;
      fi
    - make check
    - |
      pushd $TRAVIS_BUILD_DIR/examples/cmake_project
      mkdir build && cd build
      cmake -DCMAKE_PREFIX_PATH=$TRAVIS_BUILD_DIR/dist .. && make
      ./ExampleExe
      ./ExampleExe_static
      popd
    - |
      testfile=$(mktemp)
      mv $testfile $testfile.cc
      testfile=$testfile.cc
      cat <<EOF > $testfile
      #include <assert.h>
      #include <tiledb/tiledb.h>
      #include <tiledb/version.h>
      int main(int argc, char **argv) {
        int major = 0;
        int minor = 0;
        int patch = 0;
        tiledb_version(&major,&minor,&patch);
        auto version = tiledb::version();
        assert(major == std::get<0>(version));
        return 0;
      }
      EOF
      if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        export LD_LIBRARY_PATH=$TRAVIS_BUILD_DIR/dist/lib:/usr/local/lib:$LD_LIBRARY_PATH
      else
        export DYLD_LIBRARY_PATH=$TRAVIS_BUILD_DIR/dist/lib:/usr/local/lib:$DYLD_LIBRARY_PATH
      fi
      ${CXX} -std=c++11 -g -O0 -Wall -Werror -I$TRAVIS_BUILD_DIR/dist/include -L$TRAVIS_BUILD_DIR/dist/lib $testfile -o $testfile.exe -ltiledb && \
      $testfile.exe && \
      rm -f $testfile $testfile.exe
