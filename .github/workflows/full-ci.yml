name: "Full CI"
on:
  push:
    branches:
      - dev
      - release-*
      - refs/tags/*

    ##############################################################################
    #                                                                            #
    #    These sections must be synchronized with 'paths' in full-ci-dummy.yml   #
    #                                                                            #
    ##############################################################################

  pull_request:
    branches:
      - '*'  # must quote since "*" is a YAML reserved character; we want a string
    paths-ignore:
      - '.github/workflows/quarto-render.yml'
      - '_quarto.yml'
      - 'quarto-materials/*'
      - '**/.md'
      - 'tiledb/doxygen/source/*'
      - 'tiledb/sm/c_api/tiledb_version.h'

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

## NOTE: the job ids below must be unique!
jobs:
  ci1:
    uses: ./.github/workflows/ci-linux_mac.yml
    with:
      ci_backend: AZURE
      matrix_image: ubuntu-22.04
      bootstrap_args: '--enable-azure --enable-release-symbols'

  ci2:
    uses: ./.github/workflows/ci-linux_mac.yml
    with:
      ci_backend: GCS
      matrix_image: ubuntu-20.04
      matrix_compiler_cc: 'gcc-10'
      matrix_compiler_cxx: 'g++-10'
      timeout: 120
      bootstrap_args: '--enable-gcs --enable-release-symbols'

  ci3:
    uses: ./.github/workflows/ci-linux_mac.yml
    with:
      ci_option: SERIALIZATION
      matrix_image: ubuntu-22.04
      bootstrap_args: '--enable-serialization --enable-release-symbols'

  ci4:
    uses: ./.github/workflows/ci-linux_mac.yml
    with:
      ci_backend: S3
      matrix_image: macos-12
      cmake_generator: 'Ninja' # Use Ninja due to performance issues.
      timeout: 120
      bootstrap_args: '--enable=s3,serialization,tools --enable-release-symbols'

  ci5:
    uses: ./.github/workflows/ci-linux_mac.yml
    with:
      ci_backend: GCS
      matrix_image: macos-12
      cmake_generator: 'Ninja' # Use Ninja due to performance issues.
      timeout: 120
      bootstrap_args: '--enable-gcs --enable-release-symbols'

  ci6:
    uses: ./.github/workflows/ci-linux_mac.yml
    with:
      ci_option: Experimental
      matrix_image: ubuntu-22.04
      bootstrap_args: '--enable=experimental-features,serialization --enable-release-symbols'

  ci7:
    uses: ./.github/workflows/ci-linux_mac.yml
    with:
      ci_backend: S3
      matrix_image: ubuntu-22.04
      timeout: 120
      bootstrap_args: '--enable-s3 --enable-release-symbols'

  ci8:
    uses: ./.github/workflows/ci-linux_mac.yml
    with:
      ci_option: ASAN
      matrix_image: ubuntu-20.04
      matrix_compiler_cc: 'gcc-10'
      matrix_compiler_cxx: 'g++-10'
      timeout: 120
      bootstrap_args: '--enable-serialization'
      asan: true

  ci9:
    uses: ./.github/workflows/ci-linux_mac.yml
    with:
      ci_backend: AZURE
      matrix_image: macos-12
      cmake_generator: 'Ninja' # Use Ninja due to performance issues.
      timeout: 120
      bootstrap_args: '--enable-azure'

  ci_manylinux:
    uses: ./.github/workflows/ci-linux_mac.yml
    with:
      ci_backend: MANYLINUX
      matrix_image: ubuntu-20.04
      matrix_compiler_cflags: "-lrt"
      matrix_compiler_cxxflags: "-lrt"
      timeout: 120
      bootstrap_args: '--enable-serialization'
      manylinux: true

  ci_msvc:
    uses: ./.github/workflows/build-windows.yml

  ci_mingw_r:
    uses: ./.github/workflows/build-rtools40.yml

  backward_compatibility:
    uses: ./.github/workflows/build-ubuntu20.04-backwards-compatibility.yml

  standalone:
    uses: ./.github/workflows/unit-test-runs.yml

  ci_docker:
    uses: ./.github/workflows/build-dockerfile.yml

  # dummy job for branch protection check
  full_ci_passed:
    needs: [
        ci1,
        ci2,
        ci2,
        ci3,
        ci4,
        ci5,
        ci6,
        ci7,
        ci8,
        ci9,
        ci_manylinux,
        ci_msvc,
        backward_compatibility,
        standalone
      ]
    runs-on: ubuntu-22.04
    steps:
      - name: ''
        run: echo "Complete"
