name: windows build

on:
  push:
  pull_request:

env:
  BACKWARDS_COMPATIBILITY_ARRAYS: OFF
  TILEDB_S3: OFF
  TILEDB_AZURE: OFF
  TILEDB_GCS: OFF
  TILEDB_SERIALIZATION: OFF
  TILEDB_STATIC: OFF
  TILEDB_TOOLS: ON
  TILEDB_BASE_BOOTSTRAP_OPTIONS: '-EnableVerbose -EnableStaticTileDB -EnableBuildDeps'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    strategy:
      matrix:
        #os: [windows-2016, windows-2019]
        os: [windows-2016]
        #considering https://stackoverflow.com/questions/65035256/how-to-access-matrix-variables-in-github-actions
        environ: [azure, s3, serialization]
        include:
          - environ: 'azure'
            TILEDB_AZURE: ON
            TILEDB_USE_CUSTOM_NODEJS: OFF
            TILEDB_ARROW_TESTS: ON
            TILEDB_SERIALIZATION: OFF
            TILEDB_S3: OFF
          - environ: 's3'
            TILEDB_S3: ON
            TILEDB_ARROW_TESTS: ON
            TILEDB_SERIALIZATION: OFF
            TILEDB_AZURE: OFF
          - environ: 'serialization'
            TILEDB_S3: OFF
            TILEDB_AZURE: OFF
            TILEDB_ARROW_TESTS: OFF
            TILEDB_SERIALIZATION: ON
    env:
      TILEDB_HOME: ${{ github.workspace }}
      TILEDB_GA_IMAGE_NAME: ${{ matrix.os }}
      TILEDB_S3: ${{ matrix.TILEDB_S3 }}
      TILEDB_AZURE: ${{ matrix.TILEDB_AZURE }} #azure }}
      TILEDB_SERIALIZATION: ${{ matrix.TILEDB_SERIALIZATION }} #serialization }}
      TILEDB_ARROW_TESTS: ${{ matrix.TILEDB_ARROW_TESTS }}
    steps:
      - name: 'tiledb env prep'
        run: |
          $env:BUILD_BUILDDIRECTORY = $env:GITHUB_WORKSPACE.replace("TileDB\TileDB","tdbbd") # 't'ile'db' 'b'uild 'd'ir
          $env:BUILD_SOURCESDIRECTORY = $env:GITHUB_WORKSPACE

          Write-Host "GITHUB_WORKSPACE is '$env:GITHUB_WORKSPACE'"
          Write-Host "BUILD_BUILDDIRECTORY is '$env:BUILD_BUILDDIRECTORY'"
          Write-Host "BUILD_SOURCESDIRECTORY is '$env:BUILD_SOURCESDIRECTORY'"
          Write-Host "GITHUB_ENV is $env:GITHUB_ENV"

          mkdir $env:BUILD_BUILDDIRECTORY

          write-host "BUILD_BUILDDIRECTORY=$env:BUILD_BUILDDIRECTORY" *>> $env:GITHUB_ENV
          write-host "BUILD_SOURCESDIRECTORY=$env:BUILD_SOURCESDIRECTORY" *>> $env:GITHUB_ENV
      - name: 'Print env'
        run: |
          set
        shell: cmd
      - name: ARROW python needs
        shell: bash
        if: ${{ matrix.TILEDB_ARROW_TESTS == 'ON' }}
        run: |
          set -e pipefail
          if [[ "$TILEDB_ARROW_TESTS" == "ON" ]]; then
            pip install pyarrow pybind11 numpy
          fi
      - name: Prepare git
        run: git config --global core.autocrlf false
      - uses: actions/checkout@v2
      - name: core tiledb windows build 
        run: |
          $ErrorView = "NormalView" 
          
          #directory $env:BUILD_BUILDDIRECTORY was created in step 'tiledb env prep'
          cd $env:BUILD_BUILDDIRECTORY

          $VSCategory = "Enterprise" # alternate 'Community'
          if ($env:TILEDB_GA_IMAGE_NAME -eq "windows-2016") {
            if (!(Test-Path "C:\Program Files (x86)\Microsoft Visual Studio\2017\${VSCategory}\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin")) {
              Write-Host "ERROR***: Missing C:\Program Files (x86)\Microsoft Visual Studio\2017\${VSCategory}\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin"
              exit $LastExitCode
            }
            $env:Path += ";C:\Program Files (x86)\Microsoft Visual Studio\2017\${VSCategory}\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin"
          } elseif ($env:TILEDB_GA_IMAGE_NAME -eq "windows-2019") {
            if (!(Test-Path "C:\Program Files (x86)\Microsoft Visual Studio\2019\${VSCategory}\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin")) {
              Write-Host "ERROR***: Missing C:\Program Files (x86)\Microsoft Visual Studio\2019\${VSCategory}\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin"
              exit $LastExitCode
            }
            $env:Path += ";C:\Program Files (x86)\Microsoft Visual Studio\2019\${VSCategory}\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin"
          } else {
            Write-Host "Unknown image name: '$($env:TILEDB_GA_IMAGE_NAME)'"
            exit $LastExitCode
          }
          
          # allow double-checking path
          cmd /c "echo $PATH"

          # TODO DEBUG move this back in the TILEDB_S3 section
          # currently we do not run S3 tests on Windows because tests time out (minio+azure slow?)
          write-host "env:BUILD_SOURCESDIRECTORY: '$env:BUILD_SOURCESDIRECTORY'"
          write-host "b4 ls $env:BUILD_SOURCESDIRECTORY"
          ls $env:BUILD_SOURCESDIRECTORY
          write-host 'b4 & "$env:BUILD_SOURCESDIRECTORY\scripts\install-minio.ps1"'
          write-host current directory... (pwd)
          if ($env:TILEDB_S3 -eq "ON") {
            & "$env:BUILD_SOURCESDIRECTORY\scripts\install-minio.ps1"
            netstat -abo
            write-host 'b4 ls "$env:BUILD_SOURCESDIRECTORY\dist\bin"'
            ls "$env:BUILD_SOURCESDIRECTORY\dist\bin"
            #ls "$env:BUILD_SOURCESDIRECTORY\dist\etc"
            #ls "$env:BUILD_SOURCESDIRECTORY\dist\etc\minio"
            ls "$env:BUILD_SOURCESDIRECTORY\dist\usr\local\share"
            ls "$env:BUILD_SOURCESDIRECTORY\dist\usr\local\share\minio"
            #ls "$env:BUILD_SOURCESDIRECTORY\dist\usr\local\share\minio\.minio.sys"
            tasklist
            echo "minio running?"
            tasklist | findstr /i minio
            tasklist /fi "imagename eq minio.exe"
          }

          $bootstrapOptions = $env:TILEDB_BASE_BOOTSTRAP_OPTIONS
          if ($env:TILEDB_S3 -eq "ON") {
            $bootstrapOptions = "-EnableS3 " + $bootstrapOptions
          }
          if ($env:TILEDB_AZURE -eq "ON") {
            $bootstrapOptions = "-EnableAzure " + $bootstrapOptions
          }
          if ($env:TILEDB_GCS -eq "ON") {
            $bootstrapOptions = "-EnableGCS " + $bootstrapOptions
            #NOTE: GCS simulator not yet actually in place.
          }
          if ($env:TILEDB_SERIALIZATION -eq "ON") {
            $bootstrapOptions = "-EnableSerialization " + $bootstrapOptions
          }
          # static already added above as initial default
          # if ($env:TILEDB_STATIC -eq "ON") {
          #  $bootstrapOptions = $bootstrapOptions + " -EnableStaticTileDB"
          # }
          # if ($env:TILEDB_HDFS -eq "ON") {
          #  $bootstrapOptions = $bootstrapOptions + " -EnableHDFS"
          #}
          if ($env:TILEDB_TOOLS -eq "ON") {
            $bootstrapOptions = $bootstrapOptions + " -EnableTools"
          }
          if ($env:TILEDB_DEBUG -eq "ON") {
            $bootstrapOptions = $bootstrapOptions + " -EnableDebug"
          }
          # if ($env:TILEDB_CI_ASAN -eq "ON") {
          #  $bootstrapOptions = $bootstrapOptions + " -EnableSanitizer address -EnableDebug"
          # }
          # if ($env:TILEDB_CI_TSAN -eq "ON") {
          #  $bootstrapOptions = $bootstrapOptions + " -EnableSanitizer thread -EnableDebug"
          # }
          # static already added above as initial default
          # if ($env:TILEDB_FORCE_BUILD_DEPS" -eq "ON") {
          #   $bootstrapOptions = $bootstrapOptions + " -EnableBuildDeps"
          # }
          if ($env:TILEDB_WERROR -eq "OFF") {
            $bootstrapOptions = $bootstrapOptions + " -DisableWerror"
          }
          
          $bootstrapExpression = "& $env:BUILD_SOURCESDIRECTORY\bootstrap.ps1 " + $bootstrapOptions
          Write-Host "bootstrapExpression: $bootstrapExpression"
          Invoke-Expression $bootstrapExpression

          if ($LastExitCode -ne 0) {
            Write-Host "Bootstrap failed."
            exit $LastExitCode
          }

          cmake --build $env:BUILD_BUILDDIRECTORY --config Release -j $env:NUMBER_OF_PROCESSORS 2>&1

          if ($LastExitCode -ne 0) {
            Write-Host "Build failed. CMake exit status: " $LastExitCocde
            exit $LastExitCode
          }

          cmake --build $env:BUILD_BUILDDIRECTORY --target install-tiledb --config Release 2>&1

          if ($LastExitCode -ne 0) {
            Write-Host "Installation failed."
            $host.SetShouldExit($LastExitCode)
          }

          tasklist /fi "imagename eq minio.exe" #TBD: removeme
        shell: powershell

      - name: 'Test'
        id: test
        shell: powershell
        run: |
          write-host "begin run: 'Test'"

          $env:MINIO_ACCESS_KEY = "minio"
          $env:MINIO_SECRET_KEY = "miniosecretkey"
          $env:MINIO_ROOT_USER = "minio"
          $env:MINIO_ROOT_PASSWORD = "miniosecretkey"
          $env:AWS_ACCESS_KEY_ID = "minio"
          $env:AWS_SECRET_ACCESS_KEY = "miniosecretkey"

          if ($env:TILEDB_S3 -eq "ON") {
            & "$env:BUILD_SOURCESDIRECTORY\scripts\install-minio.ps1"
            netstat -abo
            ls "$env:BUILD_SOURCESDIRECTORY\dist\bin"
            write-host "mc alias"
            "$env:BUILD_SOURCESDIRECTORY\dist\bin\mc --insecure --debug alias set tdbminio https://127.0.0.1:9999" 2>&1 | tee-object -Append mcstdouterr.txt
            write-host "mc ls tdbminio"
            "$env:BUILD_SOURCESDIRECTORY\dist\bin\mc --insecure --debug ls tdbminio" 2>&1 | tee-object -Append mcstdouterr.txt
            write-host "mc mb ..."
            "$env:BUILD_SOURCESDIRECTORY\dist\bin\mc --insecure --debug mb tdbminio/dlhtestbucket1" 2>&1 | tee-object -Append mcstdouterr.txt
            write-host "mc ls tdbminio"
            "$env:BUILD_SOURCESDIRECTORY\dist\bin\mc --insecure --debug ls tdbminio" 2>&1 | vmcstdouterr.txt
            write-host "mc rb tdbminio..."
            "$env:BUILD_SOURCESDIRECTORY\dist\bin\mc --insecure --debug rb tdbminio/dlhtestbucket1" 2>&1 | tee-object -Append mcstdouterr.txt
            write-host "mc ls tdbminio"
            "$env:BUILD_SOURCESDIRECTORY\dist\bin\mc --insecure --debug ls tdbminio" 2>&1 | tee-object -Append  mcstdouterr.txt
            write-host "contents mcstdouterr.txt"
            cat mcstdouterr.txt
            write-host "end contents mcstdouterr.txt"
          }

          #debug...
          tasklist
          write-host 'b4 findstr /i minio'
          tasklist | findstr /i minio
          tasklist /fi "imagename eq minio.exe"

          # Clone backwards compatibility test arrays
          if ($env:BACKWARDS_COMPATIBILITY_ARRAYS -eq "ON") {
            git clone https://github.com/TileDB-Inc/TileDB-Unit-Test-Arrays.git --branch 2.2.3 $env:BUILD_SOURCESDIRECTORY/test/inputs/arrays/read_compatibility_test
          }

          #~ if ($env:TILEDB_S3 -eq "ON") {
            #~ # update CMake to disable S3 for the test configuration, see minio note above
            #~ cmake -B $env:BUILD_BUILDDIRECTORY\tiledb -DTILEDB_S3=0 $env:BUILD_SOURCESDIRECTORY
          #~ }

          # CMake exits with non-0 status if there are any warnings during the build, so
          cmake --build $env:BUILD_BUILDDIRECTORY\tiledb  -j $env:NUMBER_OF_PROCESSORS --target tiledb_unit --config Release -- /verbosity:minimal

          if ($env:TILEDB_AZURE -eq "ON") {
            if($env.TILEDB_USE_CUSTOM_NODE_JS) {
              Write-Host "azurite: using custom install nodejs"
              #in CI environ, doesn't work with 'local' install, works when -g'lobal' install used in the .ps1
              & "$env:BUILD_SOURCESDIRECTORY\scripts\install-run-azurite.ps1"
            }
            else { #using the node/npm already present in vm
              Write-Host "azurite: using vm install nodejs"
               #this code path avoids overhead of download/expand/install of alternate nodejs/azurite.
              npm install -g azurite
              Write-Host "done with 'npm install -g azurite'"
              $azuriteDataPath = (Join-Path $env:TEMP "azuriteData")
              New-Item -ItemType Directory -Path $azuriteDataPath
              $azuriteDebugLog = (Join-Path $env:TEMP "azuriteDebugLog.Log")
              ls $env:TEMP
              ls $env:azureDataPath
              cmd /c "start `"azurite`" azurite-blob --silent --location $azuriteDataPath --debug $azuriteDebugLog --blobPort 10000 --blobHost 127.0.0.1"
              Write-Host "after starting azure"
            }
            Write-Host "look for 'node.exe' in following list:"
            tasklist | findstr /i node.exe
          }

          # Actually run tests
          #~ $cmds = "cmake --build $env:BUILD_BUILDDIRECTORY\tiledb --target check --config Release -- /verbosity:minimal"
          #~ Write-Host "cmds: '$cmds'"
          #~ Invoke-Expression $cmds
          #$cmds = "$env:BUILD_BUILDDIRECTORY\tiledb\test\Release\tiledb_unit.exe -d=yes | c:\msys64\usr\bin\awk '/1: ::set-output/{sub(/.*1: /, `"`"); print; next} 1'" 
          $cmds = "$env:BUILD_BUILDDIRECTORY\tiledb\test\Release\tiledb_unit.exe -d=yes [s3]" 
          Write-Host "cmds: '$cmds'"
          Invoke-Expression $cmds

          if ($LastExitCode -ne 0) {
             Write-Host "Tests failed. CMake exit status: " $LastExitCocde
             $host.SetShouldExit($LastExitCode)
          }

          # Build the examples
          cmake --build $env:BUILD_BUILDDIRECTORY --target examples --config Release -- /verbosity:minimal

          if ($LastExitCode -ne 0) {
            Write-Host "Examples failed to build."
            $host.SetShouldExit($LastExitCode)
          }

          $env:Path += ";$env:BUILD_SOURCESDIRECTORY\dist\bin;$env:BUILD_BUILDDIRECTORY\externals\install\bin"

          try {
            $exepath = Join-Path $env:BUILD_BUILDDIRECTORY "tiledb\examples\c_api\Release\quickstart_dense_c.exe"
            & $exepath
          } catch {
            Write-Host "C API example failed. Error:"
            Write-Host $_
            $host.SetShouldExit(1)
          }

          try {
            $exepath = Join-Path $env:BUILD_BUILDDIRECTORY "tiledb\examples\cpp_api\Release\quickstart_dense_cpp.exe"
            & $exepath
          } catch {
            Write-Host "C++ API example failed."
            $host.SetShouldExit(1)
          }

          if ($LastExitCode -ne 0) {
            Write-Host "C++ API example failed."
            $host.SetShouldExit($LastExitCode)
          }

          # Build examples
          cd $env:BUILD_SOURCESDIRECTORY\examples\cmake_project

          mkdir build

          cd build

          # Build zip artifact
          cmake -A X64 -DCMAKE_PREFIX_PATH="$env:BUILD_SOURCESDIRECTORY\dist" ..

          cmake --build . --config Release -- /verbosity:minimal

          .\Release\ExampleExe.exe

          .\Release\ExampleExe_static.exe

          #cd $env:BUILD_BUILDDIRECTORY

          #7z a tiledb-windows-x64.zip $env:BUILD_SOURCESDIRECTORY\dist

      - name: 'Test status check'
        shell: bash
        run: |
          # tiledb_unit is configured to set a job-level variable TILEDB_CI_SUCCESS=1
          # following the test run. If this variable is not set, the build should fail.
          # see https://github.com/TileDB-Inc/TileDB/pull/1400 (5f0623f4d3)
          if [[ "${{ steps.test.outputs.TILEDB_CI_SUCCESS }}" -ne 1 ]]; then
            echo TILEDB_CI_SUCCESS != 1, exiting.
            exit 1;
          fi
