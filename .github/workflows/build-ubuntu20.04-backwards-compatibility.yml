name: build-ubuntu-20.04-backwards-compatibility
on:
  push:
  pull_request:
env:
  CXX: g++

jobs:
  build:
    runs-on: ${{matrix.os}}
    if: ${{ startsWith(github.ref , 'refs/tags') != true && startsWith(github.ref , 'build-') != true }}
    strategy:
      matrix:
        os:
          - ubuntu-20.04
        # Note: v2_1_0 arrays were never created so its currently skipped
        tiledb_version: ["v1_4_0", "v1_5_0", "v1_6_0", "v1_7_0", "v2_0_0", "v2_2_0", "v2_2_3", "v2_3_0", "v2_4_0"]
    timeout-minutes: 120
    name: Ubuntu-20.04-back-comp
    steps:
      - uses: actions/checkout@v2
      - name: 'Print env'
        run: |
          echo "'uname -s' is:"
          echo "uname: " $(uname)
          echo "uname -m: " $(uname -m)
          echo "uname -r:" $(uname -r)
          echo "uname -s: " $(uname -s)
          echo "uname -v: " $(uname -v)
          printenv
        shell: bash
        env:
          TILEDB_COMPATIBILITY_VERSION: ${{ matrix.tiledb_version }}

      # Need this for virtualenv and arrow tests if enabled
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - run: |
          set -e pipefail
          python -m pip install --upgrade pip virtualenv
        shell: bash

      - name: 'Build and test libtiledb'
        env:
          TILEDB_COMPATIBILITY_VERSION: ${{ matrix.tiledb_version }}
        id: test
        run: |
          #TBD: remove this core dump hack for production
          pwd; ls -la ./
          echo -e "nl=\"\\\n\"\nprint('aborting...'+nl)\nimport resource as res\nimport time,threading\nprint(res.getrlimit(res.RLIMIT_CORE))\nprint(nl)\nres.setrlimit(res.RLIMIT_CORE,(res.RLIM_INFINITY,res.RLIM_INFINITY))\nprint(res.getrlimit(res.RLIMIT_CORE))\nt1=threading.Thread(name='thd1', target=lambda: time.sleep(5))\nt1.start()\nt2=threading.Thread(name='thd2', target=lambda: time.sleep(5))\nt2.start()\nimport sys\nsys.stdout.flush()\nsys.stderr.flush()\nimport os \nos.abort()" | python3

          git clone https://github.com/TileDB-Inc/TileDB-Unit-Test-Arrays.git --branch 2.4.0 test/inputs/arrays/read_compatibility_test

          # Remove all arrays besides the current matrix version
          ls test/inputs/arrays/read_compatibility_test/ | grep -v ${TILEDB_COMPATIBILITY_VERSION} | grep -v "__tiledb_group.tdb" | xargs -I{} echo "rm -r test/inputs/arrays/read_compatibility_test/{}"
          ls test/inputs/arrays/read_compatibility_test/ | grep -v ${TILEDB_COMPATIBILITY_VERSION} | grep -v "__tiledb_group.tdb" | xargs -I{} rm -r test/inputs/arrays/read_compatibility_test/{}
          rm -r test/inputs/arrays/read_compatibility_test/.git
          rm test/inputs/arrays/read_compatibility_test/.gitignore
          ls -lah test/inputs/arrays/read_compatibility_test/
          ls -lah test/inputs/arrays/read_compatibility_test/${TILEDB_COMPATIBILITY_VERSION}/

          #   name: 'Clone Unit-Test-Arrays'

          bootstrap_args="${bootstrap_args}";
          source $GITHUB_WORKSPACE/scripts/ci/build_libtiledb.sh

          # Bypass Catch2 Framework stdout interception with awk on test output
          # make check | awk '/1: ::set-output/{sub(/.*1: /, ""); print; next} 1'
          ./tiledb/test/tiledb_unit -d yes "[backwards-compat]"| awk '/1: ::set-output/{sub(/.*1: /, ""); print; next} 1'


      - name: 'dump  core stacks'
        if: ${{ always() == true   && startsWith(matrix.os, 'ubuntu-') == true }} # only run this job if the build step failed
        run: |
          # following contains answers with various possibilities for locating core files on various systems
          # https://stackoverflow.com/questions/2065912/core-dumped-but-core-file-is-not-in-the-current-directory
          #a 'gdb' is present there, not a file, other gdbs but seem assoc'd with non-general usage
          #if [[ -f /usr/share/gdb ]]; then
          #  dbgr="/usr/share/gdb"
          #  dbgropts=" -q --core \$f --batch -ex \"thread apply all bt\" -ex \"quit\""
          #fi
          # lldb ref'd here located by doing trial in runner with find / -name "*lldb*" and sifting through the results.
          if [[ ! -f /usr/lib/llvm-11/bin/lldb ]]; then
            #lldb -c $f --batch -o 'bt all' -o 'quit'
            dbgr="/usr/lib/llvm-11/bin/lldb"
            #dbgropts=" -core \$f --batch -o 'bt all' -o 'quit'"
          else
            echo "debugger not found in previously seen location!"
            exit 1
          fi
          echo "dbgr $dbgr"
          for f in $(find /var/lib/apport/coredump -name 'core.*');
            do
              echo "stack trace for $f"
              #currently assumes $dbgr to be lldb
              sudo $dbgr -core $f --batch  -o 'bt all' -o 'quit'
            done;

      - name: 'upload any core artifacts' # https://github.com/actions/upload-artifact#where-does-the-upload-go
        if: ${{ always() == true && startsWith(matrix.os, 'ubuntu-') == true }} # only run this job if the build step failed
        uses: actions/upload-artifact@v2
        with:
          retention-days: 10
          name: "coredumps.${{ github.job }}.${{ matrix.os }}.${{ github.run_number }}.${{github.run_id}}.${{github.run_attempt}}.${{github.action}}"
          if-no-files-found: warn # 'ignore', 'warn' or 'error' are available, defaults to `warn` 
          path: |
            /var/lib/apport/coredump/ # ubuntu specific

      - name: 'Test status check'
        run: |
          # tiledb_unit is configured to set a job-level variable TILEDB_CI_SUCCESS=1
          # following the test run. If this variable is not set, the build should fail.
          # see https://github.com/TileDB-Inc/TileDB/pull/1400 (5f0623f4d3)
          if [[ "${{ steps.test.outputs.TILEDB_CI_SUCCESS }}" -ne 1 ]]; then
            exit 1;
          fi

      - name: "Print log files (failed build only)"
        run: |
          source $GITHUB_WORKSPACE/scripts/ci/print_logs.sh
        if: ${{ failure() }} # only run this job if the build step failed
