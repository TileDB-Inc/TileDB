name: build-ubuntu-20.04-backwards-compatibility
on:
  workflow_call:

env:
  CXX: g++

jobs:
  build:
    runs-on: ${{matrix.os}}
    if: ${{ startsWith(github.ref , 'refs/tags') != true && startsWith(github.ref , 'build-') != true }}
    strategy:
      matrix:
        os:
          - ubuntu-20.04
    timeout-minutes: 120
    name: Build tiledb_unit
    steps:
      - uses: actions/checkout@v2

      - name: 'Print env'
        run: ./scripts/ci/posix/print-env.sh
        shell: bash

      # Need this for virtualenv and arrow tests if enabled
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - run: |
          set -e pipefail
          python -m pip install --upgrade pip virtualenv
        shell: bash

      - name: 'Build tiledb_unit'
        id: build
        shell: bash
        run: |
          bootstrap_args="${bootstrap_args}";
          bootstrap_args="${bootstrap_args} --enable-release-symbols";
          source $GITHUB_WORKSPACE/scripts/ci/build_libtiledb.sh

      # Save the tiledb_unit binary for use in the next step
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v3
        with:
          name: tiledb_unit
          path: ${{ github.workspace }}/build/tiledb/test/tiledb_unit
          retention-days: 1

  test:
    needs: build
    runs-on: ${{matrix.os}}
    if: ${{ startsWith(github.ref , 'refs/tags') != true && startsWith(github.ref , 'build-') != true }}
    strategy:
      matrix:
        os:
          - ubuntu-20.04
        # Note: v2_1_0 arrays were never created so its currently skipped
        # Note: This matrix is used to set the value of TILEDB_COMPATIBILITY_VERSION
        tiledb_version: ["v1_4_0", "v1_5_0", "v1_6_0", "v1_7_0", "v2_0_0", "v2_2_0", "v2_2_3", "v2_3_0", "v2_4_0", "v2_5_0", "v2_6_0", "v2_7_0", "v2_8_3", "v2_9_1", "v2_10_0", "v2_11_0"]
    timeout-minutes: 30
    name: ${{ matrix.tiledb_version }}
    steps:
      - uses: actions/checkout@v2

      - name: Download a single artifact
        uses: actions/download-artifact@v3
        with:
          name: tiledb_unit
          path: ${{ github.workspace }}/build/tiledb/test/

      - name: Update tiledb_unit permissions
        run: chmod +x $GITHUB_WORKSPACE/build/tiledb/test/tiledb_unit

      - name: 'Test backward compatibility'
        id: test
        env:
          TILEDB_COMPATIBILITY_VERSION: ${{ matrix.tiledb_version }}
        run: |
          ulimit -c unlimited
          ulimit -c

          # we clone the latest version, because we are specifying the
          # test target version in the TILEDB_COMPATIBILITY_VERSION variable
          git clone --depth=1 https://github.com/TileDB-Inc/TileDB-Unit-Test-Arrays.git --branch main test/inputs/arrays/read_compatibility_test

          # Remove all arrays besides the current matrix version
          ls test/inputs/arrays/read_compatibility_test/ | grep -v ${TILEDB_COMPATIBILITY_VERSION} | grep -v "__tiledb_group.tdb" | xargs -I{} echo "rm -r test/inputs/arrays/read_compatibility_test/{}"
          ls test/inputs/arrays/read_compatibility_test/ | grep -v ${TILEDB_COMPATIBILITY_VERSION} | grep -v "__tiledb_group.tdb" | xargs -I{} rm -r test/inputs/arrays/read_compatibility_test/{}
          rm -r test/inputs/arrays/read_compatibility_test/.git
          rm test/inputs/arrays/read_compatibility_test/.gitignore
          ls -lah test/inputs/arrays/read_compatibility_test/
          ls -lah test/inputs/arrays/read_compatibility_test/${TILEDB_COMPATIBILITY_VERSION}/


          # Bypass Catch2 Framework stdout interception with awk on test output
          $GITHUB_WORKSPACE/build/tiledb/test/tiledb_unit -d yes "[backwards-compat]"| awk '/1: ::set-output/{sub(/.*1: /, ""); print; next} 1'

      - name: 'Test status check'
        run: |
          # tiledb_unit is configured to set a job-level variable TILEDB_CI_SUCCESS=1
          # following the test run. If this variable is not set, the build should fail.
          # see https://github.com/TileDB-Inc/TileDB/pull/1400 (5f0623f4d3)
          if [[ "${{ steps.test.outputs.TILEDB_CI_SUCCESS }}" -ne 1 ]]; then
            exit 1;
          fi

      - name: "Print log files (failed build only)"
        run: |
          source $GITHUB_WORKSPACE/scripts/ci/print_logs.sh
        if: ${{ failure() }} # only run this job if the build step failed
