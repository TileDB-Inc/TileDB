name: build-macos-10.14-S3
on:
  push:
    branches:
      - dev
      - release-*
      - refs/tags/*
  pull_request:
    branches:
      - '*'  # must quote since "*" is a YAML reserved character; we want a string
env:
  BACKWARDS_COMPATIBILITY_ARRAYS: OFF
  TILEDB_S3: ON
  TILEDB_STATIC: OFF
  TILEDB_TOOLS: ON
  CXX: g++

jobs:
  build:
    runs-on: macos-10.14
    if: ${{ startsWith(github.ref , 'refs/tags') != true && startsWith(github.ref , 'build-') != true }}
    timeout-minutes: 90
    name: Build - macos-10.14 - S3
    steps:
      - uses: actions/checkout@v2
      - name: 'Print env'
        run: |
          echo "'uname -s' is:"
          echo "uname: " $(uname)
          echo "uname -m: " $(uname -m)
          echo "uname -r:" $(uname -r)
          echo "uname -s: " $(uname -s)
          echo "uname -v: " $(uname -v)
          printenv
        shell: bash

      # Need this for virtualenv and arrow tests if enabled
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - run: |
          set -e pipefail
          python -m pip install --upgrade pip virtualenv
        shell: bash

      - name: 'Install system headers (OSX 10.14 only)'
        run: |
          set -e pipefail
          open /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg
          sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -allowUntrusted -target /
        shell: bash
        if: ${{ runner.os == 'macOS' && env.imageName == 'macOS-10.14' }}

      - name: 'Build and test libtiledb'
        id: test
        run: |

          # Start minio server if S3 is enabled
          source scripts/install-minio.sh;
          source scripts/run-minio.sh;

          # Set up arguments for bootstrap.sh
          bootstrap_args="--enable=verbose";
          bootstrap_args="${bootstrap_args} --enable-s3";
          bootstrap_args="${bootstrap_args} --enable-tools";

          # name: 'Install dependencies'

          mkdir -p $GITHUB_WORKSPACE/build
          cd $GITHUB_WORKSPACE/build

          # Configure and build TileDB
          echo "Bootstrapping with '$bootstrap_args'"
          $GITHUB_WORKSPACE/bootstrap $bootstrap_args

          make -j4
          make examples -j4
          make -C tiledb install

          cd $GITHUB_WORKSPACE/build

          make -j4 -C tiledb tiledb_unit
          ./tiledb/test/tiledb_unit -d yes | awk '/1: ::set-output/{sub(/.*1: /, ""); print; next} 1'

          # Kill the running Minio server, OSX only because Linux runs it within
          # docker.
          kill -n 9 $MINIO_PID

          pushd $GITHUB_WORKSPACE/examples/cmake_project
          mkdir build && cd build
          cmake -DCMAKE_PREFIX_PATH=$GITHUB_WORKSPACE/dist .. && make
          ./ExampleExe

          popd

          # Build the benchmarks (but do not run them).
          pushd $GITHUB_WORKSPACE/test/benchmarking && \
          mkdir build && cd build && \
          cmake -DCMAKE_PREFIX_PATH=$GITHUB_WORKSPACE/dist ../src && make && \
          popd

          testfile=$(mktemp)
          mv $testfile $testfile.cc
          testfile=$testfile.cc
          cat <<EOF > $testfile
          #include <assert.h>
          #include <tiledb/tiledb.h>
          #include <tiledb/version.h>
          int main(int argc, char **argv) {
          int major = 0;
          int minor = 0;
          int patch = 0;
          tiledb_version(&major,&minor,&patch);
          auto version = tiledb::version();
          assert(major == std::get<0>(version));
          return 0;
          }
          EOF
          export TESTFILE_LDFLAGS="-ltiledb"
          if [[ "${{ runner.os }}" == "Linux" ]]; then
          export LD_LIBRARY_PATH=$GITHUB_WORKSPACE/dist/lib:/usr/local/lib:$LD_LIBRARY_PATH
          else
          export DYLD_LIBRARY_PATH=$GITHUB_WORKSPACE/dist/lib:/usr/local/lib:$DYLD_LIBRARY_PATH
          fi
          $CXX -std=c++11 -g -O0 -Wall -Werror -I$GITHUB_WORKSPACE/dist/include -L$GITHUB_WORKSPACE/dist/lib $testfile -o $testfile.exe $TESTFILE_LDFLAGS && \
          $testfile.exe && \
          rm -f $testfile $testfile.exe

          ps -U $(whoami) -o comm= | sort | uniq
          #  displayName: 'Build examples, PNG test, and benchmarks (build-only)'

      - name: 'Test status check'
        run: |
          # tiledb_unit is configured to set a job-level variable TILEDB_CI_SUCCESS=1
          # following the test run. If this variable is not set, the build should fail.
          # see https://github.com/TileDB-Inc/TileDB/pull/1400 (5f0623f4d3)
          if [[ "${{ steps.test.outputs.TILEDB_CI_SUCCESS }}" -ne 1 ]]; then
            exit 1;
          fi
      - name: "Print log files (failed build only)"
        run: |
          set -e pipefail
          # Display log files if the build failed
          echo "Dumping log files for failed build"
          echo "----------------------------------"
          for f in $(find $GITHUB_WORKSPACE/build -name *.log);
            do echo "------"
               echo $f
               echo "======"
               cat $f
            done;
        if: ${{ failure() }} # only run this job if the build step failed
