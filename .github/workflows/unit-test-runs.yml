name: unit-test-standalone
on:
  workflow_call:
  workflow_dispatch:

env:
  VCPKG_BINARY_SOURCES: 'clear;x-gha,readwrite'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
      fail-fast: false
    name: Build - ${{ matrix.os }}
    timeout-minutes: 90
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3

      - name: 'Homebrew setup'
        run: brew install automake
        if: ${{ startsWith(matrix.os, 'macos-') }}

      - name: Install Ninja
        uses: seanmiddleditch/gha-setup-ninja@v4

      # Need this for virtualenv and arrow tests if enabled
      - name: 'Install Python'
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: 'Set up Python dependencies'
        run: |
          set -e pipefail
          python -m pip install --upgrade pip virtualenv
          pip install pyarrow pybind11[global] numpy

      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable

      - name: Setup MSVC toolset
        uses: TheMrMilchmann/setup-msvc-dev@v3
        if: ${{ startsWith(matrix.os, 'windows-') }}
        with:
          arch: x64

      # Configure required environment variables for vcpkg to use
      # GitHub's Action Cache
      - uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: 'Print env'
        run: |
          echo "'uname -s' is:"
          echo "uname: " $(uname)
          echo "uname -m: " $(uname -m)
          echo "uname -r:" $(uname -r)
          echo "uname -s: " $(uname -s)
          echo "uname -v: " $(uname -v)
          printenv
        shell: bash
        if: ${{ !startsWith(matrix.os, 'windows-') }}

      - name: 'Print path'
        run: |
          where link.exe
        if: ${{ startsWith(matrix.os, 'windows-') }}

      #
      # Rust's `rustc` will invoke `link.exe` without full qualification.
      # If the wrong `link.exe` occurs prior in `$PATH`, then the build will fail.
      # Here we fix up the `$PATH` to ensure that the correct `link.exe` is used.
      #
      - name: 'Fix link.exe path'
        shell: pwsh
        run: |
          $PATH_COMPONENTS_FOR_BUILD = $Env:PATH -split ";" | Where-Object { $_ -notMatch "\\Git\\" }
          $PATH_COMPONENTS_FOR_BUILD_2 = $Env:PATH -split ";" | Where-Object { $_ -notMatch "\\\\Git\\\\" }
          $PATH_COMPONENTS_FOR_BUILD_3 = $Env:PATH -split ";" | Where-Object { $_ -notMatch "Git" }
          $PATH_FOR_BUILD = $PATH_COMPONENTS_FOR_BUILD -join ";"
          echo "Env:PATH"
          echo $Env:PATH
          echo "PATH_COMPONENTS_FOR_BUILD"
          echo $PATH_COMPONENTS_FOR_BUILD
          echo "PATH_COMPONENTS_FOR_BUILD_2"
          echo $PATH_COMPONENTS_FOR_BUILD_2
          echo "PATH_COMPONENTS_FOR_BUILD_3"
          echo $PATH_COMPONENTS_FOR_BUILD_3
          echo "PATH_FOR_BUILD"
          echo $PATH_FOR_BUILD
          echo "PATH_FOR_BUILD=$PATH_FOR_BUILD" >> "$GITHUB_ENV"
        if: ${{ startsWith(matrix.os, 'windows-') }}

      - name: 'Set PATH_FOR_BUILD'
        run: |
          echo "PATH_FOR_BUILD=$PATH" >> "$GITHUB_ENV"
        if: ${{ !startsWith(matrix.os, 'windows-') }}

      - name: 'Build standalone unit tests'
        run: |
          export PATH=$PATH_FOR_BUILD
          cmake -S . \
            -B build \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Debug \
            -DTILEDB_SERIALIZATION=ON \
            -DTILEDB_ASSERTIONS=ON \
            -DTILEDB_ARROW_TESTS=ON \
            -DTILEDB_RUST=ON
          # Build all unit tests
          cmake --build build --target tests -j4

      - name: 'Run standalone unit tests'
        run: |
          ctest --test-dir build -R '(^unit_|test_assert)' --no-tests=error
          ctest --test-dir build -R 'test_ci_asserts'

      - name: "Print log files (failed build only)"
        run: |
          source $GITHUB_WORKSPACE/scripts/ci/print_logs.sh
        if: ${{ failure() }} # only run this job if the build step failed
