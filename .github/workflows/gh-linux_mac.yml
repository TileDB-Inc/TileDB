name: builds
on:
  push:
#    branches:
#      - dev
#      - release-*
#      - refs/tags/*
  pull_request:
    branches:
      - '*'  # must quote since "*" is a YAML reserved character; we want a string
env:
  BACKWARDS_COMPATIBILITY_ARRAYS: OFF

jobs:
  build:
    runs-on: ${{ matrix.os }}
    if: ${{ startsWith(github.ref , 'refs/tags') != true && startsWith(github.ref , 'build-') != true }}
    timeout-minutes: 90
    strategy:
      matrix:
          os: [ubuntu-16.04, macOS-10.14]
          config: [S3]
#          exclude:
#            - {os: macOS-10.14, config: S3}
#            - {os: macOS-10.14, config: AZURE}
#            - {os: macOS-10.14, config: HDFS}
#            - {os: macOS-10.14, config: ASAN}
#            - {os: macOS-10.14, config: SERIALIZATION}
          include:
            - config: S3
              TILEDB_S3: ON
              TILEDB_STATIC: OFF
              TILEDB_TOOLS: ON
              CXX: g++
#            - config: GCS
#              TILEDB_GCS: ON
#              TILEDB_STATIC: OFF
#              CXX: g++
#            - config: HDFS
#              TILEDB_HDFS: ON
#              CXX: g++
#            - config: AZURE
#              TILEDB_AZURE: ON
#              TILEDB_STATIC: OFF
#              TILEDB_ARROW_TESTS: ON
#              CXX: g++
#            - config: ASAN
#              TILEDB_MEMFS: ON
#              TILEDB_CI_ASAN: ON
#              TILEDB_SERIALIZATION: ON
#              CXX: g++-7
#            - config: SERIALIZATION
#              TILEDB_SERIALIZATION: ON
#              TILEDB_S3: ON
#              CXX: g++
#              BACKWARDS_COMPATIBILITY_ARRAYS: ON

    name: Build - ${{ matrix.os }} - ${{ matrix.config }}
    steps:
      - uses: actions/checkout@v2
      - name: 'Print env'
        run: |
          echo "'uname -s' is:"
          echo "uname: " $(uname)
          echo "uname -m: " $(uname -m)
          echo "uname -r:" $(uname -r)
          echo "uname -s: " $(uname -s)
          echo "uname -v: " $(uname -v)
          printenv
        shell: bash

      # Need this for virtualenv and arrow tests if enabled
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - run: |
          set -e pipefail
          python -m pip install --upgrade pip virtualenv
          if [[ ${{ matrix.TILEDB_ARROW_TESTS == 'ON' }} ]]; then
            pip install pyarrow pybind11 numpy
          fi
        shell: bash

      - name: 'Install doxygen (linux only)'
        run: |
          set -e pipefail
          # Install doxygen *before* running cmake
          sudo apt-get install doxygen
        shell: bash
        if: ${{ runner.os == 'Linux' }}

      - name: 'Install system headers (OSX 10.14 only)'
        run: |
          set -e pipefail
          open /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg
          sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -allowUntrusted -target /
        shell: bash
        if: ${{ runner.os == 'macOS' && env.imageName == 'macOS-10.14' }}

      - name: Check formatting (linux only)'
        run: |
          set -e pipefail
          # Install clang-format (v5.0)
          ls -la
          sudo ./scripts/install-clangformat.sh
          src=$GITHUB_WORKSPACE
          cd $src
          $src/scripts/run-clang-format.sh $src clang-format-5.0 0 \
            $(find $src/tiledb $src/test/src $src/examples $src/tools \
             -name "*.cc" -or -name "*.c" -or -name "*.h")
        shell: bash
        if: ${{ runner.os == 'Linux' }}

      - name: 'Build and test libtiledb'
        id: test
        run: |
          # Azure sets "SYSTEM=build" for unknown reasonas, which breaks the OpenSSL configure script
          #   - openssl configure uses ENV{SYSTEM} if available:
          #     https://github.com/openssl/openssl/blob/6d745d740d37d680ff696486218b650512bbbbc6/config#L56
          #   - error description:
          #     https://developercommunity.visualstudio.com/content/problem/602584/openssl-build-error-when-using-pipelines.htm
          unset SYSTEM

          # azure run does not treat intermediate failure as error
          # https://github.com/Microsoft/azure-pipelines-yaml/issues/135
          set -e pipefail

          git config --global user.name 'Azure Pipeline'
          git config --global user.email 'no-reply@tiledb.io'

          if [[ "$BACKWARDS_COMPATIBILITY_ARRAYS" == "ON" ]]; then
            git clone https://github.com/TileDB-Inc/TileDB-Unit-Test-Arrays.git --branch 2.2.0 test/inputs/arrays/read_compatibility_test
          fi
          #   name: 'Clone Unit-Test-Arrays'

          # - run: |
          # Start HDFS server if enabled
          if [[ "${{ matrix.TILEDB_HDFS }}" == "ON" ]]; then
            # - ssh to localhost is required for HDFS launch...
            # - /home/vsts has permissions g+w and is owned by user 'docker'
            #   for VSTS purposes, so disable ssh strictness
            sudo sed -i.bak 's/StrictModes\ yes/StrictModes\ no/g' /etc/ssh/sshd_config

            source scripts/install-hadoop.sh
            source scripts/run-hadoop.sh
          fi

          # Start minio server if S3 is enabled
          if [[ "${{ matrix.TILEDB_S3 }}" == "ON" ]]; then
            source scripts/install-minio.sh;
            source scripts/run-minio.sh;
          fi

          # Start Azurite if Azure is enabled
          if [[ "${{ matrix.TILEDB_AZURE }}" == "ON" ]]; then
            source scripts/install-azurite.sh;
            source scripts/run-azurite.sh;
          fi

          # Set up arguments for bootstrap.sh
          bootstrap_args="--enable=verbose";

          # Enable TILEDB_STATIC by default
          [ ${{ matrix.TILEDB_STATIC }} ] || TILEDB_STATIC=ON
          if [[ "${{ matrix.TILEDB_STATIC }}" == "ON" ]]; then
            bootstrap_args="${bootstrap_args} --enable-static-tiledb";
          fi
          if [[ "${{ matrix.TILEDB_HDFS }}" == "ON" ]]; then
            bootstrap_args="${bootstrap_args} --enable-hdfs";
          fi;
          if [[ "${{ matrix.TILEDB_S3 }}" == "ON" ]]; then
            bootstrap_args="${bootstrap_args} --enable-s3";
          fi;
          if [[ "${{ matrix.TILEDB_AZURE }}" == "ON" ]]; then
            bootstrap_args="${bootstrap_args} --enable-azure";
          fi;
          if [[ "${{ matrix.TILEDB_GCS }}" == "ON" ]]; then
            bootstrap_args="${bootstrap_args} --enable-gcs";
          fi;
          if [[ "${{ matrix.TILEDB_MEMFS }}" == "ON" ]]; then
            bootstrap_args="${bootstrap_args} --enable-memfs";
          fi;
          if [[ "$TILEDB_TBB" == "OFF" ]]; then
            bootstrap_args="${bootstrap_args} --disable-tbb";
          fi
          if [[ "${{ matrix.TILEDB_TOOLS }}" == "ON" ]]; then
            bootstrap_args="${bootstrap_args} --enable-tools";
          fi
          if [[ "$TILEDB_DEBUG" == "ON" ]]; then
            bootstrap_args="${bootstrap_args} --enable-debug";
          fi
          if [[ "${{ matrix.TILEDB_CI_ASAN }}" == "ON" ]]; then
            # Add address sanitizer flag if necessary
            bootstrap_args="${bootstrap_args} --enable-sanitizer=address --enable-debug";
          fi
          if [[ "$TILEDB_CI_TSAN" == "ON" ]]; then
            # Add thread sanitizer flag if necessary
            bootstrap_args="${bootstrap_args} --enable-sanitizer=thread --enable-debug";
          fi
          if [[ "${{ matrix.TILEDB_SERIALIZATION }}" == "ON" ]]; then
            # Add serialization flag if necessary
            bootstrap_args="${bootstrap_args} --enable-serialization";
          fi
          if [[ "$TILEDB_FORCE_BUILD_DEPS" == "ON" ]]; then
            # Add superbuild flag
            bootstrap_args="${bootstrap_args} --force-build-all-deps";
          fi

          # name: 'Install dependencies'

          mkdir -p $GITHUB_WORKSPACE/build
          cd $GITHUB_WORKSPACE/build

          # Configure and build TileDB
          echo "Bootstrapping with '$bootstrap_args'"
          $GITHUB_WORKSPACE/bootstrap $bootstrap_args

          make -j4
          make examples -j4
          make -C tiledb install

          #- run: |
          cd $GITHUB_WORKSPACE/build
          ls -la

          if [[ ( ${{ runner.os == 'Linux' }} && "${{ matrix.TILEDB_S3 }}" == "ON" ) ]]; then
            # make sure docker is still running...
            printenv
            docker ps -a
          fi

          make -j4 -C tiledb tiledb_unit

          if [[ "${{ matrix.TILEDB_CI_ASAN }}" == "ON" ]]; then
            export ASAN_OPTIONS=detect_leaks=0 LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libasan.so.4
          fi

          if [[ ( "${{ runner.os }}" == "macOS" && "${{ matrix.TILEDB_GCS }}" == "ON" )]]; then
            # GCS unit tests are temporarily unsupported on CI. Fake success with
            # this echo.
            echo "::set-output name=TILEDB_CI_SUCCESS::1"
          else
            make check
            echo "::set-output name=TILEDB_CI_SUCCESS::1"
          fi
          echo "VAR OUTPUT IN GHA SHELL"
          echo $TILEDB_CI_SUCCESS
          echo "$TILEDB_CI_SUCCESS" >> $GITHUB_ENV
          echo "TEST"
          # Kill the running Minio server, OSX only because Linux runs it within
          # docker.
          if [[ ( "${{ runner.os }}" == "macOS" && "${{ matrix.TILEDB_S3 }}" == "ON" ) ]]; then
            kill -n 9 $MINIO_PID
          fi

          # Kill the running Azurite server
          if [[ "${{ matrix.TILEDB_AZURE }}" == "ON" ]]; then
            kill -n 9 $AZURITE_PID
          fi

      - name: 'Test status check'
        run: |
          # tiledb_unit is configured to set a job-level variable TILEDB_CI_SUCCESS=1
          # following the test run. If this variable is not set, the build should fail.
          # see https://github.com/TileDB-Inc/TileDB/pull/1400 (5f0623f4d3)
          if [[ "${{ steps.test.outputs.TILEDB_CI_SUCCESS }}" -ne 1 ]]; then
            exit 1;
          fi
#
      - name: "Print log files (failed build only)"
        run: |
          set -e pipefail
          # Display log files if the build failed
          echo "Dumping log files for failed build"
          echo "----------------------------------"
          for f in $(find $GITHUB_WORKSPACE/build -name *.log);
            do echo "------"
               echo $f
               echo "======"
               cat $f
            done;
        if: ${{ failure() }} # only run this job if the build step failed

      - name: 'Build docs (no deployment)'
        run: |
          set -e pipefail
          python -m pip install --upgrade pip virtualenv

          # Build the documentation (this does not deploy to RTD).
          pushd $GITHUB_WORKSPACE/doc;
          ./local-build.sh;
          popd;
        if: ${{ runner.os == 'Linux' }}