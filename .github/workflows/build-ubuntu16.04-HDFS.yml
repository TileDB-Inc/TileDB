name: build-ubuntu-20.04-HDFS
on:
  push:
    branches:
      - dev
      - release-*
      - refs/tags/*
  pull_request:
    branches:
      - '*'  # must quote since "*" is a YAML reserved character; we want a string
env:
  BACKWARDS_COMPATIBILITY_ARRAYS: OFF
  TILEDB_HDFS: ON
  CXX: g++-9
  CC: gcc-9

jobs:
  build:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os:
          - ubuntu-20.04
    if: ${{ startsWith(github.ref , 'refs/tags') != true && startsWith(github.ref , 'build-') != true }}
    timeout-minutes: 90
    name: Build - ${{matrix.os}} - HDFS
    steps:
      - name: 'prep ubuntu for core dumps'
        if: ${{ startsWith(matrix.os, 'ubuntu-') == true }} # only run this job if the build step failed
        run: |
          ulimit -c unlimited     # Enable core dumps to be captured (must be in same run block)
          ulimit -c
          sudo apt-get update
          sudo apt-get -y install gdb
          if [[ -f $(which gdb) ]]; then
            echo found $(which gdb)
          else
            echo tried to install gdb, but gdb not found!
          fi
          echo "core_pattern follows..."
          cat /proc/sys/kernel/core_pattern
          echo "...core_pattern above"

      - name: cpuprocinfo
        shell: bash
        run: |
          set -x
          cat /proc/cpuinfo

      - name: ubuntu lscpu
        shell: bash
        run: |
          set -x
          if [[ $(which lscpu) ]] ; then
            lscpu
          fi

      - uses: actions/checkout@v2
      - name: 'Print env'
        run: |
          echo "'uname -s' is:"
          echo "uname: " $(uname)
          echo "uname -m: " $(uname -m)
          echo "uname -r:" $(uname -r)
          echo "uname -s: " $(uname -s)
          echo "uname -v: " $(uname -v)
          printenv
        shell: bash

      # Need this for virtualenv and arrow tests if enabled
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - run: |
          set -e pipefail
          python -m pip install --upgrade pip virtualenv
        shell: bash

      - name: 'Build and test libtiledb'
        id: test
        run: |
          ulimit -c unlimited
          ulimit -c

          set -exo pipefail

          # - run: |
          # Start HDFS server if enabled
          # - ssh to localhost is required for HDFS launch...
          # - /home/vsts has permissions g+w and is owned by user 'docker'
          #   for VSTS purposes, so disable ssh strictness
          sudo sed -i.bak 's/StrictModes\ yes/StrictModes\ no/g' /etc/ssh/sshd_config

          source scripts/install-hadoop.sh
          source scripts/run-hadoop.sh

          bootstrap_args=" --enable-hdfs";
          bootstrap_args="${bootstrap_args} --enable-release-symbols";
          source $GITHUB_WORKSPACE/scripts/ci/build_libtiledb.sh

          # Bypass Catch2 Framework stdout interception with awk on test output
          # make check | awk '/1: ::set-output/{sub(/.*1: /, ""); print; next} 1'
          ./tiledb/test/tiledb_unit -d yes | awk '/1: ::set-output/{sub(/.*1: /, ""); print; next} 1'

          pushd $GITHUB_WORKSPACE/examples/cmake_project
          mkdir build && cd build
          cmake -DCMAKE_PREFIX_PATH=$GITHUB_WORKSPACE/dist .. && make
          ./ExampleExe
          popd
          # Build and run the PNG ingestion example.
          # libpng (example dependency)
          sudo apt-get install libpng-dev

          pushd $GITHUB_WORKSPACE/examples/png_ingestion;
          mkdir build && cd build;
          cmake -DCMAKE_PREFIX_PATH=$GITHUB_WORKSPACE/dist .. && make;
          ./tiledb_png $GITHUB_WORKSPACE/doc/source/figures/Scarlet-Macaw-small.png /tmp/pngarray output.png;
          popd;

          source $GITHUB_WORKSPACE/scripts/ci/build_benchmarks.sh

      - name: 'dump  core stacks'
        if: ${{ failure() && startsWith(matrix.os, 'ubuntu-') == true }} # only run this job if the build step failed
        run: |
          # following contains answers with various possibilities for locating core files on various systems
          # https://stackoverflow.com/questions/2065912/core-dumped-but-core-file-is-not-in-the-current-directory
          pwd
          if [[ ! $(find /var/lib/apport/coredump -name 'core.*') ]]; then
            # if we don't find the core files where/as expected, then
            # the artifacts won't get uploaded (haven't figured out how to
            # dynamically specify location to upload action), but we
            # can still present stack traces for the ones we find.
            echo "core files not found where expected!"
            if [[ $(find . -name 'core.*') ]]; then
              echo "core files found at/under $(pwd)"
              corefiles=$(find . -name 'core.*')
            elif [[ $(find / -name 'core.*') ]]; then
              echo "core founds found!"
              corefiles=$(find / -name 'core.*')
            else
              echo "core files expected but not found!"
              corefiles=
            fi
          else
            corefiles=$(find /var/lib/apport/coredump -name 'core.*')
          fi
          ulimit -c
          echo "ls -l /var/lib/apport/coredump"
          ls -l /var/lib/apport/coredump
          for f in $corefiles;
            do
              echo "stack trace for $f"
              if [[ -f $(which gdb) ]]; then
                dbgr=$(which gdb)
                sudo $dbgr -q --core $f -ex "thread apply all bt" -ex "info registers" -ex "disassemble" -ex "quit"
              #fi
              # lldb ref'd here located by doing trial in runner with find / -name "*lldb*" and sifting through the results.
              elif [[ -f /usr/lib/llvm-11/bin/lldb ]]; then
                dbgr="/usr/lib/llvm-11/bin/lldb"
                sudo $dbgr -c $f --batch -o 'bt all' -o 'image list' -o 're r -a' -o 'di -F intel -f -m' -o 'quit'
              else
                echo "debugger not found in previously seen location!"
                exit 1
              fi
            done;

      - name: 'upload any core artifacts' # https://github.com/actions/upload-artifact#where-does-the-upload-go
        if: ${{ always() == true && startsWith(matrix.os, 'ubuntu-') == true }} # only run this job if the build step failed
        uses: actions/upload-artifact@v2
        with:
          retention-days: 10
          name: "coredumps.${{ github.job }}.${{ matrix.os }}.${{ github.run_number }}.${{github.run_id}}.${{github.run_attempt}}"
          if-no-files-found: warn # 'ignore', 'warn' or 'error' are available, defaults to `warn`
          path: |
            /var/lib/apport/coredump/

      - name: 'Test status check'
        run: |
          # tiledb_unit is configured to set a job-level variable TILEDB_CI_SUCCESS=1
          # following the test run. If this variable is not set, the build should fail.
          # see https://github.com/TileDB-Inc/TileDB/pull/1400 (5f0623f4d3)
          if [[ "${{ steps.test.outputs.TILEDB_CI_SUCCESS }}" -ne 1 ]]; then
            exit 1;
          fi

      - name: "Print log files (failed build only)"
        run: |
          source $GITHUB_WORKSPACE/scripts/ci/print_logs.sh
        if: ${{ failure() }} # only run this job if the build step failed
