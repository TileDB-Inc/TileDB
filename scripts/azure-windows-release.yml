steps:
- script: |
      echo $(Build.SourceVersion)
      set TestVar=$(Build.SourceVersion)
      set $commitHash=%TestVar:~0,7%
      echo %$commitHash%
      echo ##vso[task.setvariable variable=commitHash]%$commitHash%
  env: { sourceVersion: $(Build.SourceVersion) }
  displayName: Git Hash 7-digit

- powershell: |
    mkdir $env:AGENT_BUILDDIRECTORY\build
    cd $env:AGENT_BUILDDIRECTORY\build

    if ($env:imageName -eq "windows-2019") {
      $VSCategory = "Enterprise" # alternate 'Community'
      if (!(Test-Path "C:\Program Files (x86)\Microsoft Visual Studio\2019\${VSCategory}\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin")) {
        Write-Host "ERROR***: Missing C:\Program Files (x86)\Microsoft Visual Studio\2019\${VSCategory}\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin"
        $host.SetShouldExit(2)
      }
      $env:Path += ";C:\Program Files (x86)\Microsoft Visual Studio\2019\${VSCategory}\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin"
    } else {
      Write-Host "Unknown image name: '$($env:imageName)'"
      $host.SetShouldExit(3)
    }

    $bootstrapOptions = "-EnableVerbose -EnableStaticTileDB -EnableBuildDeps"
    if ($env:TILEDB_S3 -eq "ON") {
      $bootstrapOptions = "-EnableS3 " + $bootstrapOptions
    }
    if ($env:TILEDB_AZURE -eq "ON") {
      $bootstrapOptions = "-EnableAzure " + $bootstrapOptions
    }
    if ($env:TILEDB_GCS -eq "ON") {
      $bootstrapOptions = "-EnableGCS " + $bootstrapOptions
      #NOTE: GCS simulator not yet actually in place.
    }
    if ($env:TILEDB_SERIALIZATION -eq "ON") {
      $bootstrapOptions = "-EnableSerialization " + $bootstrapOptions
    }
    # static already added above as initial default
    # if ($env:TILEDB_STATIC -eq "ON") {
    #  $bootstrapOptions = $bootstrapOptions + " -EnableStaticTileDB"
    # }
    # if ($env:TILEDB_HDFS -eq "ON") {
    #  $bootstrapOptions = $bootstrapOptions + " -EnableHDFS"
    #}
    if ($env:TILEDB_TOOLS -eq "ON") {
      $bootstrapOptions = $bootstrapOptions + " -EnableTools"
    }
    if ($env:TILEDB_DEBUG -eq "ON") {
      $bootstrapOptions = $bootstrapOptions + " -EnableDebug"
    }
    # if ($env:TILEDB_CI_ASAN -eq "ON") {
    #  $bootstrapOptions = $bootstrapOptions + " -EnableSanitizer address -EnableDebug"
    # }
    # if ($env:TILEDB_CI_TSAN -eq "ON") {
    #  $bootstrapOptions = $bootstrapOptions + " -EnableSanitizer thread -EnableDebug"
    # }
    # static already added above as initial default
    # if ($env:TILEDB_FORCE_BUILD_DEPS" -eq "ON") {
    #   $bootstrapOptions = $bootstrapOptions + " -EnableBuildDeps"
    # }
    if ($env:TILEDB_WEBP -eq "OFF") {
      $bootstrapOptions = $bootstrapOptions + " -DisableWebP"
    }
    if ($env:TILEDB_WERROR -eq "OFF") {
      $bootstrapOptions = $bootstrapOptions + " -DisableWerror"
    }

    # Set install prefix for packaging purposes
    $bootstrapOptions = "-Prefix $env:AGENT_BUILDDIRECTORY/s/dist " + $bootstrapOptions

    $bootstrapExpression = "& $env:BUILD_SOURCESDIRECTORY\bootstrap.ps1 " + $bootstrapOptions
    Write-Host "bootstrapExpression: $bootstrapExpression"
    Invoke-Expression $bootstrapExpression

    if ($LastExitCode -ne 0) {
       Write-Host "Bootstrap failed."
       $host.SetShouldExit($LastExitCode)
    }

    cmake --build $env:AGENT_BUILDDIRECTORY\build --config Release -- /verbosity:minimal

    if ($LastExitCode -ne 0) {
       Write-Host "Build failed. CMake exit status: " $LastExitCocde
       $host.SetShouldExit($LastExitCode)
    }

    cmake --build $env:AGENT_BUILDDIRECTORY\build --target install-tiledb --config Release

    if ($LastExitCode -ne 0) {
      Write-Host "Installation failed."
      $host.SetShouldExit($LastExitCode)
    }
  displayName: "Build"
  continueOnError: true

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Agent.BuildDirectory)\s\'
    includeRootFolder: false
    archiveType: 'zip' # Options: zip, 7z, tar, wim
    archiveFile: $(Build.ArtifactStagingDirectory)/tiledb-$(ARTIFACT_OS)-$(ARTIFACT_ARCH)-build-dir.zip
    replaceExistingArchive: true
    verbose: true # Optional

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)/tiledb-$(ARTIFACT_OS)-$(ARTIFACT_ARCH)-build-dir.zip'
    artifactName: 'build-dirs'

# Archive files
# Compress files into .7z, .tar.gz, or .zip
- task: ArchiveFiles@2
  inputs:
      rootFolderOrFile: '$(Agent.BuildDirectory)\s\dist\'
      includeRootFolder: false
      archiveType: 'zip' # Options: zip, 7z, tar, wim
      archiveFile: $(Build.ArtifactStagingDirectory)/tiledb-$(ARTIFACT_OS)-$(ARTIFACT_ARCH)-$(Build.SourceBranchName)-$(commitHash).zip
      replaceExistingArchive: true
      verbose: true # Optional
  condition: succeeded()

- task: PublishBuildArtifacts@1
  inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)\tiledb-$(ARTIFACT_OS)-$(ARTIFACT_ARCH)-$(Build.SourceBranchName)-$(commitHash).zip'
      artifactName: 'built-libs'
  condition: succeeded()
