steps:
- task: NodeTool@0 # Needed for compatibility with manylinux image.
  inputs:
    versionSpec: '16.x'
  displayName: 'Install Node.js 16'

- bash: |
    echo "'uname -s' is:"
    echo "uname: " $(uname)
    echo "uname -m: " $(uname -m)
    echo "uname -r:" $(uname -r)
    echo "uname -s: " $(uname -s)
    echo "uname -v: " $(uname -v)
    printenv
  displayName: 'Print env'

# Need this for virtualenv and arrow tests if enabled
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.8'
  condition: eq(variables['TILEDB_ARROW_TESTS'], 'ON')

- bash: |
    set -e pipefail
    python -m pip install --upgrade pip virtualenv
    if [[ "$TILEDB_ARROW_TESTS" == "ON" ]]; then
      pip install pyarrow pybind11 numpy
    fi
  condition: eq(variables['TILEDB_ARROW_TESTS'], 'ON')

- bash: |
    #https://stackoverflow.com/questions/65278351/no-core-dump-file-generated-after-segmentation-fault-in-macos-big-sur
    sysctl -a | grep core

    #https://developer.apple.com/forums/thread/53023?answerId=158378022#158378022
    #sudo chmod 1775 /cores
    #https://developer.apple.com/forums/thread/127503?answerId=401103022#401103022
    #so seems after change to 1777, the 'runner' attempt did core dump, while the sudo version did not...
    sudo chmod 1777 /cores
    sudo chown $(whoami) /cores

    sudo ls -l /

    ps -A
    ls -l /cores
  condition: and(eq(variables['Agent.OS'], 'Darwin'), startsWith(variables['imageName'], 'macOS-'))
  displayName: 'prep macOS for "runner" core dumps'


- bash: |
    brew install autoconf automake
  condition: eq(variables['Agent.OS'], 'Darwin')

- bash: |
    # enable core dumps
    ulimit -c               # should output 0 if disabled
    ulimit -c unlimited     # Enable core dumps to be captured (must be in same run block)
    ulimit -c               # should output 'unlimited' now

    # Azure sets "SYSTEM=build" for unknown reasons, which breaks the OpenSSL configure script
    #   - openssl configure uses ENV{SYSTEM} if available:
    #     https://github.com/openssl/openssl/blob/6d745d740d37d680ff696486218b650512bbbbc6/config#L56
    #   - error description:
    #     https://developercommunity.visualstudio.com/content/problem/602584/openssl-build-error-when-using-pipelines.htm
    unset SYSTEM

    # azure bash does not treat intermediate failure as error
    # https://github.com/Microsoft/azure-pipelines-yaml/issues/135
    set -xe pipefail

    git config --global user.name 'Azure Pipeline'
    git config --global user.email 'no-reply@tiledb.io'

    if [[ "$BACKWARDS_COMPATIBILITY_ARRAYS" == "ON" ]]; then
      git clone https://github.com/TileDB-Inc/TileDB-Unit-Test-Arrays.git --branch 2.5.0 test/inputs/arrays/read_compatibility_test
    fi
    #   displayName: 'Clone Unit-Test-Arrays'

    # - bash: |
    # Start HDFS server if enabled
    if [[ "$TILEDB_HDFS" == "ON" ]]; then
      # - ssh to localhost is required for HDFS launch...
      # - /home/vsts has permissions g+w and is owned by user 'docker'
      #   for VSTS purposes, so disable ssh strictness
      sudo sed -i "s/StrictModes\ yes/StrictModes\ no/g" /etc/ssh/sshd_config

      source scripts/install-hadoop.sh
      source scripts/run-hadoop.sh
    fi

    # Start minio server if S3 is enabled
    if [[ "$TILEDB_S3" == "ON" ]]; then
      source scripts/install-minio.sh;
      source scripts/run-minio.sh;
    fi

    # Start Azurite if Azure is enabled
    if [[ "$TILEDB_AZURE" == "ON" ]]; then
      source scripts/install-azurite.sh;
      source scripts/run-azurite.sh;
    fi

    # Start GCS Emulator if GCS is enabled
    if [[ "$TILEDB_GCS" == "ON" ]]; then
      source scripts/install-gcs-emu.sh;
      source scripts/run-gcs-emu.sh;
    fi

    # Set up arguments for bootstrap.sh
    bootstrap_args="--enable=verbose";

    # Enable TILEDB_STATIC by default
    [ "$TILEDB_STATIC" ] || TILEDB_STATIC=ON
    if [[ "$TILEDB_STATIC" == "ON" ]]; then
      bootstrap_args="${bootstrap_args} --enable-static-tiledb";
    fi
    if [[ "$TILEDB_HDFS" == "ON" ]]; then
      bootstrap_args="${bootstrap_args} --enable-hdfs";
    fi;
    if [[ "$TILEDB_S3" == "ON" ]]; then
      bootstrap_args="${bootstrap_args} --enable-s3";
    fi;
    if [[ "$TILEDB_AZURE" == "ON" ]]; then
      bootstrap_args="${bootstrap_args} --enable-azure";
    fi;
    if [[ "$TILEDB_GCS" == "ON" ]]; then
      bootstrap_args="${bootstrap_args} --enable-gcs";
    fi;
    if [[ "$TILEDB_TOOLS" == "ON" ]]; then
      bootstrap_args="${bootstrap_args} --enable-tools";
    fi
    if [[ "$TILEDB_DEBUG" == "ON" ]]; then
      bootstrap_args="${bootstrap_args} --enable-debug";
    fi
    if [[ "$TILEDB_CI_ASAN" == "ON" ]]; then
      # Add address sanitizer flag if necessary
      bootstrap_args="${bootstrap_args} --enable-sanitizer=address --enable-debug";
    fi
    if [[ "$TILEDB_CI_TSAN" == "ON" ]]; then
      # Add thread sanitizer flag if necessary
      bootstrap_args="${bootstrap_args} --enable-sanitizer=thread --enable-debug";
    fi
    if [[ "$TILEDB_SERIALIZATION" == "ON" ]]; then
      # Add serialization flag if necessary
      bootstrap_args="${bootstrap_args} --enable-serialization";
    fi
    if [[ "$TILEDB_FORCE_BUILD_DEPS" == "ON" ]]; then
      # Add superbuild flag
      bootstrap_args="${bootstrap_args} --force-build-all-deps";
    fi
    if [[ "$TILEDB_WEBP" == "OFF" ]]; then
      bootstrap_args="${bootstrap_args} --disable-webp";
    fi;
    if [[ "$AGENT_OS" == "Darwin" ]]; then
      # We want to be able to print a stack trace when a core dump occurs
      sudo chmod 1777 /cores
      # release symbols closer to 'release' than debug, and will hopefully have 'enough'
      # context for reasonable stack.  'debug' (lack of) optimization less likely to
      # to produce problems that might be encountered by actual 'release' build.
      bootstrap_args="${bootstrap_args} --enable-release-symbols";
    fi

    # displayName: 'Install dependencies'

    mkdir -p $BUILD_REPOSITORY_LOCALPATH/build
    cd $BUILD_REPOSITORY_LOCALPATH/build

    # Configure and build TileDB
    echo "Bootstrapping with '$bootstrap_args'"
    $BUILD_REPOSITORY_LOCALPATH/bootstrap $bootstrap_args

    make -j4
    make examples -j4
    make -C tiledb install

    #- bash: |
    cd $BUILD_REPOSITORY_LOCALPATH/build
    ls -la

    if [[ ( "$AGENT_OS" == "Linux" && "$TILEDB_S3" == "ON" ) ]]; then
      # make sure docker is still running...
      printenv
      docker ps -a
    fi

    make -j4 -C tiledb tiledb_unit
    make -j4 -C tiledb tiledb_regression

    if [[ "$TILEDB_CI_ASAN" == "ON" ]]; then
      export ASAN_OPTIONS=detect_leaks=0 LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libasan.so.5
    fi

    if [[ "$AGENT_OS" == "Darwin" && "$TILEDB_GCS" == "ON" ]]; then
      # GCS unit tests are temporarily unsupported on CI for MACOS. Fake success with
      # this echo.
      echo "##vso[task.setvariable variable=TILEDB_CI_SUCCESS]1"
    else
      # run directly the executable, cmake catches the segfault and blocks
      # the core dump
      ./tiledb/test/tiledb_unit -d yes
      ./tiledb/test/regression/tiledb_regression -d yes
    fi

    # Kill the running Minio server, OSX only because Linux runs it within
    # docker.
    if [[ ( "$AGENT_OS" == "Darwin" && "$TILEDB_S3" == "ON" ) ]]; then
      kill -9 $MINIO_PID
    fi

    # Kill the running Azurite server
    if [[ "$TILEDB_AZURE" == "ON" ]]; then
      kill -9 $AZURITE_PID
    fi

    # Kill the running GCS emulator server Linux only because OSX does not
    # run the emulator
    if [[ "$AGENT_OS" != "Darwin" && "$TILEDB_GCS" == "ON" ]]; then
      kill -9 $GCS_PID
    fi

  displayName: 'Build and test libtiledb'

- bash: |
    set -x
    ls -la /cores
    cntfiles=0
    for f in $(find /cores -name 'core.*');
      do
        echo "stack trace for $f"
        lldb -c $f --batch -o 'bt all' -o 'image list' -o 're r -a' -o 'di -F intel -f -m' -o 'quit'
        (( cntfiles = cntfiles + 1 ))
      done;
    #mv whatever we can, possible we won't get all due to permissions
    #and archiving may have chance of failing due to size constraints in runner VM
    mkdir -p $BUILD_REPOSITORY_LOCALPATH/build/core
    mv -v /cores/core.* $BUILD_REPOSITORY_LOCALPATH/build/core/
    ls -la $BUILD_REPOSITORY_LOCALPATH/build/core
    if [[ cntfiles -ne 0 ]] ; then
      export TDB_COREFILE_CNT=$cntfiles
    fi
  condition: and(failed(), eq(variables['Agent.OS'], 'Darwin')) # only run this job if the build step failed
  displayName: 'Print stack trace'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.Repository.LocalPath)'
    includeRootFolder: false
    archiveType: 'tar'
    tarCompression: 'gz'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(ARTIFACT_OS)-build-dir.tar.gz'
    replaceExistingArchive: true
    verbose: true
  condition: and(failed(), eq(variables['Agent.OS'], 'Darwin')) # only run this job if the build step failed

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)/$(ARTIFACT_OS)-build-dir.tar.gz'
    artifactName: 'build-dirs'
  condition: and(failed(), eq(variables['Agent.OS'], 'Darwin')) # only run this job if the build step failed

- bash: |
    # tiledb_unit is configured to set a job-level variable TILEDB_CI_SUCCESS=1
    # following the test run. If this variable is not set, the build should fail.
    # see https://github.com/TileDB-Inc/TileDB/pull/1400 (5f0623f4d3)
    if [[ "$TILEDB_CI_SUCCESS" -ne 1 ]]; then
      exit 1;
    fi
  displayName: 'Test status check'


- bash: |
    set -e pipefail
    # Display log files if the build failed
    echo "Dumping log files for failed build"
    echo "----------------------------------"
    for f in $(find $BUILD_REPOSITORY_LOCALPATH/build -name *.log);
      do echo "------"
         echo $f
         echo "======"
         cat $f
      done;
  condition: failed() # only run this job if the build step failed
  displayName: "Print log files (failed build only)"
